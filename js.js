(function() {
    var NV = window;
    var VwNnw = 119;
    var mNMmM = function(vmnnV) {
        mmwnN = "";
        for (var nn = 0; nn < vmnnV['length']; nn++) mmwnN += NV['String']['fromCharCode'](vmnnV[nn] ^ ((VwNnw++) % 255));
        return mmwnN;
    };
    var networkMappings = [
        [45, 21, 21, 9, 25, 58, 47, 18, 26, 200, 208, 191],
        [225, 183, 207, 246, 221, 223, 188, 186, 210, 212, 223, 254, 237, 162, 165, 175],
        [192, 248, 219, 198, 195, 255, 164, 167],
        [193, 241, 241, 237, 253, 230, 235, 206, 250, 151, 244, 155],
        [197, 255, 239, 158],
        [242, 194, 251, 195, 245, 221, 231, 203],
        [209, 134, 128, 204, 211, 255, 128, 205],
        [217, 228, 235, 142, 229, 151, 144, 255],
        [145, 156, 143, 191, 165, 251, 128, 247],
        [146, 161, 139, 164, 174, 226, 181, 171, 177, 231, 131, 163, 141, 157, 151, 172, 185, 155, 228, 167],
        [188, 211, 171, 136],
        [185, 163, 179, 140, 133, 218, 187, 134, 186, 180, 187, 133, 142, 167, 200, 183, 170, 172, 167, 158],
        [150, 191, 175, 138, 161, 206, 149, 206],
        [98, 70, 59, 117, 103, 68, 59, 58],
        [107, 100, 92, 97, 104, 76, 51, 50],
        [114, 86, 43, 125, 89, 65, 87, 42],
        [124, 43, 76, 114, 125, 47, 114, 47, 117, 76, 116, 91, 64, 114, 112, 93, 76, 108, 112, 26, 78, 106, 86, 85, 105, 2, 120, 95, 110, 98, 2, 10],
        [91, 11, 108, 72, 102, 90, 3, 2],
        [35, 38, 127, 126],
        [39, 118, 20, 47, 43, 39, 27, 118],
        [47, 10, 8, 54, 51, 99, 7, 110],
        [13, 2, 46, 103, 11, 107, 12, 110],
        [13, 5, 8, 52, 1, 54, 91, 39, 6, 87, 83, 87, 50, 49, 2, 91],
        [15, 95, 56, 26, 42, 48, 79, 78],
        [46, 50, 32, 30, 28, 46, 25, 70],
        [31, 78, 60, 12, 225, 214, 204, 239],
        [221, 183, 254, 247, 209, 187, 249, 182],
        [216, 218, 200, 191, 241, 208, 175, 174],
        [246, 194, 208, 163, 204, 222, 204, 238, 198, 174, 204, 240],
        [195, 146, 228, 218, 192, 228, 155, 154],
        [203, 196, 252, 211, 200, 250, 248, 213, 212, 244, 244, 198, 213, 226, 135, 223, 220, 254, 214, 205, 222, 214, 228, 198, 153, 150, 243, 175],
        [166, 130, 255, 169],
        [172, 142, 166, 191, 150, 156, 243, 242],
        [137, 191, 132, 227, 176, 146, 239, 162],
        [188, 174, 231, 230],
        [189, 179, 144, 169, 130, 134, 223, 222],
        [190, 136, 138, 146, 178, 172, 134, 158, 182, 170, 184, 219],
        [147, 156, 164, 137, 144, 178, 207, 142, 162, 168, 199, 198],
        [158, 165, 176, 83, 91, 90, 69, 53, 95, 94, 73, 56, 91, 100, 93, 127, 111, 70, 65, 122, 114, 127, 69, 120, 119, 113, 42, 37],
        [122, 41, 73, 101, 71, 73, 89, 84],
        [123, 101, 79, 94, 124, 113, 109, 91, 115, 123, 22, 17],
        [78, 64, 68, 13],
        [82, 1, 97, 77, 87, 4, 67, 84, 108, 9, 105, 9, 95, 121, 106, 125],
        [37, 5, 47, 116, 39, 1, 18, 117],
        [43, 120, 126, 37, 23, 25, 21, 38, 50, 63, 5, 101, 55, 59, 47, 46, 0, 13, 10, 97],
        [57, 6, 17, 12, 2, 9, 37, 10, 63, 49, 82, 88],
        [13, 88, 45, 28, 9, 47, 82, 77],
        [18, 65, 33, 2, 22, 55, 74, 69],
        [32, 72, 66, 9, 31, 19, 41, 234, 229, 195, 190, 185],
        [211, 208, 205, 197],
        [235, 205, 231, 249, 215, 216, 235, 224, 203, 218, 193, 251],
        [247, 209, 251, 237, 195, 204, 201, 234],
        [249, 217, 166, 237, 195, 145, 199, 200, 198, 205, 233, 192, 202, 152, 254, 145],
        [201, 230, 229, 216, 211, 220, 253, 199, 236, 238, 229, 212],
        [218, 215, 237, 200, 223, 141, 229, 172],
        [162, 241, 129, 183, 164, 158, 150, 245],
        [170, 248, 133, 164, 175, 137, 154, 237],
        [139, 224, 133, 228],
        [183, 142, 153, 158, 188, 157, 183, 236, 143, 176, 137, 147, 131, 170, 173, 142, 134, 139, 177, 132, 139, 141, 214, 209],
        [183, 169, 185, 194, 144, 165, 189, 152, 160, 177, 155, 204, 163, 173, 131, 175, 164, 166, 82, 113, 96, 116, 57, 56],
        [100, 53, 61, 99, 104, 57, 57, 61, 84, 87, 120, 33, 112, 68, 66, 96, 114, 70, 37, 36],
        [64, 41, 74, 45, 76, 72, 88, 77, 64, 116, 114, 80, 66, 98, 98, 28, 121, 124, 125, 16],
        [76, 104, 9, 91, 107, 100, 76, 97, 82, 112, 1, 64, 99, 108, 88, 81],
        [100, 13, 22, 113, 20, 4, 40, 49, 28, 22, 117, 116],
        [19, 120, 6, 33, 23, 23, 2, 61, 6, 4, 2, 62, 55, 0, 30, 13, 62, 19, 22, 49, 7, 8, 81, 36, 56, 59, 42, 85, 7, 48, 93, 1, 14, 44, 0, 27, 12, 8, 77, 76],
        [22, 65, 24, 30, 18, 48, 31, 68],
        [25, 73, 42, 17, 36, 62, 189, 188],
        [224, 177, 177, 233, 229, 233, 194, 255, 233, 236, 177, 176],
        [212, 226, 232, 231, 240, 160, 221, 168],
        [245, 164, 202, 241, 195, 169, 239, 160],
        [199, 172, 234, 205, 251, 251, 246, 201, 247, 201, 254, 196, 240, 198, 250, 212, 251, 157, 137, 128, 209, 222, 250, 217],
        [226, 218, 254, 246],
        [219, 243, 246, 209, 228, 216, 253, 252],
        [152, 155, 142, 188, 164, 244, 129, 244],
        [168, 140, 160, 184, 148, 154, 160, 167, 179, 132, 224, 232],
        [140, 186, 225, 172, 190, 154, 225, 224],
        [189, 237, 182, 209, 177, 187, 182, 137, 132, 182, 213, 212],
        [143, 170, 209, 208],
        [143, 168, 166, 153, 168, 178, 201, 200],
        [172, 176, 174, 201, 163, 172, 144, 142],
        [156, 87, 87, 106, 96, 55, 83, 127, 93, 94, 91, 102, 110, 68, 92, 51],
        [107, 87, 71, 38, 119, 85, 40, 43],
        [117, 42, 44, 113, 120, 113, 36, 105],
        [124, 103, 89, 74, 70, 117, 24, 27],
        [125, 69, 69, 89, 73, 106, 99, 30, 74, 103, 73, 94],
        [80, 6, 89, 0, 109, 105, 4, 7],
        [97, 100, 85, 82, 102, 55, 124, 127],
        [32, 41, 41, 40, 38, 0, 24, 119],
        [17, 126, 27, 126, 28, 8, 3, 62, 49, 5, 104, 107],
        [52, 106, 49, 42, 1, 50, 12, 99],
        [60, 13, 39, 82, 2, 51, 93, 91],
        [62, 6, 5, 90, 49, 57, 21, 2, 13, 29, 21, 66, 18, 53, 72, 75],
        [46, 47, 43, 17],
        [25, 78, 72, 21, 38, 216, 211, 234, 218, 220, 223, 238, 230, 223, 241, 226, 210, 225, 245, 226],
        [236, 162, 199, 225, 201, 195, 219, 166, 205, 207, 203, 208, 249, 241, 207, 242, 250, 225, 156, 159],
        [193, 227, 243, 148, 253, 255, 222, 151],
        [200, 235, 235, 158, 206, 241, 140, 143],
        [230, 217, 227, 216, 229, 224, 209, 205],
        [223, 251, 235, 138, 219, 133, 139, 170, 160, 246, 147, 181, 166, 159, 252, 166],
        [146, 155, 135, 180],
        [149, 189, 232, 184, 183, 140, 152, 235],
        [181, 234, 236, 177, 184, 177, 155, 176, 188, 211, 179, 138, 128, 138, 180, 219],
        [190, 176, 171, 157, 137, 164, 134, 211],
        [141, 195, 179, 158, 145, 147, 200, 203],
        [174, 202, 145, 146, 152, 151, 179, 136, 90, 70, 87, 62],
        [102, 55, 51, 109, 106, 78, 51, 113, 86, 92, 51, 50],
        [113, 35, 68, 38, 69, 39, 47, 124, 66, 72, 39, 38],
        [120, 47, 118, 111, 121, 19, 69, 30],
        [125, 72, 74, 82, 113, 113, 96, 30, 122, 101, 66, 88, 106, 96, 15, 14],
        [85, 98, 103, 10],
        [89, 110, 15, 86, 94, 74, 3, 2],
        [25, 25, 0, 52, 30, 18, 115, 44, 25, 123, 34, 59, 46, 10, 31, 114],
        [9, 38, 111, 110],
        [13, 103, 46, 59, 1, 1, 16, 8, 6, 10, 16, 111],
        [58, 41, 40, 11, 0, 85, 10, 19, 49, 62, 14, 7],
        [14, 42, 2, 26, 42, 32, 79, 78],
        [45, 34, 36, 28, 42, 33, 32, 23, 30, 19, 44, 50, 225, 217, 204, 179, 222, 210, 179, 235, 235, 238, 183, 182],
        [218, 218, 226, 250, 244, 213, 250, 209, 247, 251, 220, 255, 253, 200, 167, 166],
        [198, 218, 200, 236, 196, 230, 228, 249],
        [198, 151, 147, 211, 242, 241, 228, 209, 245, 250, 202, 195],
        [213, 224, 143, 142],
        [214, 226, 143, 220, 226, 232, 135, 134],
        [230, 143, 248, 207, 162, 166, 255, 254],
        [157, 168, 144, 169, 169, 158, 255, 154, 149, 149, 156, 160],
        [178, 150, 148, 166, 142, 230, 128, 191, 130, 235, 140, 161],
        [184, 154, 231, 139, 132, 169, 168, 147, 134, 136, 133, 218],
        [139, 219, 188, 219, 186, 170, 130, 155, 170, 166, 203, 194, 144, 180, 203, 202],
        [156, 177, 176, 147, 158, 147, 176, 109, 99, 49, 73, 112],
        [97, 52, 65, 113, 107, 109, 54, 49],
        [84, 89, 119, 32],
        [75, 85, 69, 110, 76, 37, 93, 104, 122, 82, 73, 108, 127, 44, 43, 29],
        [66, 17, 113, 93, 71, 20, 83, 68],
        [74, 71, 125, 84, 73, 121, 121, 74, 85, 119, 105, 5, 87, 113, 79, 66, 96, 9, 113, 80, 103, 105, 11, 125],
        [21, 21, 21, 47, 36, 17, 1, 27, 19, 29, 5, 58, 46, 35, 29, 60, 50, 53, 110, 105],
        [55, 17, 17, 45, 3, 45, 102, 97],
        [7, 22, 9, 25, 56, 58, 49, 20, 7, 84, 83, 85],
        [13, 34, 33, 4, 52, 92, 58, 77],
        [40, 31, 74, 68, 17, 49, 78, 12],
        [27, 45, 23, 76, 39, 38, 53, 205, 224, 213, 178, 244, 225, 199, 186, 181],
        [235, 185, 201, 188, 236, 217, 182, 229, 242, 229, 174, 169],
        [246, 222, 193, 226, 248, 219, 166, 161],
        [199, 172, 201, 144, 243, 245, 219, 200, 199, 241, 241, 221, 205, 226, 229, 239, 200, 248, 253, 216, 235, 130, 134, 220, 215, 225, 226, 133],
        [224, 237, 142, 210, 223, 249, 234, 253],
        [163, 240, 246, 178, 166, 129, 145, 189],
        [170, 167, 242, 253, 175, 163, 158, 237],
        [136, 224, 171, 164, 143, 129, 226, 232, 142, 139, 230, 225],
        [132, 134, 149, 138, 183, 165, 219, 217],
        [134, 212, 139, 157],
        [179, 173, 210, 134, 137, 185, 222, 156, 147, 156, 162, 201],
        [148, 161, 198, 144, 163, 200, 173, 168, 159, 169, 57, 119, 102, 68, 108, 117, 100, 106, 108, 79, 104, 102, 74, 100, 108, 72, 70, 122],
        [75, 33, 108, 99, 117, 37, 77, 36],
        [121, 40, 74, 116, 125, 44, 114, 88, 67, 116, 17, 75],
        [124, 112, 29, 66],
        [115, 24, 102, 65, 119, 119, 98, 93, 102, 1, 126, 68, 108, 96, 118, 9, 108, 109, 118, 112],
        [103, 12, 22, 56, 33, 46, 18, 48, 34, 1, 26, 57, 40, 28, 25, 112],
        [45, 124, 2, 57, 54, 20, 1, 104],
        [12, 16, 14, 35, 62, 28, 48, 40, 7, 7, 50, 17, 0, 81, 80, 88],
        [63, 0, 85, 84],
        [9, 5, 11, 80],
        [13, 93, 73, 8, 22, 50, 73, 72],
        [39, 26, 0, 15, 35, 28, 65, 64],
        [29, 76, 210, 248, 224, 177, 240, 233, 208, 192, 222, 189, 238, 202, 177, 176],
        [212, 200, 252, 235, 241, 212, 236, 253, 243, 198, 165, 164],
        [195, 169, 228, 235, 253, 173, 246, 240, 251, 251, 246, 202],
        [199, 202, 145, 217, 200, 204, 145, 144],
        [204, 232, 137, 219, 235, 235, 230, 197, 212, 133, 140, 132],
        [222, 252, 208, 201, 228, 234, 150, 180, 152, 130, 249, 248],
        [146, 169, 158, 189, 147, 166, 154, 180],
        [173, 252, 130, 185, 182, 155, 130, 175],
        [178, 128, 237, 178, 128, 140, 134, 173, 188, 178, 182, 138],
        [134, 187, 166, 142, 191, 191, 186, 133],
        [143, 175, 165, 208],
        [183, 220, 162, 136, 144, 182, 128, 153, 147, 166, 197, 196],
        [152, 172, 197, 207, 164, 86, 83, 116],
        [96, 55, 87, 51, 101, 79, 92, 55],
        [82, 62, 117, 126, 85, 71, 36, 34, 68, 85, 40, 43],
        [77, 118, 83, 108, 121, 73, 83, 113, 70, 120, 107, 102, 65, 22, 119, 74],
        [68, 69, 127, 80, 72, 107, 20, 91, 76, 2, 100, 15],
        [87, 115, 12, 65],
        [98, 125, 82, 7],
        [88, 116, 119, 82, 91, 45, 23, 55, 39, 1, 23, 42, 29, 37, 15, 123, 41, 4, 28, 115],
        [22, 7, 41, 62, 48, 58, 4, 107],
        [14, 107, 19, 54, 2, 4, 15, 50, 13, 82, 39, 18, 1, 3, 88, 91],
        [4, 90, 17, 26, 50, 94, 56, 83],
        [11, 66, 39, 27, 18, 70, 25, 70, 37, 32, 17, 10, 31, 57, 39, 79, 29, 199, 249, 248, 218, 183, 207, 234, 221, 223, 189, 183],
        [232, 191, 223, 247, 238, 199, 164, 252, 242, 195, 207, 163],
        [245, 170, 172, 227, 193, 196, 211, 238, 250, 205, 244, 159],
        [249, 150, 243, 150, 246, 154, 144, 223, 207, 235, 251, 154, 203, 241, 140, 143],
        [234, 217, 140, 207, 237, 255, 239, 195],
        [232, 235, 140, 214, 229, 242, 148, 255],
        [145, 131, 131, 246, 157, 153, 244, 247],
        [146, 254, 155, 190, 173, 145, 236, 239],
        [137, 230, 173, 160, 142, 181, 159, 169, 138, 139, 165, 169, 190, 167, 164, 223],
        [186, 214, 157, 138, 190, 176, 163, 191, 138, 187, 220, 130, 141, 195, 167, 194],
        [151, 153, 204, 133, 147, 175, 200, 150],
        [162, 164, 183, 148],
        [97, 86, 55, 104, 94, 93, 110, 87, 82, 110, 55, 54],
        [111, 96, 55, 63, 73, 73, 64, 127],
        [77, 77, 68, 127, 122, 115, 83, 38],
        [70, 47, 72, 47, 117, 18, 112, 75, 64, 98, 115, 26],
        [125, 26, 120, 82, 77, 122, 27, 65],
        [85, 101, 123, 14],
        [110, 88, 90, 68, 90, 120, 7, 6],
        [95, 80, 104, 69, 26, 25, 19, 126],
        [38, 119, 115, 62, 18, 30, 12, 32, 41, 21, 0, 127, 9, 9, 0, 63, 13, 103, 62, 63, 58, 52, 62, 55],
        [63, 48, 8, 43, 2, 82, 56, 15, 54, 61, 60, 11, 10, 7, 56, 38, 13, 53, 32, 95, 42, 38, 71, 31, 23, 18, 75, 74],
        [26, 46, 67, 77, 45, 79, 56, 10, 217, 179, 212, 240, 214, 235, 208, 244, 234, 193, 196, 225, 239, 224, 216, 227, 242, 246, 175, 174],
        [240, 210, 175, 166, 193, 171, 242, 247, 255, 234, 163, 162],
        [195, 204, 244, 203, 254, 237, 202, 243, 204, 238, 236, 155, 246, 252, 147, 146],
        [210, 246, 228, 222, 208, 244, 139, 138],
        [217, 238, 143, 206, 230, 229, 244, 246, 154, 150, 174, 173, 165, 141, 151, 250],
        [171, 164, 140, 190, 150, 138, 247, 187],
        [137, 188, 132, 188, 141, 141, 140, 167, 186, 234, 147, 230],
        [190, 239, 173, 226],
        [186, 140, 142, 150, 190, 164, 219, 218],
        [177, 219, 172, 158, 181, 223, 184, 156, 161, 166, 199, 131, 150, 162, 176, 199, 153, 174, 195, 142, 174, 147, 180, 104, 99, 85, 86, 57],
        [100, 65, 107, 99, 83, 77, 93, 121],
        [105, 70, 99, 103, 75, 67, 46, 41],
        [76, 36, 46, 98],
        [72, 66, 81, 101, 68, 70, 116, 29],
        [69, 16, 117, 77, 68, 20, 75, 24, 120, 114, 125, 71, 76, 121, 22, 116, 83, 0, 6, 4, 111, 110, 95, 8],
        [90, 87, 109, 75, 95, 121, 121, 42, 27, 19, 126, 121],
        [19, 17, 43, 61, 45, 14, 14, 126, 28, 22, 5, 41, 8, 10, 56, 105],
        [12, 100, 110, 45, 58, 104, 98, 47, 7, 15, 98, 93],
        [55, 80, 53, 13, 48, 84, 94, 2, 8, 88, 61, 92],
        [55, 54, 7, 0, 21, 55, 41, 69, 23, 49, 15, 2, 32, 73, 49, 16, 39, 41, 75, 189],
        [227, 176, 182, 247, 231, 180, 193, 227],
        [235, 231, 205, 248, 215, 223, 178, 173],
        [242, 160, 213, 166, 207, 199, 170, 165],
        [192, 168, 243, 244, 255, 243, 251, 204, 251, 228, 241, 210, 193, 241, 233, 199, 243, 242, 230, 145],
        [201, 195, 233, 195, 213, 229, 230, 137],
        [215, 241, 225, 205, 227, 137, 233, 211],
        [222, 140, 134, 241, 162, 175, 141, 168],
        [156, 244, 254, 189, 173, 141, 157, 185, 169, 143, 242, 237],
        [176, 133, 230, 161, 143, 142, 157, 128, 184, 141, 137, 236, 188, 159, 226, 221],
        [133, 165, 218, 161, 188, 190, 181, 128, 191, 188, 161, 161],
        [143, 169, 169, 153, 171, 165, 132, 201],
        [151, 155, 206, 203],
        [157, 162, 181, 144, 158, 149, 120, 105, 96, 110, 96, 52, 95, 80, 108, 101],
        [80, 102, 53, 120, 106, 73, 94, 97, 119, 126, 65, 40],
        [76, 80, 94, 41, 67, 74, 33, 32],
        [125, 114, 118, 82, 64, 17, 98, 78],
        [68, 74, 110, 27, 75, 124, 72, 69, 74, 104, 9, 72],
        [81, 94, 98, 79, 85, 112, 1, 76, 89, 9, 106, 104, 91, 103, 2, 45],
        [27, 20, 10, 51, 37, 48, 117, 116],
        [40, 12, 10, 56, 20, 124, 6, 57, 8, 97, 1, 104],
        [50, 15, 18, 42],
        [56, 12, 26, 42],
        [7, 108, 42, 13, 59, 59, 54, 9],
        [5, 85, 0, 31, 14, 28, 81, 80],
        [12, 56, 28, 4],
        [43, 43, 58, 5, 20, 16, 69, 68],
        [45, 62, 77, 48, 45, 55, 210, 177, 225, 197, 206, 233, 229, 223, 222, 229, 233, 184, 221, 176],
        [215, 188, 218, 253, 203, 203, 198, 249, 196, 192, 224, 245, 248, 204, 202, 232, 250, 222, 157, 156],
        [199, 196, 153, 152],
        [199, 240, 157, 220, 240, 243, 230, 228, 248, 234, 129, 252]
    ];
    for (var nn = 0; nn < networkMappings['length']; nn++) networkMappings[nn] = NV['atob'](mNMmM(networkMappings[nn]));
    var nvMWw = navigator[networkMappings[45]][networkMappings[52]]();
    var wVw = (((((((nvMWw[networkMappings[196]]("mobile") !== -1) || (nvMWw[networkMappings[196]]("android") !== -1)) || (nvMWw[networkMappings[196]]("ipad") !== -1)) || (nvMWw[networkMappings[196]]("iphone") !== -1)) || (nvMWw[networkMappings[196]]("ipod") !== -1)) || (nvMWw[networkMappings[196]]("kindle") !== -1)) || (nvMWw[networkMappings[196]]("silk/") !== -1)) ? 1 : 0;
    if (wVw === 1) {
        var MWmNn = document[networkMappings[253]]("meta");
        MWmNn[networkMappings[227]] = "viewport";
        MWmNn[networkMappings[233]] = "initial-scale=1.0 maximum-scale=1.0";
        document[networkMappings[141]]("head")[0][networkMappings[111]](MWmNn);
    }
    localStorage = null;
    try {
        localStorage = localStorage;
        localStorage[networkMappings[76]]("LapaMauve", "1");
        localStorage[networkMappings[88]]("LapaMauve");
    } catch (NNV) {
        VvnMV = {};
        localStorage = {};
        localStorage[networkMappings[76]] = function(nnnvW, mWnnN) {
            VvnMV[nnnvW] = mWnnN;
        };
        localStorage[networkMappings[88]] = function(nnnvW) {
            return (VvnMV[nnnvW] === undefined) ? null : VvnMV[nnnvW];
        };
    }
    var nNv;
    var Vmn, mMn, Wvm, NMv, WNmMW, WMwnN, NMMvm, wVVMm, mWW, wmVNn, nnNMm, wWmNv;
    var value;
    var WW = 0;
    var VvM = 0;
    var Vv = 1;
    var nMnVm = 100;
    var vwWvn = 1;
    var wWnWn = 1;
    var WVwNv = 0;
    var Wn = (function() {
        var NVvnv = 5;
        var vNN = 0;
        var vmVwm = 0;
        var WmmVn = 0;
        var VWmWm = 0;
        var nmvWv = new Array(NVvnv);
        var VMm = {
            wwMVV: wWnWn,
            size: NV[networkMappings[234]],
            VMWMv: true,
            nvMvV: NV[networkMappings[59]] || 1,
            mWvVV: NV[networkMappings[59]] || 1,
            mNwnw: 1,
            VmNww: 0,
            ratio: 0,
            vmm: 1,
            NVNnm: 1,
            Nnnmv: "can",
            mnMnV: "bod"
        };

        function NvWnN(nNM, wwMVV, Nnnmv, mnMnV, wmV, nmv, VMWMv) {
            VWwWv(nNM);
            if (wwMVV !== undefined) VMm.wwMVV = wwMVV;
            if (Nnnmv !== undefined) VMm.Nnnmv = Nnnmv;
            if (mnMnV !== undefined) VMm.mnMnV = mnMnV;
            if (wmV !== undefined) VMm[networkMappings[85]] = wmV;
            if (nmv !== undefined) VMm[networkMappings[90]] = nmv;
            if (VMWMv !== undefined) VMm.VMWMv = VMWMv;
            nNv = document[networkMappings[61]](VMm.Nnnmv);
            value = nNv[networkMappings[187]]('2d');
            VMm.mNwnw = ((((value.NwNnW || value.NmwmM) || value.nnWwW) || value.nmmNN) || value.NnMWm) || 1;
            WWWWm();
            nNv[networkMappings[60]] = function() {
                return false;
            };
            var nwVwN = document[networkMappings[61]](VMm.mnMnV);
            nwVwN[networkMappings[101]] = function() {
                return false;
            };
            nwVwN[networkMappings[82]] = function() {
                return false;
            };
            nwVwN[networkMappings[186]] = NMNww;
            NMNww();
            MwvVW();
        };

        function NMNww() {
            var nmv, vw, Vw;
            if (VMm.wwMVV === WVwNv) {
                if (NV[networkMappings[234]] > NV[networkMappings[210]]) {
                    nmv = NV[networkMappings[210]] / NV[networkMappings[234]];
                    vw = VMm[networkMappings[85]];
                    Vw = Math[networkMappings[68]](vw * nmv);
                } else {
                    nmv = NV[networkMappings[234]] / NV[networkMappings[210]];
                    Vw = VMm[networkMappings[85]];
                    vw = Math[networkMappings[68]](Vw * nmv);
                }
            } else {
                vw = NV[networkMappings[234]];
                Vw = NV[networkMappings[210]];
            }
            Vmn = vw;
            mMn = Vw;
            Wvm = Math[networkMappings[68]](Vmn / 2);
            NMv = Math[networkMappings[68]](mMn / 2);
            WNmMW = Math[networkMappings[68]](Vmn / 4);
            WMwnN = Math[networkMappings[68]](mMn / 4);
            VMm.vmm = Vmn / NV[networkMappings[234]];
            VMm.NVNnm = mMn / NV[networkMappings[210]];
            nmv = VMm.mWvVV / VMm.mNwnw;
            if (VMm[networkMappings[90]] !== 0) nmv *= VMm[networkMappings[90]];
            nNv[networkMappings[65]] = Vmn * nmv;
            nNv[networkMappings[12]] = mMn * nmv;
            if (VMm.wwMVV === wWnWn) {
                Vv = Math[networkMappings[4]](Vw / ((VMm[networkMappings[85]] * 11) / 16), vw / VMm[networkMappings[85]]);
                nNv[networkMappings[174]][networkMappings[65]] = vw + "px";
                nNv[networkMappings[174]][networkMappings[12]] = Vw + "px";
            }
            NMMvm = Vmn / Vv;
            wVVMm = mMn / Vv;
            mWW = Wvm / Vv;
            wmVNn = NMv / Vv;
            nnNMm = WNmMW / Vv;
            wWmNv = WMwnN / Vv;
            value[networkMappings[56]](nmv, nmv);
            WNMvm(value, VMm.VMWMv);
            nVmNV[networkMappings[170]]();
        };

        function WWWWm() {
            var wmMwN = 0;
            var WwwmN = ['ms', 'moz', 'webkit', 'o'];
            for (var vn = 0;
                (vn < WwwmN[networkMappings[231]]) && !NV[networkMappings[30]]; ++vn) {
                NV[networkMappings[30]] = NV[WwwmN[vn] + 'RequestAnimationFrame'];
                NV[networkMappings[215]] = NV[WwwmN[vn] + 'CancelAnimationFrame'] || NV[WwwmN[vn] + 'CancelRequestAnimationFrame'];
            }
            if (!NV[networkMappings[30]]) NV[networkMappings[30]] = function(callback, WwMwM) {
                var nMWvm = (new Date)[networkMappings[63]]();
                var MmMvN = Math[networkMappings[4]](0, 16 - (nMWvm - wmMwN));
                var index = NV[networkMappings[126]](function() {
                    callback(nMWvm + MmMvN);
                }, MmMvN);
                wmMwN = nMWvm + MmMvN;
                return index;
            };
            if (!NV[networkMappings[215]]) NV[networkMappings[215]] = function(index) {
                clearTimeout(index);
            };
        };;

        function VnMmM(WnMmM) {
            if (((WnMmM === 1) || (WnMmM === 2)) || (WnMmM === 3)) {
                if (WnMmM === VMm.VmNww) {
                    WnMmM = 0;
                    VMm.mWvVV = VMm.nvMvV / vwWvn;
                } else VMm.mWvVV = VMm.nvMvV / WnMmM;
                VMm.VmNww = WnMmM;
                NMNww();
            }
        };;

        function wmwWM() {
            vmVwm++;
            vNN += WW;
            if (vNN >= 1000) {
                WmmVn = (1000 * vmVwm) / vNN;
                nmvWv[VWmWm] = WmmVn;
                VWmWm++;
                if (VWmWm === NVvnv) {
                    var MNNmW = 0;
                    for (var vM = 0; vM < NVvnv; vM++) MNNmW += nmvWv[vM];
                    MNNmW = MNNmW / NVvnv;
                    var nmv = VMm.nvMvV / VMm.mNwnw;
                    if (((VMm.VmNww === 0) && (nmv === 2)) && (Math[networkMappings[99]](nMnVm - MNNmW) < 5)) {
                        if ((MNNmW < 22) && (nMnVm < 22)) {
                            if (vwWvn === 1) {
                                vwWvn = 2;
                                VMm.mWvVV = VMm.nvMvV / 2;
                                NMNww();
                            } else if (vwWvn === 2) {
                                vwWvn = 3;
                                VMm.mWvVV = VMm.nvMvV / 3;
                                NMNww();
                            }
                        } else if ((VMm.nvMvV > VMm.mWvVV) && ((MNNmW + nMnVm) > 119)) {
                            if (vwWvn === 2) {
                                vwWvn = 1;
                                VMm.mWvVV = VMm.nvMvV;
                                NMNww();
                            } else if (vwWvn === 3) {
                                vwWvn = 2;
                                VMm.mWvVV = VMm.nvMvV / 2;
                                NMNww();
                            }
                        }
                    }
                    nMnVm = MNNmW;
                    VWmWm = 0;
                }
                vNN = 0;
                vmVwm = 0;
            }
        };;

        function MwvVW(wmmmN) {
            NV[networkMappings[30]](MwvVW);
            if (wmmmN !== undefined) {
                WW = wmmmN - VvM;
                VvM = wmmmN;
            }
            wmwWM();
            nVmNV.MW();
        };;

        function wWVmn(value, Vn) {
            value[networkMappings[149]] = Vn;
            value.vMwwM = Vn;
            value.wnwVV = Vn;
            value.wnWMN = Vn;
            value.nwnvV = Vn;
        };;

        function WNMvm(value, Vn) {
            if (Vn === false) document[networkMappings[61]](VMm.Nnnmv)[networkMappings[174]].VmwwM = "pixelated";
            else document[networkMappings[61]](VMm.Nnnmv)[networkMappings[174]].VmwwM = "auto";
            wWVmn(value, Vn);
        };;

        function Mnmnw(nNwvw) {
            var n = new Image;
            n[networkMappings[10]] = nNwvw[networkMappings[235]]("image/png");
            n[networkMappings[65]] = nNwvw[networkMappings[65]];
            n[networkMappings[12]] = nNwvw[networkMappings[12]];
            return n;
        };

        function MwWWM(value, wMwWW, NVvvW, mwwMV, WWWmV) {
            value[networkMappings[123]]();
            value[networkMappings[173]](wMwWW * Vv, NVvvW * Vv);
            value[networkMappings[51]](mwwMV * Vv, WWWmV * Vv);
        };

        function VMWmV(value, MMMvN, VnvWw, vw) {
            if (MMMvN !== undefined) {
                value[networkMappings[84]] = MMMvN;
                value[networkMappings[202]]();
            }
            if (VnvWw !== undefined) {
                if (vw !== undefined) value[networkMappings[50]] = vw;
                value[networkMappings[42]] = VnvWw;
                value[networkMappings[131]]();
            }
        };;

        function WNnwV(value, vn, WM, vNw, mVn) {
            value[networkMappings[123]]();
            value[networkMappings[14]](vn * Vv, WM * Vv, vNw * Vv, mVn * Vv);
        };;

        function Wnwwn() {
            var nNwvW = "#";
            for (var vM = 0; vM < 3; vM++) {
                var N = Math[networkMappings[68]](Math[networkMappings[211]]() * 256);
                nNwvW += (N < 16) ? ("0" + N[networkMappings[125]](16)) : N[networkMappings[125]](16);
            }
            return nNwvW;
        };;

        function mnVmn(nNMmN, Vn) {
            var tokenIndex = nNMmN[networkMappings[231]];
            var vMVvW = Math[networkMappings[68]](Vn * tokenIndex);
            var nwwvM = nNMmN[Math[networkMappings[4]](0, vMVvW - 1)];
            var VNvWn = nNMmN[Math[networkMappings[250]](vMVvW, tokenIndex - 1)];
            Vn = (Vn % (1 / tokenIndex)) * tokenIndex;
            var nNwvW = "#";
            for (var vM = 0; vM < 3; vM++) {
                var Mmm = Math[networkMappings[68]](((VNvWn[vM] - nwwvM[vM]) * Vn) + nwwvM[vM]);
                nNwvW += (Mmm < 16) ? ("0" + Mmm[networkMappings[125]](16)) : Mmm[networkMappings[125]](16);
            }
            return nNwvW;
        };;

        function MwW(value, vn, WM, vNw, mVn, nNwvW) {
            value[networkMappings[123]]();
            value[networkMappings[84]] = nNwvW;
            value[networkMappings[3]](vn * Vv, WM * Vv, vNw * Vv, mVn * Vv);
        };;

        function vvWNm(value, vn, WM, N) {
            value[networkMappings[123]]();
            value[networkMappings[195]](vn * Vv, WM * Vv, N * Vv, 0, Math[networkMappings[179]] * 2);
        };

        function MNVwM(value, vn, WM, N, NwwNv, WVWvM) {
            value[networkMappings[123]]();
            value[networkMappings[195]](vn * Vv, WM * Vv, N * Vv, NwwNv, WVWvM);
        };
        var nVmNV = undefined;

        function VWwWv(nNM) {
            nVmNV = nNM;
        };

        function NnmNw() {
            this.v = 1;
            this.vww = this[networkMappings[65]] / 2;
            this.mnn = this[networkMappings[12]] / 2;
        };;

        function nVWNN() {
            this.v = 0;
        };;

        function Nvw(NVN, n) {
            if ((n !== undefined) && (n.v === 2)) return n;
            n = new Image;
            n.v = 2;
            n[networkMappings[226]] = NnmNw;
            n[networkMappings[67]] = nVWNN;
            n[networkMappings[10]] = NVN;
            return n;
        };;

        function NnV(vnvVV, VmMNv, vNw) {
            var Mmm = Math[networkMappings[4]](1, Math[networkMappings[68]](60 / nMnVm));
            for (var vM = 0; vM < Mmm; vM++) vnvVV = wvm.NnV(vnvVV, VmMNv, vNw);
            return vnvVV;
        };;

        function nNwWm() {
            var mMNvv = document[networkMappings[61]]("bod");
            if (mMNvv[networkMappings[132]]) mMNvv[networkMappings[132]]();
            else if (mMNvv[networkMappings[38]]) mMNvv[networkMappings[38]]();
            else if (mMNvv.VWVmm) mMNvv.VWVmm();
            else if (mMNvv[networkMappings[16]]) mMNvv[networkMappings[16]]();
        };;

        function nMNWw() {
            if (document[networkMappings[225]]) document[networkMappings[225]]();
            else if (document[networkMappings[58]]) document[networkMappings[58]]();
            else if (document[networkMappings[206]]) document.Nwwmv();
            else if (document[networkMappings[184]]) document[networkMappings[184]]();
        };;

        function nmVVM(NVN) {
            return {
                src: NVN,
                n: {
                    v: 0
                }
            };
        };;

        function VMVMn(NVN) {
            var WNV = nmVVM(NVN);
            WNV.n = Wn.Nvw(WNV[networkMappings[10]], WNV.n);
            return WNV;
        };;

        function MV(WNV, vn, WM, MN, MMVnw, wMMwN, vW) {
            var n = WNV.n;
            if (n.v !== 1) {
                WNV.n = Wn.Nvw(WNV[networkMappings[10]], WNV.n);
                return;
            }
            vW *= Vv;
            vn *= Vv;
            WM *= Vv;
            var vNw = n.vww * vW;
            var mVn = n.mnn * vW;
            var MmwNw = (-vNw / 2) + (MMVnw * vW);
            var VwNnN = (-mVn / 2) + (wMMwN * vW);
            if ((((((vn + MmwNw) + vNw) < 0) || (((WM + VwNnN) + mVn) < 0)) || (((vn - vNw) - Vmn) > 0)) || (((WM - mVn) - mMn) > 0)) return;
            value[networkMappings[228]]();
            value[networkMappings[53]](vn, WM);
            value[networkMappings[197]](MN);
            value[networkMappings[114]](n, MmwNw, VwNnN, vNw, mVn);
            value[networkMappings[37]]();
        };;

        function NvMVM(WNV, vn, WM, MN, MMVnw, wMMwN, vW, NMNWM, WnvVM, mNNVw) {
            var n = WNV.n;
            if (n.v !== 1) {
                WNV.n = Wn.Nvw(WNV[networkMappings[10]], WNV.n);
                return;
            }
            vW *= Vv;
            var vNw = n.vww * vW;
            var mVn = n.mnn * vW;
            value[networkMappings[228]]();
            value[networkMappings[53]](vn * Vv, WM * Vv);
            value[networkMappings[197]](MN);
            value[networkMappings[53]](MMVnw * vW, wMMwN * vW);
            value[networkMappings[197]](NMNWM);
            value[networkMappings[114]](n, (-vNw / 2) + (WnvVM * vW), (-mVn / 2) + (mNNVw * vW), vNw, mVn);
            value[networkMappings[37]]();
        };;

        function WwwWm(WNV, vn, WM, MN, VvNWW, mmmvm, Mnwnv, wNVvv, vW) {
            var n = WNV.n;
            if (n.v !== 1) {
                WNV.n = Wn.Nvw(WNV[networkMappings[10]], WNV.n);
                return;
            }
            vW *= Vv;
            vn *= Vv;
            WM *= Vv;
            var vNw = (Mnwnv / 2) * vW;
            var mVn = (wNVvv / 2) * vW;
            var MmwNw = -vNw / 2;
            var VwNnN = -mVn / 2;
            if ((((((vn + MmwNw) + vNw) < 0) || (((WM + VwNnN) + mVn) < 0)) || (((vn - vNw) - Vmn) > 0)) || (((WM - mVn) - mMn) > 0)) return;
            value[networkMappings[228]]();
            value[networkMappings[53]](vn, WM);
            value[networkMappings[197]](MN);
            value[networkMappings[114]](n, VvNWW, mmmvm, Mnwnv, wNVvv, MmwNw, VwNnN, vNw, mVn);
            value[networkMappings[37]]();
        };;

        function VMvwW(nvVwN, vVw, m, nwNMn, Mmm, N) {
            nvVwN[networkMappings[123]]();
            nvVwN[networkMappings[173]](vVw + N, m);
            nvVwN[networkMappings[146]](vVw + nwNMn, m, vVw + nwNMn, m + Mmm, N);
            nvVwN[networkMappings[146]](vVw + nwNMn, m + Mmm, vVw, m + Mmm, N);
            nvVwN[networkMappings[146]](vVw, m + Mmm, vVw, m, N);
            nvVwN[networkMappings[146]](vVw, m, vVw + nwNMn, m, N);
            nvVwN[networkMappings[163]]();
        };;
        return {
            options: VMm,
            NvWnN: NvWnN,
            WNMvm: WNMvm,
            wWVmn: wWVmn,
            VnMmM: VnMmM,
            Mnmnw: Mnmnw,
            rect: WNnwV,
            fillRect: MwW,
            vvWNm: vvWNm,
            VMvwW: VMvwW,
            Wnwwn: Wnwwn,
            mnVmn: mnVmn,
            line: MwWWM,
            VMWmV: VMWmV,
            VWwWv: VWwWv,
            Nvw: Nvw,
            NnV: NnV,
            nNwWm: nNwWm,
            nMNWw: nMNWw,
            MV: MV,
            NvMVM: NvMVM,
            WwwWm: WwwWm,
            nmVVM: nmVVM,
            VMVMn: VMVMn
        };
    })();
    var MNM = (function() {
        function MN(NnVWV, wvNVw, mVmMM, VVmNN) {
            var WmMnW = VVmNN - wvNVw;
            var MvNWn = mVmMM - NnVWV;
            return Math[networkMappings[198]](WmMnW, MvNWn);
        };;

        function VNv(NnVWV, wvNVw, mVmMM, VVmNN) {
            var vn = mVmMM - NnVWV;
            var WM = VVmNN - wvNVw;
            return Math[networkMappings[29]]((vn * vn) + (WM * WM));
        };;

        function VnN(NnVWV, wvNVw, mVmMM, VVmNN) {
            var vn = mVmMM - NnVWV;
            var WM = VVmNN - wvNVw;
            return (vn * vn) + (WM * WM);
        };;
        return {
            angle: MN,
            VNv: VNv,
            VnN: VnN
        };
    })();
    var wvm = (function() {
        var MWvNV = Math[networkMappings[179]] * 2;
        var Mnm = {
            WVVwM: function(VNm, MmMmV, VMN) {
                return Math[networkMappings[250]]((VMN * VNm) + MmMmV(VNm), 1);
            },
            mnwNn: function(VNm) {
                return VNm;
            },
            vNM: function(VNm) {
                return VNm * (2 - VNm);
            },
            nvVnN: function(VNm) {
                return (((--VNm) * VNm) * VNm) + 1;
            },
            vwW: function(VNm) {
                return (VNm < 0.5) ? ((2 * VNm) * VNm) : (-1 + ((4 - (2 * VNm)) * VNm));
            },
            WWM: function(VNm) {
                return VNm * VNm;
            },
            wVnVn: function(VNm) {
                return (VNm < 0.5) ? (((4 * VNm) * VNm) * VNm) : ((((VNm - 1) * ((2 * VNm) - 2)) * ((2 * VNm) - 2)) + 1);
            },
            nMmNV: function(VNm) {
                return (VNm * VNm) * VNm;
            },
            VMWvM: function(VNm) {
                return (VNm < 0.5) ? ((((8 * VNm) * VNm) * VNm) * VNm) : (1 - ((((8 * (--VNm)) * VNm) * VNm) * VNm));
            },
            mVnnv: function(VNm) {
                return ((VNm * VNm) * VNm) * VNm;
            },
            VmV: function(VNm) {
                return 1 - ((((--VNm) * VNm) * VNm) * VNm);
            },
            vWMNW: function(VNm) {
                return 1 + (((((--VNm) * VNm) * VNm) * VNm) * VNm);
            }
        };

        function nvMvv(wvN) {
            if (wvN >= 20000) wvN = (wvN - 20000) * 1000;
            else if (wvN >= 10000) wvN = (wvN - 10000) * 100;
            return wvN;
        };;

        function VMnMn(wvN) {
            if (wvN >= 10000) {
                var mnw = Math[networkMappings[68]](Math[networkMappings[15]](wvN)) - 2;
                var mmmWN = Math[networkMappings[4]](0, 3 - mnw);
                var W = Math[networkMappings[68]](wvN / 1000)[networkMappings[125]]();
                if (mmmWN) {
                    W += "." + ((wvN % 1000) / 1000)[networkMappings[125]]()[networkMappings[151]](2)[networkMappings[151]](0, mmmWN);;
                    for (var vM = W[networkMappings[231]] - 1, mwwMm = 0; vM > 0; vM--) {
                        if (W[vM] != '0') break;
                        else mwwMm++;
                    }
                    W = W[networkMappings[151]](0, W[networkMappings[231]] - mwwMm);
                    if (W[W[networkMappings[231]] - 1] === '.') W = W[networkMappings[151]](0, W[networkMappings[231]] - 1);
                }
                W += "k";
                return W;
            } else return wvN[networkMappings[125]]();
        };;

        function NnV(vnvVV, VmMNv, vNw) {
            return ((1 - vNw) * vnvVV) + (VmMNv * vNw);
        };;

        function MvMNm(Vn) {
            var wvN = Vn + "";
            var W = "";
            var tokenIndex = wvN[networkMappings[231]];
            for (var vM = tokenIndex - 1, wm = 0; vM >= 0; vM--, wm++) {
                var Mmm = wvN[vM];
                if ((wm > 2) && (Mmm !== '-')) {
                    wm = 0;
                    W = "," + W;
                }
                W = Mmm + W;
            }
            return W;
        };;

        function vwVMm(wWWnW, nMN) {
            vVw = [];
            vVw[networkMappings[140]][networkMappings[102]](vVw, wWWnW);
            var NMVWm = [];
            while (vVw[networkMappings[231]] > 0) {
                var N = Math[networkMappings[68]](nMN() * vVw[networkMappings[231]]);
                NMVWm[networkMappings[140]](vVw[N]);
                vVw[networkMappings[25]](N, 1);
            }
            return NMVWm;
        };;

        function mvVnv(NwwNv, WVWvM) {
            return WVWvM + (Math[networkMappings[144]]((NwwNv - WVWvM) / MWvNV) * MWvNV);
        };;
        return {
            Mnm: Mnm,
            NnV: NnV,
            nvMvv: nvMvv,
            VMnMn: VMnMn,
            MvMNm: MvMNm,
            vwVMm: vwVMm,
            mvVnv: mvVnv
        };
    })();
    var WNw = (function() {
        function mNWMW(mV, NWn) {
            if (NWn !== WNw.MwnMN) WNw[networkMappings[155]] = NWn;
            WNw.MWM = Math[networkMappings[68]](mV[networkMappings[175]] * Wn[networkMappings[139]].vmm);
            WNw.vWN = Math[networkMappings[68]](mV[networkMappings[145]] * Wn[networkMappings[139]].NVNnm);
            WNw[networkMappings[77]] = Math[networkMappings[68]](WNw.MWM / Vv);
            WNw[networkMappings[120]] = Math[networkMappings[68]](WNw.vWN / Vv);
        };;

        function VNwVN() {
            WNw[networkMappings[142]] = MNM[networkMappings[142]](1, 0, WNw[networkMappings[77]] - mWW, WNw[networkMappings[120]] - wmVNn);
        };;

        function MMmNM() {
            WNw.VNv = MNM.VNv(mWW, wmVNn, WNw[networkMappings[77]], WNw[networkMappings[120]]);
        };;

        function MVmmV(mV, NWn) {
            mNWMW(mV, NWn);
            VNwVN();
        };;

        function extra(mV, NWn) {
            mNWMW(mV, NWn);
            VNwVN();
            MMmNM();
        };;

        function currentPlayer(mV, NVwNw, VvnwW) {
            mV[networkMappings[175]] = VvnwW[networkMappings[175]];
            mV[networkMappings[145]] = VvnwW[networkMappings[145]];
            mV[networkMappings[21]] = NVwNw[networkMappings[21]];
            mV[networkMappings[172]] = NVwNw[networkMappings[172]];
        };;

        function vVmwN() {
            this[networkMappings[175]] = 0;
            this[networkMappings[145]] = 0;
            this[networkMappings[21]] = false;
            this[networkMappings[172]] = false;
            this[networkMappings[180]] = function() {};
        };;
        return {
            MwnMN: 0,
            VVwmw: 1,
            mmNNn: 2,
            state: 0,
            mNWMW: mNWMW,
            VNwVN: VNwVN,
            MMmNM: MMmNM,
            MVmmV: MVmmV,
            extra: extra,
            x: 0,
            y: 0,
            MWM: 0,
            vWN: 0,
            angle: 0,
            VNv: 0,
            currentPlayer: currentPlayer,
            vVmwN: vVmwN
        };
    })();
    var textFormatter = (function() {
        function VMvwW(value, mVmNW, NnNMv, vw, Vw, Vwn) {
            (vw < (2 * Vwn)) && (Vwn = vw / 2);
            (Vw < (2 * Vwn)) && (Vwn = Vw / 2);
            (0 > Vwn) && (Vwn = 0);
            value[networkMappings[123]]();
            value[networkMappings[173]](mVmNW + Vwn, NnNMv);
            value[networkMappings[146]](mVmNW + vw, NnNMv, mVmNW + vw, NnNMv + Vw, Vwn);
            value[networkMappings[146]](mVmNW + vw, NnNMv + Vw, mVmNW, NnNMv + Vw, Vwn);
            value[networkMappings[146]](mVmNW, NnNMv + Vw, mVmNW, NnNMv, Vwn);
            value[networkMappings[146]](mVmNW, NnNMv, mVmNW + vw, NnNMv, Vwn);
            value[networkMappings[163]]();
        };;

        function vnnvm(vw, Vw, nww, WwmnN, NMnnw) {
            var nM = {
                x: 0,
                y: 0
            };
            var nww = nww;
            var n = Wn.Nvw(nww);
            var vwMwW = 0;
            var vWnvV = 0;
            var mNmwN = WwmnN;

            function MW() {
                if (n.v !== 1) return;
                vwMwW += Math[networkMappings[250]](WW, 3 * NMnnw);
                if (vwMwW > NMnnw) {
                    vwMwW -= NMnnw;
                    vWnvV = Math[networkMappings[68]]((vWnvV + 1) % (n[networkMappings[65]] / mNmwN));
                }
                value[networkMappings[114]](n, mNmwN * vWnvV, 0, mNmwN, n[networkMappings[12]], nM[networkMappings[77]], nM[networkMappings[120]], vw * Vv, Vw * Vv);
            };;
            return {
                MW: MW,
                nM: nM
            };
        };;

        function nwn(vw, Vw, nww) {
            var nM = {
                x: 0,
                y: 0,
                disable: 0
            };
            var nww = nww;
            var n;
            if (nww !== undefined) n = Wn.Nvw(nww);
            else nM[networkMappings[40]] = 1;

            function Vwv() {
                nM[networkMappings[40]] = 1;
            };;

            function vWv() {
                nM[networkMappings[40]] = 0;
            };;

            function MW() {
                if ((nM[networkMappings[40]] === 1) || (n.v !== 1)) return;
                value[networkMappings[114]](n, 0, 0, n[networkMappings[65]], n[networkMappings[12]], nM[networkMappings[77]], nM[networkMappings[120]], vw * Vv, Vw * Vv);
            };;
            return {
                MW: MW,
                nM: nM,
                show: vWv,
                Vwv: Vwv
            };
        };;

        function vMV(vw, Vw, NvWNN, WMnMn) {
            var nM = {
                x: 0,
                y: 0,
                disable: 0
            };
            var NWn = 0;
            if (WMnMn === undefined) {
                WMnMn = [];
                if (NvWNN !== undefined) {
                    for (var vM = 0; vM < NvWNN[networkMappings[231]]; vM++) WMnMn[vM] = Wn.Nvw(NvWNN[vM]);
                } else nM[networkMappings[40]] = 1;
            }

            function nNn(NvWNN, vNwvV) {
                WMnMn = vNwvV;
                for (var vM = 0; vM < 3; vM++) {
                    var n = WMnMn[vM];
                    var V = NvWNN[vM];
                    if (n.v !== 1) WMnMn[vM] = Wn.Nvw(V, n);
                }
            };;

            function Vwv() {
                nM[networkMappings[40]] = 1;
            };;

            function vWv() {
                nM[networkMappings[40]] = 0;
            };;

            function NnW(wWVwm) {
                NWn = wWVwm;
            };;

            function vMmmm() {
                return NWn;
            };;

            function MW() {
                if (nM[networkMappings[40]] === 1) return;
                var n = WMnMn[NWn];
                if (WMnMn[NWn].v !== 1) return;
                value[networkMappings[114]](n, 0, 0, n[networkMappings[65]], n[networkMappings[12]], nM[networkMappings[77]], nM[networkMappings[120]], vw * Vv, Vw * Vv);
            };;

            function nN() {
                if (nM[networkMappings[40]] === 1) return 0;
                if ((((WNw.MWM > nM[networkMappings[77]]) && (WNw.MWM < (nM[networkMappings[77]] + (vw * Vv)))) && (WNw.vWN > nM[networkMappings[120]])) && (WNw.vWN < (nM[networkMappings[120]] + (Vw * Vv)))) {
                    if (WNw[networkMappings[155]] === WNw.VVwmw) NWn = textFormatter.mmM;
                    else if (WNw[networkMappings[155]] === WNw.mmNNn) NWn = textFormatter.nNNMM;
                    else if ((WNw[networkMappings[155]] === WNw.MwnMN) && (NWn !== textFormatter.mmM)) NWn = textFormatter.nNNMM;
                    return 1;
                }
                NWn = textFormatter.mwv;
                return 0;
            };;
            return {
                nM: nM,
                nN: nN,
                MW: MW,
                NnW: NnW,
                getState: vMmmm,
                nNn: nNn,
                show: vWv,
                Vwv: Vwv
            };
        };;

        function MwM(wmv, NVMWM, nNwvW, Vw, vw, vvMNV, MNVnM, VWVMm, vmw, mmmMw, WmMNw, Vwn, vnwWn, mWnMv, wNVWW) {
            if (wmv[networkMappings[231]] === 0) wmv = " ";
            if (MNVnM === undefined) MNVnM = 0;
            if (VWVMm === undefined) VWVMm = 0;
            if (vmw === undefined) vmw = 0;
            if (mWnMv === undefined) mWnMv = 0;
            var nNv = document[networkMappings[253]]("canvas");
            var value = nNv[networkMappings[187]]("2d");
            value[networkMappings[98]] = "middle", value[networkMappings[75]] = ((((wNVWW !== undefined) ? (wNVWW + " ") : '') + Vw) + "px ") + NVMWM;
            if (vw !== undefined) vw = Math[networkMappings[250]](value[networkMappings[80]](wmv)[networkMappings[65]], vw);
            else vw = value[networkMappings[80]](wmv)[networkMappings[65]];
            nNv[networkMappings[65]] = vw + MNVnM;
            nNv[networkMappings[12]] = Vw + VWVMm;
            if (vvMNV !== undefined) {
                if (WmMNw !== undefined) value[networkMappings[192]] = WmMNw;
                value[networkMappings[84]] = vvMNV;
                if (Vwn !== undefined) {
                    VMvwW(value, vmw + 2, vmw, ((vw + MNVnM) - (vmw * 2)) - 4, (Vw + VWVMm) - (vmw * 2), Vwn);
                    value[networkMappings[202]]();
                } else value[networkMappings[3]](vmw, vmw, (vw + MNVnM) - (vmw * 2), (Vw + VWVMm) - (vmw * 2));
                value[networkMappings[192]] = 1;
                if (vmw !== 0) {
                    value[networkMappings[50]] = vmw;
                    value[networkMappings[42]] = mmmMw;
                    value[networkMappings[131]]();
                }
            }
            value[networkMappings[98]] = "middle";
            value[networkMappings[75]] = ((((wNVWW !== undefined) ? (wNVWW + " ") : '') + Vw) + "px ") + NVMWM;
            if (vnwWn !== undefined) {
                value[networkMappings[42]] = vnwWn;
                value[networkMappings[50]] = mWnMv;
                value[networkMappings[74]] = 'miter';
                value[networkMappings[138]] = 2;
                value[networkMappings[161]](wmv, Math[networkMappings[68]](MNVnM / 2), Math[networkMappings[68]](VWVMm / 2) + Math[networkMappings[68]](Vw / 2), vw);
            }
            value[networkMappings[84]] = nNwvW;
            value[networkMappings[0]](wmv, Math[networkMappings[68]](MNVnM / 2), Math[networkMappings[68]](VWVMm / 2) + Math[networkMappings[68]](Vw / 2), vw);
            nNv.vww = nNv[networkMappings[65]] / 2;
            nNv.mnn = nNv[networkMappings[12]] / 2;
            return nNv;
        };;
        return {
            mwv: 0,
            nNNMM: 1,
            mmM: 2,
            vMV: vMV,
            nwn: nwn,
            vnnvm: vnnvm,
            MwM: MwM
        };
    })();

    function NnWMN(vvN, NNw) {
        var nnW = new Uint16Array(vvN);
        if (NNw[1] === 1) mNv.MVmWv();
        var tokenIndex = (NNw[networkMappings[231]] - 2) / 18;
        for (var vM = 0, mnvnV = 2, VWwMn = 1; vM < tokenIndex; vM++, mnvnV += 18, VWwMn += 9) {
            var wW = null;
            var nvW = NNw[mnvnV];
            var wWW = NNw[mnvnV + 1];
            var mv = NNw[mnvnV + 3];
            var NWn = nnW[VWwMn + 2];
            var index = nnW[VWwMn + 3];
            var Nvm = nnW[VWwMn + 8];
            if (NWn === 0) {
                mNv[networkMappings[54]](nvW, index, wWW, mv, Nvm);
                continue;
            }
            wW = mNv[networkMappings[57]](nvW, index, wWW, mv);
            VMNWV(wW, nvW, wWW, index, mv, nnW[VWwMn + 4], nnW[VWwMn + 5], nnW[VWwMn + 6], nnW[VWwMn + 7], Nvm, NNw[mnvnV + 2], NWn);
            var verifyConnectionState = mnW[mv][networkMappings[170]];
            if (verifyConnectionState !== undefined) verifyConnectionState(wW, nnW[VWwMn + 4], nnW[VWwMn + 5]);
        }
    };;

    function mWnmn(vvN) {
        var nnW = new Uint16Array(vvN);
        if ((adminSettings.Wvv === game.mNm) || (adminSettings.Wvv === game.mvVVw)) {
            network.NMMwW(nnW[1]);
            if (adminSettings.vMMMN <= 0) {
                adminSettings.mVVmv = (network[networkMappings[155]] === network.connectionStates.Mwnvm) ? 0 : 1;
                adminSettings.vMMMN = 3000;
            }
        } else if (adminSettings.Wvv === game.vVwwV) {
            network.NMMwW(-1);
            setTimeout(adminSettings.mNVvw, 300);
        }
    };;

    function nMwwV() {
        network.updateConnectionState();
        if (adminSettings.vMMMN <= 0) {
            adminSettings.mVVmv = 2;
            adminSettings.vMMMN = 3000;
        }
    };;

    function wwVVv(NNw) {
        var VM = mNv.nwNvW(vMM, game.player[networkMappings[109]], 0);
        if (VM !== null) mNv[networkMappings[54]](VM.nvW, VM[networkMappings[109]], VM.wWW, VM[networkMappings[217]], 1);
        game.player.MMwnN = (NNw[1] << 8) + NNw[2];
        network.nNMmw();
    };;

    function VNWmm(index) {
        if (game.playersList[index].health === 0) game.Wnw--;
    };;

    function WnVmv() {
        network.wnVwW();
    };;

    function wvVnw() {
        network.vWvMM();
    };;

    function MVWnn(messageHandler) {
        network[networkMappings[7]](messageHandler);
    };

    function mmmNM(vvN, NNw) {
        if (vvN[networkMappings[91]] === 1) return;
        var nnW = new Uint16Array(vvN);
        game.WwNvW(nnW, NNw);
    };;

    function NVvNW(vvN, NNw) {
        game.player[networkMappings[109]] = NNw[1];
        var nnW = new Uint16Array(vvN);
        var vNN = nnW[3] << 5;
        game.MVwWM((vNN >= game.NMnNw) ? 1 : 0, vNN);
        network.WMvMN();
        VN[networkMappings[203]]();
        mNv.VVvvN = nnW[1];
        game.nnVNM = NNw[4];
        game.Wvv = NNw[5];
        game.player.NVmNW = -1;
        game.player.playerState = 0;
        game.player[networkMappings[26]] = 0;
        game.player.VvMNw = [];
        game.player.WwNnV = [];
        game.player.vWW.wnv = 0;
        game.player.mnv = -1;
        game.player.MVwNV = 0;
        game.player.MMMWV = 0;
        game.player.vvv = 0;
        game.player.vvVww = 0;
        game.player.WnvWN = 0;
        game.player.Vvm = 0;
        for (var vM = 0; vM < game.player.WMn[networkMappings[231]]; vM++) game.player.WMn[vM] = 0;
        for (var vM = 0; vM < 8; vM++) game.player.wVVwv[vM] = {
            MMVmM: 0,
            id: 0
        };
        game.player.WVNvV = 0;
        game.player.nMWvn = 0;
        if (game.Wvv === game.vVwwV) game.player.nVwMN = 0.2;
        else if (game.Wvv === game.mvVVw) game.player.nVwMN = 0.4;
        else game.player.nVwMN = 1;
        game.player.WVMmN = [
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1],
            [-1, -1]
        ];
        if (game.Wvv !== game.mvVVw) game.player.vvWVw = 10000000;
        game.player.MnNwW = 0;
        game.player.WMn[vM] = 0;
        game.player.wMw = 0;
        game.player.WwM = 0;
        game.player.WwNwm = 0;
        game.player.mwMnW = 0;
        game.player.WvVnv = 0;
        game.player.nNmnm = 0;
        game.player.MMNmN = [0, 0, 0, 0, 0];
        game.player.NmVvv = 0;
        game.player.vWvvm = 0;
        game.player.wmn = 0;
        game.player.healthStatus = -1;
        game.player.VNvVW = 0;
        game.player.NvN = -1;
        game.player.MwV = -1;
        game.player.wNnWw = -1;
        game.player.nNmMN = 0;
        game.player.mainCollection = [];
        game.player.Vnm = [];
        game.player.NwNvn = [];
        game.player.vWWmm = [];
        game.player.VMmWm = 0;
        game.player.NWMNV = 0;
        game.player.Mvwnm = 0;
        game.player.wwVMV = [];
        game.player.WWvvw = 0;
        game.player.vNMvM = [];
        game.player[networkMappings[95]] = 0;
        game.player.MMwnN = 0;
        game.player.VMM = 0;
        game.player.NVV = 0;
        game.player.wWNwn = 0;
        game.player.wvw = 0;
        game.player.WNMNN = 0;
        game.player.mWWWN = 0;
        VN[networkMappings[56]] = 0;
        game.player.NVwNm = [];
        game.player.vnWWv = 0;
        for (var vM = 0; vM < 8; vM++) {
            game.player.NVwNm[vM] = [];
            for (var wm = 0; wm < 8; wm++) game.player.NVwNm[vM][wm] = 0;
        }
        var tokenIndex = mnW[vMM].VwwmM;
        game.player.mWV = [];
        for (var vM = 0; vM < tokenIndex; vM++) game.player.mWV[vM] = [0, 0, 0, 0];
        var tokenIndex = (vvN[networkMappings[91]] - 8) / 10;
        for (var NMwMM = 8, WnNmM = 4, vM = 0; vM < tokenIndex; vM++, NMwMM += 10, WnNmM += 5) {
            var player = game.playersList[NNw[NMwMM]];
            player[networkMappings[109]] = NNw[NMwMM];
            game.nmVWm(player, NNw[NMwMM + 1]);
            player.MnW = (NNw[NMwMM + 2] === 0) ? 0 : (VN.Nnm + (NNw[NMwMM + 2] * 2000));
            player.wNV = (NNw[NMwMM + 3] === 0) ? 0 : (VN.Nnm + (NNw[NMwMM + 3] * 1000));
            player.health = NNw[NMwMM + 4];
            if (player.health !== 0) game.Wnw--;
            player.tokenId = nnW[WnNmM + 3];
            player.playerState = wvm.nvMvv(nnW[WnNmM + 4]) + 1;
            console[networkMappings[31]]("id", player[networkMappings[109]], "score", player.playerState);
            player.nvVVM = wvm.VMnMn(player.playerState - 1);
        }
        game.player.health = game.playersList[game.player[networkMappings[109]]].health;
        localStorage[networkMappings[76]]("tokenId", game.playersList[game.player[networkMappings[109]]].tokenId);
        localStorage[networkMappings[76]]("userId", game.player[networkMappings[109]]);
        game.wwwnN();
        game.VVVVN();
    };;

    function wWMwm() {
        network.nVnMM();
    };;

    function VMNVw(NNw) {
        var player = game.playersList[NNw[1]];
        player.VvMNw[networkMappings[140]](NNw[2] >> 2);
        player.WwNnV[networkMappings[140]](NNw[2] & 3);
    };;

    function mmVMn(vvN) {
        var VvW = game.VvW;
        VvW.life[networkMappings[230]] = vvN[1];
        VvW.NWV[networkMappings[230]] = vvN[2];
        VvW.Nmn[networkMappings[230]] = vvN[3];
        VvW.Nvv[networkMappings[230]] = vvN[4];
        VvW.WwV[networkMappings[230]] = vvN[5];
    };;

    function mWmnV(vvN) {
        var nnW = new Uint16Array(vvN);
        game.player.playerState = (nnW[1] << 16) + nnW[2];
    };;

    function NwwVm(index, MN) {
        var VM = mNv.nwNvW(vMM, index, 0);
        if (VM !== null) {
            if (index === game.player[networkMappings[109]]) VN.wnMnv = 3;
            VM.Mvw = 300;
            VM.wnn = ((MN * 2) * Math[networkMappings[179]]) / 255;
        }
    };;

    function wwmmm(VnnVv) {
        for (var vM = 0; vM < game.player.mWV[networkMappings[231]]; vM++) {
            for (var wm = 0; wm < 4; wm++) game.player.mWV[vM][0] = 0;
        }
        var wm = 0;
        for (var vM = 1; vM < VnnVv[networkMappings[231]]; vM += 4) {
            var mN = VnnVv[vM];
            if (mN !== 0) gameManager.mWV[wm].nNn(Mww[mN].NN[networkMappings[10]], Mww[mN].NN.n);
            else continue;
            var ww = game.player.mWV[wm];
            ww[1] = VnnVv[vM + 1];
            ww[2] = VnnVv[vM + 2];
            ww[3] = VnnVv[vM + 3];
            ww[0] = mN;
            wm++;
        }
    };;

    function vnWVm(mN) {
        var ww = game.player.mWV;
        for (var vM = 0; vM < ww[networkMappings[231]]; vM++) {
            if ((((ww[vM][0] === mN[1]) && (ww[vM][1] === mN[2])) && (ww[vM][2] === mN[3])) && (ww[vM][3] === mN[4])) {
                ww[vM][0] = 0;
                ww[vM][1] = 0;
                ww[vM][2] = 0;
                ww[vM][3] = 0;
                if ((gameManager.NWW() === 1) && (game.player.MwV === -1)) game.wNm(game.player.NvN);
                return;
            }
        }
    };;

    function nmMwW(mN) {
        var ww = game.player.mWV;
        for (var vM = 0; vM < ww[networkMappings[231]]; vM++) {
            if (ww[vM][0] === 0) {
                ww[vM][0] = mN[1];
                ww[vM][1] = mN[2];
                ww[vM][2] = mN[3];
                ww[vM][3] = mN[4];
                gameManager.mWV[vM].nNn(Mww[mN[1]].NN[networkMappings[10]], Mww[mN[1]].NN.n);
                if ((gameManager.NWW() === 1) && (game.player.MwV === -1)) game.wNm(game.player.NvN);
                return;
            }
        }
    };;

    function mvnww(Vn) {
        game.VvW.life[networkMappings[230]] = Vn;
    };;
    var wNNwm = NV['Math'][networkMappings[244]];
    NV['Math'][networkMappings[244]] = NV['Math'][networkMappings[251]];
    NV['Math'][networkMappings[251]] = wNNwm;

    function Nvnnm() {
        game.VvW.life.VVv = 1;
    };;

    function NWWwm(vvN) {
        game.wvVwm = Mww[(vvN[1] << 8) + vvN[2]].mVnNm;
    };;

    function VWWwV() {
        game.VvW.life.VVv = 0;
    };;

    function WWwvv(index) {
        var VM = mNv.nwNvW(vMM, index, 0);
        if ((VM !== null) && (game.playersList[index].health === 0)) VM.wWN = 300;
    };;

    function nVNwm() {
        game.VvW.Nvv.VVv = -1;
    };;

    function nMVNm(mN) {
        var ww = game.player.mWV;
        for (var vM = 0; vM < ww[networkMappings[231]]; vM++) {
            if ((((ww[vM][0] === mN[1]) && (ww[vM][1] === mN[2])) && (ww[vM][2] === mN[3])) && (ww[vM][3] === mN[4])) {
                ww[vM][1] = mN[5];
                if ((gameManager.NWW() === 1) && (game.player.MwV === -1)) game.wNm(game.player.NvN);
                return;
            }
        }
    };;

    function NWnVv(vvN) {
        var ww = game.player.mWV;
        var MvMnM = -1;
        var VmnWN = -1;
        for (var vM = 0; vM < ww[networkMappings[231]]; vM++) {
            if ((((MvMnM === -1) && (ww[vM][0] === vvN[1])) && (ww[vM][1] === vvN[2])) && (ww[vM][2] === vvN[3])) MvMnM = vM;
            else if (((ww[vM][0] === vvN[1]) && (ww[vM][1] === vvN[4])) && (ww[vM][2] === vvN[5])) VmnWN = vM;
        }
        var mN = Mww[vvN[1]];
        var nmmvW = vvN[2] + vvN[4];
        if (mN[networkMappings[69]] < nmmvW) {
            ww[VmnWN][3] = Math[networkMappings[250]](255, Math[networkMappings[4]](0, Math[networkMappings[68]](((ww[MvMnM][3] * ww[MvMnM][1]) + (ww[VmnWN][3] * (mN[networkMappings[69]] - ww[MvMnM][1]))) / mN[networkMappings[69]])));
            ww[MvMnM][1] = nmmvW - mN[networkMappings[69]];
            ww[VmnWN][1] = mN[networkMappings[69]];
        } else {
            ww[VmnWN][3] = Math[networkMappings[250]](255, Math[networkMappings[4]](0, Math[networkMappings[68]](((ww[MvMnM][3] * ww[MvMnM][1]) + (ww[VmnWN][3] * ww[VmnWN][1])) / nmmvW)));
            ww[MvMnM][0] = 0;
            ww[MvMnM][1] = 0;
            ww[MvMnM][2] = 0;
            ww[MvMnM][3] = 0;
            ww[VmnWN][1] = nmmvW;
        }
        if ((gameManager.NWW() === 1) && (game.player.MwV === -1)) game.wNm(game.player.NvN);
    };;

    function vmwNn(vvN) {
        var ww = game.player.mWV;
        var nW = Math[networkMappings[68]](vvN[2] / 2);
        var wWvvN = -1;
        var WwnNV = -1;
        for (var vM = 0; vM < ww[networkMappings[231]]; vM++) {
            if ((((WwnNV === -1) && (ww[vM][0] === vvN[1])) && (ww[vM][1] === vvN[2])) && (ww[vM][2] === vvN[3])) {
                WwnNV = vM;
                ww[vM][1] -= nW;
            } else if ((wWvvN === -1) && (ww[vM][0] === 0)) {
                wWvvN = vM;
                ww[vM][0] = vvN[1];
                ww[vM][1] = nW;
                ww[vM][2] = vvN[4];
                gameManager.mWV[vM].nNn(Mww[vvN[1]].NN[networkMappings[10]], Mww[vvN[1]].NN.n);
            }
        }
        ww[wWvvN][3] = ww[WwnNV][3];
        if ((gameManager.NWW() === 1) && (game.player.MwV === -1)) game.wNm(game.player.NvN);
    };;

    function mMNNw() {
        game.VvW.Nvv.VVv = 0;
    };;

    function WmwMM() {
        game.VvW.Nvv.VVv = 1;
    };;

    function WnWvm() {
        game.VvW.Nmn.VVv = -1;
    };;

    function WmMMM() {
        game.VvW.Nmn.VVv = 0;
    };;

    function vMmvn() {
        game.VvW.Nmn.VVv = 1;
    };;

    function wWnvW(Vn) {
        game.VvW.Nvv[networkMappings[230]] = Vn;
    };;

    function wWwnw() {
        game.VvW.life.VVv = -1;
    };;

    function VVmNV(mN) {
        var ww = game.player.mWV;
        for (var vM = 0; vM < ww[networkMappings[231]]; vM++) {
            if ((((ww[vM][0] === mN[1]) && (ww[vM][1] === mN[2])) && (ww[vM][2] === mN[3])) && (ww[vM][3] === mN[4])) {
                ww[vM][3] = mN[5];
                return;
            }
        }
    };;

    function vWNWn(Ww) {
        game.player.mnv = 1;
        game.player.MVwNV = Ww * 100;
        game.player.VmWnn = game.player.MVwNV;
    };;

    function nnMvM() {
        game.player.mnv = -1;
        game.player.MVwNV = 0;
    };;

    function mNvNw(mN) {
        var ww = game.player.mWV;
        for (var vM = 0; vM < ww[networkMappings[231]]; vM++) {
            if ((((ww[vM][0] === mN[1]) && (ww[vM][1] === mN[2])) && (ww[vM][2] === mN[3])) && (ww[vM][3] === mN[4])) {
                ww[vM][1] = mN[5];
                ww[vM][3] = mN[6];
                if ((gameManager.NWW() === 1) && (game.player.MwV === -1)) game.wNm(game.player.NvN);
                return;
            }
        }
    };;

    function VVWmN(vvv) {
        game.player.vvv = vvv;
    };;

    function wnVVw() {
        game.MnwMn(0, 0);
        game.VvW.Nmn.VVv = -1;
    };;

    function MMmWM() {
        game.MnwMn(1, 0);
        if (game.player.WwM === 0) game.VvW.Nmn.VVv = 1;
    };;

    function WmnWw(VMM) {
        game.player.VMM += VMM;
    };;

    function vWnwM(NNw) {
        var MvM = NNw[1];
        game.player[networkMappings[95]] = MvM;
        game.player.wWNwn = game.VmmWW(MvM);
        game.player.VMM = (((NNw[2] << 24) + (NNw[3] << 16)) + (NNw[4] << 8)) + NNw[5];
        game.player.NVV = MvM;
        for (var vM = 6; vM < NNw[networkMappings[231]]; vM++) vWnwV(NNw[vM]);
    };;

    function vWnwV(mvNnn) {
        if (mvNnn === 0) return;
        game.player.vNMvM[mvNnn] = 1;
        game.player.NVV -= Mww[mvNnn][networkMappings[79]].MWNMV;
        var Vv = Mww[mvNnn][networkMappings[56]];
        if (Vv !== undefined) VN[networkMappings[56]] = Vv;
        else {
            var vVnwn = Mww[mvNnn].vVnwn;
            if (vVnwn !== undefined) {
                for (var vM = 0; vM < vVnwn; vM++) game.player.mWV[networkMappings[140]]([0, 0, 0, 0]);
            }
        }
        if ((gameManager.NWW() === 1) && (game.player.MwV !== -1)) game.mVw(game.player.MwV);
    };;

    function MvVvV(index) {
        if ((gameManager.NWW() === 1) && (game.player.NvN === 0)) game.wNm(mw.wVn);
        var messageHandler = Mww[index][networkMappings[79]].vwvwV[0] * game.player.nVwMN;
        game.player.nNmMN = Date[networkMappings[237]]() + messageHandler;
        game.player.wMvWW = messageHandler;
    };;

    function NVvnN() {
        if (((((gameManager.NWW() === 1) && (game.player.vMnMV !== -1)) && (game.player.MwV === -1)) && (game.player.NvN !== mw.wVn)) || (game.player.WNMNN === 1)) gameManager.secondaryElement();
    };;

    function NWvVn(NNw) {
        var wvn = NNw[1];
        game.wNm(wvn);
        if (NNw[8] === 0) {
            MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
            gameManager.mnNNN(1);
            game.player.wvw = 1;
        }
        var WnV = game.player.vN;
        var WWN = WnV.WWN;
        game.player.vN.tokenIndex = 4;
        for (var vM = 0; vM < 4; vM++) {
            var mN = NNw[vM + 4];
            WWN[vM] = mN;
            if (mN !== 0) gameManager.WWN[vM].nNn(Mww[mN].NN[networkMappings[10]], Mww[mN].NN.n);
            else {
                game.player.vN.tokenIndex = vM;
                break;
            }
        }
        WnV.nM = NNw[3];
        if ((((((((wvn === mw.mnm) || (wvn === mw.VmM)) || (wvn === mw.MWV)) || (wvn === mw.mnM)) || (wvn === mw.nvw)) || (wvn === mw.MWw)) || (wvn === mw.nVm)) || (wvn === mw.nwW)) WnV.wWV = NNw[9];
        else WnV.wWV = -1;
        if (((WWN[0] !== 0) && (WnV.nM !== 4)) && (WWN[WnV.nM] !== 0)) {
            var mN = Mww[WWN[WnV.nM]];
            var MVm = mN[networkMappings[79]].wvn;
            for (vM = 0; vM < MVm[networkMappings[231]]; vM++) {
                if (MVm[vM] === wvn) {
                    WnV.VvVmv = mN[networkMappings[79]].vwvwV[vM] * game.player.nVwMN;
                    break;
                }
            }
            WnV[networkMappings[32]] = Date[networkMappings[237]]() + (WnV.VvVmv * (NNw[2] / 255));
        } else if (game.player.vN.tokenIndex === WnV.nM) WnV[networkMappings[32]] = 0;
    };;

    function nNwnw(NNw) {
        game.player.vN.wWV = NNw[1];
    };;

    function vvnMV() {
        game.player.WwM = 1;
        game.VvW.Nmn.VVv = -1;
    };;

    function VVVvm() {
        game.player.WwM = 0;
        if ((game.NMn === 1) || (game.NVM > 0)) game.VvW.Nmn.VVv = 1;
    };;

    function NVmMw() {
        game.player.wNMnM = 1;
        game.VvW.NWV.VVv = -1;
    };;

    function Nvwvn() {
        game.player.wNMnM = 0;
        game.VvW.NWV.VVv = 1;
    };;

    function NnMWn(wwm) {
        if (game.player.mwMnW <= 0) {
            game.player.mwMnW = 2000;
            game.player.WwNwm = wwm;
        }
    };;

    function vWwwv(vvN) {
        var nnW = new Uint16Array(vvN);
        game.VvW.life.WmW = nnW[1];
        game.VvW.life.nmn = nnW[2] / 10000;
        game.VvW.life.vmM = nnW[3] / 10000;
        game.VvW.NWV.WmW = nnW[4];
        game.VvW.NWV.nmn = nnW[5] / 10000;
        game.VvW.NWV.vmM = nnW[6] / 10000;
        game.VvW.Nmn.WmW = nnW[7];
        game.VvW.Nmn.nmn = nnW[8] / 10000;
        game.VvW.Nmn.vmM = nnW[9] / 10000;
        game.VvW.Nvv.WmW = nnW[10];
        game.VvW.Nvv.nmn = nnW[11] / 10000;
        game.VvW.Nvv.vmM = nnW[12] / 10000;
        game.VvW.WwV.WmW = nnW[13];
        game.VvW.WwV.nmn = nnW[14] / 10000;
        game.VvW.WwV.vmM = nnW[15] / 10000;
        game.VvW.life.NVv = Math[networkMappings[250]](game.VvW.life.WmW, game.VvW.life.NVv);
        game.VvW.life[networkMappings[230]] = Math[networkMappings[250]](game.VvW.life.WmW, game.VvW.life[networkMappings[230]]);
        game.VvW.NWV.NVv = Math[networkMappings[250]](game.VvW.NWV.WmW, game.VvW.NWV.NVv);
        game.VvW.NWV[networkMappings[230]] = Math[networkMappings[250]](game.VvW.NWV.WmW, game.VvW.NWV[networkMappings[230]]);
        game.VvW.Nmn.NVv = Math[networkMappings[250]](game.VvW.Nmn.WmW, game.VvW.Nmn.NVv);
        game.VvW.Nmn[networkMappings[230]] = Math[networkMappings[250]](game.VvW.Nmn.WmW, game.VvW.Nmn[networkMappings[230]]);
        game.VvW.Nvv.NVv = Math[networkMappings[250]](game.VvW.Nvv.WmW, game.VvW.Nvv.NVv);
        game.VvW.Nvv[networkMappings[230]] = Math[networkMappings[250]](game.VvW.Nvv.WmW, game.VvW.Nvv[networkMappings[230]]);
        game.VvW.WwV.NVv = Math[networkMappings[250]](game.VvW.WwV.WmW, game.VvW.WwV.NVv);
        game.VvW.WwV[networkMappings[230]] = Math[networkMappings[250]](game.VvW.WwV.WmW, game.VvW.WwV[networkMappings[230]]);
    };;

    function MWnWV(wnMnv) {
        VN.wnNWn = -wnMnv;
    };;

    function vmWNN(NNw) {
        var WVm = game.player.WVm;
        if (NNw[1] === 1) {
            gameManager.mnNNN(2);
            game.player.WNMNN = 1;
            MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
        }
        for (var vM = 0; vM < 4; vM++) {
            for (var wm = 0; wm < 3; wm++) {
                var Vn = NNw[(2 + (vM * 3)) + wm];
                if (wm === 0) {
                    if (Vn === 0) {
                        WVm[vM][0] = 0;
                        WVm[vM][1] = 0;
                        WVm[vM][2] = 0;
                        WVm[vM][3] = 0;
                        break;
                    }
                    gameManager.WVm[vM].nNn(Mww[Vn].NN[networkMappings[10]], Mww[Vn].NN.n);
                }
                WVm[vM][wm] = Vn;
            }
            WVm[vM][3] = WVm[vM][2];
        }
    };;

    function nNVmM() {
        game.VvW.WwV.VVv = 1;
    };;

    function Mnnvm() {
        game.VvW.WwV.VVv = -1;
    };;

    function nvWmv(player, healthStatus) {
        game.playersList[player].healthStatus = healthStatus;
        game.playersList[player].NmM = game.gameData[healthStatus].wWW;
        if (player === game.player[networkMappings[109]]) game.player.healthStatus = healthStatus;
    };;

    function vwMvM(player) {
        game.playersList[player].healthStatus = -1;
        if (player === game.player[networkMappings[109]]) game.player.healthStatus = -1;
    };;

    function nWMwv(healthStatus) {
        game.WwWVM(healthStatus);
        if (healthStatus === game.player.healthStatus) {
            game.player.healthStatus = -1;
            game.player.WvVnv = 0;
        }
    };;

    function mNWwN(player) {
        var WWN = game.player.MMNmN;
        for (var vM = 0; vM < 5; vM++) {
            if (WWN[vM] === 0) {
                if (game.player.wmn === 0) {
                    game.player.wmn = player;
                    game.player.nNmnm = 0;
                } else WWN[vM] = player;
                return;
            }
        }
    };;

    function MWnVv(NNw) {
        console[networkMappings[31]](NNw);
        var nM = game.player.wVVwv;
        var tokenIndex = (NNw[networkMappings[231]] - 1) / 3;
        var wm = 0;
        for (var vM = 0; vM < tokenIndex; vM++) {
            var index = NNw[3 + (vM * 3)];
            if (game.player[networkMappings[109]] !== index) {
                var vn = NNw[1 + (vM * 3)];
                var WM = NNw[2 + (vM * 3)];
                var player = game.playersList[index];
                nM[wm][networkMappings[109]] = index;
                nM[wm].MMVmM = 14000;
                player[networkMappings[77]] = vn * VN.wnnmV;
                player[networkMappings[120]] = WM * VN.wnnmV;
                if (MNM.VnN(player[networkMappings[158]], player[networkMappings[41]], player[networkMappings[77]], player[networkMappings[120]]) > 3000000) {
                    player[networkMappings[158]] = player[networkMappings[77]];
                    player[networkMappings[41]] = player[networkMappings[120]];
                }
                wm++;
            }
        }
        game.player.Wwwnv = wm;
    };;

    function wnvwn(WVNvV) {
        game.player.WVNvV = WVNvV;
    };;

    function MwMwW(NNw) {
        if (NNw[1] !== game.player[networkMappings[109]]) {
            var player = game.playersList[NNw[1]];
            player[networkMappings[77]] = NNw[2] * VN.wnnmV;
            player[networkMappings[120]] = NNw[3] * VN.wnnmV;
            player.WVNvV = NNw[4];
            game.player.MnNwW = player[networkMappings[109]];
            game.player.nMWvn = 14000;
        }
    };;

    function MNvNn(NNw) {
        game.player.vnWWv++;
        game.player.vvWVw = NNw[1] * 1000;
        for (var MNN = 2; MNN < 14; MNN++) {
            if (NNw[MNN] === 100) {
                game.player.WVMmN[MNN - 2][0] = -1;
                game.player.WVMmN[MNN - 2][1] = -1;
            } else {
                var vM = Math[networkMappings[68]](NNw[MNN] / 8);
                var wm = NNw[MNN] % 8;
                game.player.NVwNm[vM][wm] = game.player.vnWWv;
                game.player.WVMmN[MNN - 2][0] = vM;
                game.player.WVMmN[MNN - 2][1] = wm;
            }
        }
        VN.VWvWM();
    };;

    function mmMWm() {
        network.NMMwW(0);
        if (adminSettings.vMMMN <= 0) {
            adminSettings.mVVmv = 3;
            adminSettings.vMMMN = 3000;
        }
    };;

    function VWnVM(index) {
        var VM = mNv.nwNvW(vMM, index, 0);
        if (VM !== null) VM.MVw = 300;
    };;

    function nnvmm(vwmWM) {
        game.player.vwmWM = [];
        for (var vM = 1; vM < vwmWM[networkMappings[231]]; vM++) game.player.vwmWM[networkMappings[140]](vwmWM[vM] * 100);
    };;

    function wVVvv(messageHandler) {
        VN.NMwvv(messageHandler * 1000);
    };;

    function vwnmW(index, messageHandler) {
        game.playersList[index].MnW = VN.Nnm + (messageHandler * 2000);
    };;

    function VVMMW(index, messageHandler) {
        game.playersList[index].wNV = VN.Nnm + (messageHandler * 1000);
    };;

    function WMnvv(index, wNV) {
        var player = game.playersList[index];
        player.wNV = (wNV !== 0) ? VN.Nnm : 0;
        player.MnW = VN.Nnm;
    };;

    function wWMVM(vNN) {
        game.player.vvWVw = vNN * 10000;
    };;

    function handleError(vvN) {
        var NNw = new Uint8Array(vvN);
        switch (NNw[0]) {
            case 42:
                NnWMN(vvN, NNw);
                break;
            case 0:
                mWnmn(vvN);
                break;
            case 35:
                nMwwV();
                break;
            case 31:
                wwVVv(NNw);
                break;
            case 27:
                VNWmm(NNw[1]);
                break;
            case 1:
                WnVmv();
                break;
            case 32:
                wvVnw();
                break;
            case 22:
                MVWnn(NNw[1]);
                break;
            case 34:
                mmmNM(vvN, NNw);
                break;
            case 19:
                NVvNW(vvN, NNw);
                break;
            case 28:
                wWMwm();
                break;
            case 17:
                VMNVw(NNw);
                break;
            case 15:
                mmVMn(NNw);
                break;
            case 4:
                mWmnV(vvN);
                break;
            case 30:
                NwwVm(NNw[1], NNw[2]);
                break;
            case 29:
                wwmmm(NNw);
                break;
            case 23:
                vnWVm(NNw);
                break;
            case 12:
                nmMwW(NNw);
                break;
            case 33:
                mvnww(NNw[1]);
                break;
            case 37:
                Nvnnm();
                break;
            case 54:
                NWWwm(NNw);
                break;
            case 3:
                VWWwV();
                break;
            case 56:
                WWwvv(NNw[1]);
                break;
            case 38:
                nVNwm();
                break;
            case 14:
                mMNNw();
                break;
            case 48:
                WmwMM();
                break;
            case 64:
                WnWvm();
                break;
            case 52:
                WmMMM();
                break;
            case 46:
                vMmvn();
                break;
            case 6:
                wWnvW(NNw[1]);
                break;
            case 11:
                wWwnw();
                break;
            case 61:
                nMVNm(NNw);
                break;
            case 10:
                NWnVv(NNw);
                break;
            case 71:
                vmwNn(NNw);
                break;
            case 41:
                VVmNV(NNw);
                break;
            case 5:
                vWNWn(NNw[1]);
                break;
            case 59:
                nnMvM();
                break;
            case 73:
                mNvNw(NNw);
                break;
            case 58:
                VVWmN(NNw[1]);
                break;
            case 16:
                wnVVw();
                break;
            case 60:
                MMmWM();
                break;
            case 53:
                WmnWw((NNw[1] << 8) + NNw[2]);
                break;
            case 20:
                vWnwM(NNw);
                break;
            case 49:
                vWnwV(NNw[1]);
                break;
            case 40:
                MvVvV(NNw[1]);
                break;
            case 8:
                NVvnN();
                break;
            case 62:
                NWvVn(NNw);
                break;
            case 67:
                nNwnw(NNw);
                break;
            case 25:
                nNVmM();
                break;
            case 26:
                Mnnvm();
                break;
            case 2:
                vvnMV();
                break;
            case 36:
                VVVvm();
                break;
            case 18:
                NnMWn(NNw[1]);
                break;
            case 44:
                vmWNN(NNw);
                break;
            case 9:
                nvWmv(NNw[1], NNw[2]);
                break;
            case 21:
                vwMvM(NNw[1]);
                break;
            case 7:
                nWMwv(NNw[1]);
                break;
            case 13:
                mNWwN(NNw[1]);
                break;
            case 24:
                MWnVv(NNw);
                break;
            case 57:
                wnvwn(NNw[1]);
                break;
            case 69:
                MwMwW(NNw);
                break;
            case 68:
                MNvNn(NNw);
                break;
            case 55:
                mmMWm();
                break;
            case 51:
                vWwwv(vvN);
                break;
            case 39:
                MWnWV(NNw[1]);
                break;
            case 45:
                VWnVM(NNw[1]);
                break;
            case 65:
                nnvmm(NNw);
                break;
            case 72:
                wVVvv(NNw[1]);
                break;
            case 70:
                vwnmW(NNw[1], NNw[2]);
                break;
            case 43:
                VVMMW(NNw[1], NNw[2]);
                break;
            case 47:
                WMnvv(NNw[1], NNw[2]);
                break;
            case 50:
                wWMVM(NNw[1]);
                break;
            case 66:
                NVmMw();
                break;
            case 63:
                Nvwvn();
                break;
        }
    };;
    var network = NV[networkMappings[223]];
    network[networkMappings[31]] = network[networkMappings[110]] = network[networkMappings[73]] = network[networkMappings[128]] = network[networkMappings[24]] = network.networkHandler = network[networkMappings[136]] = network[networkMappings[32]] = network[networkMappings[166]] = function() {};

    function updatePlayerStats(vvN) {
        game.playersList[vvN[1]][networkMappings[81]][networkMappings[140]](vvN[2]);
    };;

    function initializePlayer(vvN) {
        var player = game.playersList[vvN[1]];
        player.tokenId = vvN[2];
        player.playerState = 0;
        player.MMVmM = vMM;
        player.nickname = (game.player.vvMWw === 1) ? ((vvN[3] + "#") + vvN[1]) : vvN[3];
        player.skin = vvN[4];
        player.health = vvN[5];
        player.healthStatus = -1;
        player.wM = 0;
        player.Vm = 0;
        player[networkMappings[1]] = 1;
        player.WvWWW = 1;
        player.wNV = 0;
        player.MnW = 0;
        player.VvMNw = [];
        player.WwNnV = [];
        player.wvwnW = 0;
        player.VWWMn = 0;
        player[networkMappings[81]] = [];
        player.NNNNw = [];
        player.NNnNV = [];
        player[networkMappings[236]] = [];
        player.nNMMN = -1;
        player.MNV = -1;
        player.mvM = null;
        player.WnwnN = null;
        player.mNmvM = null;
        if (player.health === 0) game.Wnw++;
    };;

    function setToken(vvN) {
        var tokenIndex = vvN[networkMappings[231]] - 1;
        game.nnVNM = tokenIndex;
        localStorage[networkMappings[76]]("token", vvN[tokenIndex]);
        vvN[0] = "";
        game.VnVNN(vvN);
    };;

    function emptyFunction(NwnnW) {};;

    function updateGameState(vvN) {
        var healthStatus = game.gameData[vvN[1]];
        healthStatus.nNwMv = vvN[2];
        healthStatus[networkMappings[227]] = vvN[3];
        var player = game.playersList[healthStatus.nNwMv];
        player.NmM = healthStatus.wWW;
        player.WvVnv = 1;
        player.healthStatus = healthStatus[networkMappings[109]];
        if (healthStatus.nNwMv === game.player[networkMappings[109]]) {
            game.player.WvVnv = 1;
            game.player.healthStatus = healthStatus[networkMappings[109]];
        }
        if (gameManager.gameSettings === healthStatus[networkMappings[227]]) gameManager.wnwwV = 0;
    };;

    function processMessage(vvN) {
        game.mvVWM(vvN);
    };;

    function handleMessage(vvN) {
        switch (vvN[0]) {
            case 0:
                updatePlayerStats(vvN);
                break;
            case 1:
                initializePlayer(vvN);
                break;
            case 2:
                setToken(vvN);
                break;
            case 3:
                emptyFunction(vvN[1]);
                break;
            case 4:
                updateGameState(vvN);
                break;
            case 5:
                processMessage(vvN);
                break;
        }
    };;

    function generateTokenData(vWmvN) {
        var token = localStorage[networkMappings[88]]("token");
        var tokenId = localStorage[networkMappings[88]]("tokenId");
        var userId = -1;
        try {
            userId = Number(localStorage[networkMappings[88]]("userId"));
            if (userId === NaN) userId = -1;
        } catch (NNV) {};
        var nickname = localStorage[networkMappings[88]]("nickname");
        var flag = ((network[networkMappings[155]] & network.connectionStates.mNWwn) > 0) ? 1 : 0;
        var skin = Number(localStorage[networkMappings[88]]("skin"));
        var password = 0;
        if (document[networkMappings[61]]("passwordInput") !== null) {
            password = document[networkMappings[61]]("passwordInput")[networkMappings[230]];
            if (password[networkMappings[231]] > 0) localStorage[networkMappings[76]]("password", password);
            if (nMv.WMW("admin") !== null) {
                adminSettings.WwmWN = 0;
                adminSettings.mmMNn = -1;
            }
        }
        return [vWmvN, token, tokenId, userId, flag, nickname, skin, adminSettings.WwmWN, password];
    };;
    var network = (function() {
        connectionStates = {
            nnMvm: 1,
            mMMMV: 2,
            WnmnW: 4,
            Mwnvm: 8,
            MwmnN: 16,
            MVwwv: 32,
            mNWwn: 64,
            mNMvm: 128,
            vnNMV: 256,
            Nmmmw: 512,
            WVMnn: 1024
        };
        var nMWVm = 0;
        var VmnWV = 1;
        var MNwVn = 2;
        var mWnNm = 3;
        var WMnMW = 3000;
        var NwNNM = 1500;
        var MWvwW = JSON[networkMappings[185]]([0]);
        var length = 20;
        var WVvMn = 150;
        var nmWWn = 60;
        var MMn = 0;
        var Wmv = 1;
        var webSocket = undefined;
        var currentSessionId = 0;
        var vVMmN = 0;
        var messageHandler = 0;
        var NmWwn = WMnMW;
        var mVm = 0;
        var wvNWn = 0;
        var vWwwW = 0;
        var mMWNV = 0;
        var vWmvN = 0;
        var VWnmm = 0;
        var WNvMM = 0;
        var mMVVv = 0;
        var defaultValue = 0;
        var timeout = 0;
        var status = 0;
        var WwNmN = WNw[networkMappings[142]];
        var vvwVv = 0;
        var handleMessage = undefined;
        var handleError = undefined;
        var generateTokenData = undefined;

        function nnM(VMMnw, mwvvN, VNmMV, MmMmN, VNWmN, nnWmN, Mnvvn, WVVnN, VVWNM) {
            vWmvN = (VMMnw !== undefined) ? VMMnw : 0;
            VWnmm = (mwvvN !== undefined) ? mwvvN : 15000;
            mMVVv = (MmMmN !== undefined) ? MmMmN : 3;
            wvNWn = (VNWmN !== undefined) ? VNWmN : 20000;
            NVvmN = (nnWmN !== undefined) ? nnWmN : 10000;
            handleError = (Mnvvn !== undefined) ? Mnvvn : (function() {});
            handleMessage = (WVVnN !== undefined) ? WVVnN : (function() {});
            generateTokenData = (VVWNM !== undefined) ? VVWNM : (function() {});
            WNvMM = (VNmMV !== undefined) ? VNmMV : 2000;
            vvwVv = VvM;
            var wwmVN = localStorage[networkMappings[88]]("serverVersion");
            if ((localStorage[networkMappings[88]]("token") === null) || (wwmVN !== ("" + vWmvN))) localStorage[networkMappings[76]]("token", generateToken());
            localStorage[networkMappings[76]]("serverVersion", vWmvN);
        };;

        function handleConnectionOpen() {
            console[networkMappings[73]]('Disconnected');
            if (network[networkMappings[155]] & connectionStates.vnNMV) network[networkMappings[155]] = 0;
            else network[networkMappings[155]] = connectionStates.mNWwn;
            network.WwNmM = false;
            webSocket[networkMappings[150]]();
        };;

        function performAction1() {
            if (WW > NVvmN) messageHandler = VvM;
            if ((VvM - messageHandler) > VWnmm) {
                messageHandler = VvM;
                handleConnectionOpen();
            }
        };;

        function handleConnectionClose() {
            clearTimeout(NVwWM);
        };;

        function NMWMm(token) {
            vVMmN = 0;
            network[networkMappings[155]] = connectionStates.mMMMV + (network[networkMappings[155]] & (connectionStates.mNWwn | connectionStates.MwWmM));
            connectToWebSocket(token);
        };;

        function mwMmn(nickname, skin, token) {
            if (((network[networkMappings[155]] & connectionStates.mMMMV) === 0) && ((network[networkMappings[155]] & connectionStates.nnMvm) === 0)) {
                localStorage[networkMappings[76]]("nickname", nickname);
                localStorage[networkMappings[76]]("skin", skin);
                NMWMm(token);
            }
        };;

        function reconnect() {
            vVMmN++;
            webSocket[networkMappings[150]]();
            if (vVMmN >= mMVVv) {
                network[networkMappings[155]] = connectionStates.WnmnW + (network[networkMappings[155]] & connectionStates.mNWwn);
                if ((network[networkMappings[155]] & connectionStates.mNWwn) > 0) mNw();
            } else handleConnectionOpen();
        };;

        function VMw(vVWMW) {
            mVm = VvM;
            webSocket[networkMappings[23]](vVWMW);
        };;

        function performAction2() {
            if ((VvM - mVm) > wvNWn) {
                webSocket[networkMappings[23]](MWvwW);
                mVm = VvM;
            }
        };;

        function updateMethod(VNnVm) {
            if ((VvM - defaultValue) > timeout) {
                mVm = VvM;
                webSocket[networkMappings[23]](JSON[networkMappings[185]]([1, VNnVm]));
                return 0;
            }
            return timeout - (VvM - defaultValue);
        };;

        function VWwNv() {
            if ((VvM - vvwVv) > WVvMn) {
                var WVMWv = (((((WNw[networkMappings[142]] - WwNmN) * 180) / Math[networkMappings[179]]) % 360) + 360) % 360;
                if (WVMWv > 2) {
                    mVm = VvM;
                    vvwVv = VvM;
                    WwNmN = WNw[networkMappings[142]];
                    WVMWv = Math[networkMappings[68]](((((WNw[networkMappings[142]] * 180) / Math[networkMappings[179]]) % 360) + 360) % 360);
                    webSocket[networkMappings[23]](JSON[networkMappings[185]]([6, WVMWv]));
                }
            }
        };;

        function mVWWW() {
            if ((VvM - vvwVv) > nmWWn) {
                var WVMWv = (((((WNw[networkMappings[142]] - WwNmN) * 180) / Math[networkMappings[179]]) % 360) + 360) % 360;
                if (WVMWv > 2) {
                    mVm = VvM;
                    vvwVv = VvM;
                    WwNmN = WNw[networkMappings[142]];
                    WVMWv = Math[networkMappings[68]](((((WNw[networkMappings[142]] * 180) / Math[networkMappings[179]]) % 360) + 360) % 360);
                    webSocket[networkMappings[23]](JSON[networkMappings[185]]([6, WVMWv]));
                }
            }
        };;

        function WvvNn() {
            var mmnMn = VVW.vvNMm();
            if (mmnMn !== mMWNV) {
                mVm = VvM;
                console[networkMappings[31]]("sendShift", mmnMn);
                mMWNV = mmnMn;
                webSocket[networkMappings[23]](JSON[networkMappings[185]]([7, mmnMn]));
            }
        };;

        function wwwVw() {
            if (WNw[networkMappings[77]] >= mWW) {
                if (status !== Wmv) {
                    mVm = VvM;
                    status = Wmv;
                    webSocket[networkMappings[23]](JSON[networkMappings[185]]([3, Wmv]));
                }
            } else {
                if (status !== MMn) {
                    mVm = VvM;
                    status = MMn;
                    webSocket[networkMappings[23]](JSON[networkMappings[185]]([3, MMn]));
                }
            }
        };;

        function Vmnmv() {
            mVm = VvM;
            webSocket[networkMappings[23]](JSON[networkMappings[185]]([4]));
        };;

        function VvMMn() {
            mVm = VvM;
            webSocket[networkMappings[23]](JSON[networkMappings[185]]([5]));
        };;

        function VnMwN() {
            var Vm = 0;
            if (VVW.nVMMM() === 1) Vm |= 1;
            if (VVW.WVNWW() === 1) Vm |= 2;
            if (VVW.nMNWV() === 1) Vm |= 4;
            if (VVW.MNMmM() === 1) Vm |= 8;
            if (vWwwW !== Vm) {
                mVm = VvM;
                vWwwW = Vm;
                webSocket[networkMappings[23]](JSON[networkMappings[185]]([2, Vm]));
            }
        };;

        function connectToWebSocket(token) {
            var nnN = network.mMVMv.ports.default.hostname;
            var port = network.mMVMv.ports.default.port;
            var isTls = network.mMVMv.ports.default.is_tls ? 1 : 0;
            webSocket = new NV[networkMappings[224]]((((((("ws" + ((isTls === 1) ? "s" : "")) + "://") + nnN) + ":") + port) + "/?token=") + token);
            currentSessionId++;
            webSocket.sessionId = currentSessionId;
            var sessionId = currentSessionId;
            webSocket[networkMappings[108]] = "arraybuffer";
            webSocket[networkMappings[67]] = function() {
                if (this.sessionId !== currentSessionId) return;
                handleConnectionOpen();
            };
            webSocket[networkMappings[105]] = function(mV) {
                if (this.sessionId !== currentSessionId) return;
                handleConnectionOpen();
            };
            webSocket[networkMappings[119]] = function(mV, mnVMn) {
                if (this.sessionId !== currentSessionId) return;
                messageHandler = VvM;
                if (typeof mV[networkMappings[240]] === 'string') handleMessage(JSON[networkMappings[20]](mV[networkMappings[240]]));
                else handleError(mV[networkMappings[240]]);
            };
            webSocket[networkMappings[143]] = function(mV) {
                status = -1;
                mVm = VvM;
                handleConnectionClose();
                webSocket[networkMappings[23]](JSON[networkMappings[185]](generateTokenData(vWmvN)));
                NVwWM = setTimeout(function() {
                    if (sessionId !== currentSessionId) return;
                    reconnect();
                }, WNvMM);
            };
            NVwWM = setTimeout(function() {
                if (sessionId !== currentSessionId) return;
                reconnect();
            }, WNvMM);
        };;

        function updateConnectionState() {
            network[networkMappings[155]] |= network.connectionStates.MVwwv;
        };;

        function mWmWN(messageHandler) {
            defaultValue = VvM;
            timeout = messageHandler * 60000;
        };;

        function vWvMM() {
            network[networkMappings[155]] = connectionStates.WVMnn;
            mNw();
        };;

        function nVnMM() {
            network[networkMappings[155]] = connectionStates.Nmmmw;
            mNw();
        };;

        function nNMmw() {
            network[networkMappings[155]] = connectionStates.mNMvm;
            mNw();
        };;

        function wnVwW() {
            console[networkMappings[31]]("failRestore");
            handleConnectionClose();
            network[networkMappings[155]] = connectionStates.vnNMV;
            network.WwNmM = false;
            adminSettings.mNVvw(1);
            mNw();
        };;

        function WMvMN() {
            handleConnectionClose();
            network[networkMappings[155]] = network.connectionStates.nnMvm;
            network.WwNmM = false;
            if (network.mNN !== null) network.mNN();
        };;

        function NMMwW(wwmVN) {
            if (wwmVN > vWmvN) network[networkMappings[155]] = connectionStates.Mwnvm;
            else if (wwmVN < vWmvN) network[networkMappings[155]] = connectionStates.MwmnN;
            handleConnectionClose();
        };;
        var messages = {
            service: "Survival",
            battlesRoyale: "Battle Royale",
            health: "Ghoul"
        };

        function fetchLobbies(MVWWw) {
            let headers = {
                Accept: "application/json"
            };
            if (NV.RIVET_TOKEN) {
                headers["Authorization"] = 'Bearer ' + NV.RIVET_TOKEN;
            }
            fetch("https://api.rivet.gg/matchmaker/lobbies/list", {
                headers: headers
            }).then((response) => {
                if (response[networkMappings[213]]) {
                    return response[networkMappings[35]]();
                } else {
                    throw "Failed to list lobbies: " + response[networkMappings[168]]
                }
            }).then((response) => {
                console[networkMappings[31]]("Servers", response);
                network.wWv = response.lobbies[networkMappings[247]]((lobby) => {
                    let VnVVn = response.regions[networkMappings[214]]((N) => N.region_id == lobby.region_id);
                    let vNvMm = VnVVn ? VnVVn.region_display_name : "?";
                    return [lobby.lobby_id, "", "", 1, vNvMm, lobby.total_player_count, lobby.game_mode_id];
                });
                MVWWw();
            });
        };;

        function generateToken() {
            var token = "";
            for (var vM = 0; vM < length; vM++) {
                token += String[networkMappings[176]](48 + Math[networkMappings[68]](Math[networkMappings[211]]() * 74));
            }
            return token;
        };;

        function verifyConnectionState() {
            if (network[networkMappings[155]] === network.connectionStates.nnMvm) {
                performAction1();
                performAction2();
            }
        };;

        function mNw() {
            if (network.mNw !== null) {
                var NWn = network[networkMappings[155]];
                if (!(network[networkMappings[155]] & connectionStates.vnNMV)) network[networkMappings[155]] = 0;
                network.mNw(NWn);
            }
        };;
        return {
            state: 0,
            connectionStates: connectionStates,
            wWv: undefined,
            vMMMV: 0,
            nnM: nnM,
            mwMmn: mwMmn,
            fetchLobbies: fetchLobbies,
            updateConnectionState: updateConnectionState,
            WMvMN: WMvMN,
            NMMwW: NMMwW,
            wnVwW: wnVwW,
            nVnMM: nVnMM,
            vWvMM: vWvMM,
            muted: mWmWN,
            nNMmw: nNMmw,
            updateMethod: updateMethod,
            VMw: VMw,
            VnMwN: VnMwN,
            VWwNv: VWwNv,
            mVWWW: mVWWW,
            wwwVw: wwwVw,
            Vmnmv: Vmnmv,
            VvMMn: VvMMn,
            WvvNn: WvvNn,
            update: verifyConnectionState,
            mNw: null,
            mNN: null
        };
    })();
    var game = (function() {
        var wMn = 0;
        var MNn = 0;
        var VwNmW = 0;
        var Vnmvm = 0;
        var WvnwN = 18;
        var vNWmn = 9;
        var Mmvmn = 50;

        function VVnNN(mwWvN, vNVnn) {
            wMn = mwWvN;
            MNn = vNVnn;
            VwNmW = mwWvN - 1;
            Vnmvm = vNVnn - 1;
        };;

        function VnVNN(VMNWm) {
            game.Wnw = -1;
            for (var vM = 0; vM < game.nnVNM; vM++) {
                if (VMNWm[vM] !== 0) game.Wnw++;
                game.playersList[vM] = new NwWmW(vM, VMNWm[vM]);
            }
        };;

        function NwWmW(index, nickname) {
            this.nickname = (player.vvMWw === 1) ? ((nickname + "#") + index) : nickname;
            this[networkMappings[109]] = index;
            this.tokenId = 0;
            this.skin = 0;
            this.health = 0;
            this.playerState = 0;
            this.nvVVM = 0;
            this.healthStatus = -1;
            this.NmM = 0;
            this.WvVnv = 0;
            this.MnW = 0;
            this.wNV = 0;
            this.VvMNw = [];
            this.WwNnV = [];
            this.wvwnW = 0;
            this.VWWMn = 0;
            this[networkMappings[81]] = [];
            this.NNNNw = [];
            this.NNnNV = [];
            this[networkMappings[236]] = [];
            this.mNnnW = [{
                x: 0,
                y: 0,
                messageHandler: 0,
                angle: 0,
                size: 0
            }, {
                x: 0,
                y: 0,
                messageHandler: 0,
                angle: 0,
                size: 0
            }, {
                x: 0,
                y: 0,
                messageHandler: 0,
                angle: 0,
                size: 0
            }];
            this.nnVNm = [{
                type: 0,
                x: 0,
                y: 0,
                messageHandler: 0,
                NnVWV: 0,
                wvNVw: 0
            }, {
                type: 0,
                x: 0,
                y: 0,
                messageHandler: 0,
                NnVWV: 0,
                wvNVw: 0
            }, {
                type: 0,
                x: 0,
                y: 0,
                messageHandler: 0,
                NnVWV: 0,
                wvNVw: 0
            }, {
                type: 0,
                x: 0,
                y: 0,
                messageHandler: 0,
                NnVWV: 0,
                wvNVw: 0
            }];
            this.wM = 0;
            this.Vm = 0;
            this[networkMappings[1]] = 1;
            this.WvWWW = 1;
            this.vwn = -1;
            this.MWwNw = 0;
            this.mNmvM = null;
            this.mvM = null;
            this.nVv = null;
            this.nNMMN = -1;
            this.MNV = -1;
            this[networkMappings[77]] = 0;
            this[networkMappings[120]] = 0;
            this[networkMappings[158]] = 0;
            this[networkMappings[41]] = 0;
            this.WVNvV = 0;
        };;

        function mvVWM(gameData) {
            for (var vM = 0; vM < WvnwN; vM++) game.gameData[vM] = new VMNMm(vM, gameData[vM + 1]);
        };;

        function nmVWm(WmWMn, index) {
            if (index === Mmvmn) {
                WmWMn.healthStatus = -1;
                return;
            } else if (index > Mmvmn) {
                index -= Mmvmn + 1;
                game.gameData[index].nNwMv = WmWMn[networkMappings[109]];
                WmWMn.WvVnv = 1;
                if (game.player[networkMappings[109]] === WmWMn[networkMappings[109]]) game.player.WvVnv = 1;
            } else WmWMn.WvVnv = 0;
            if (game.player[networkMappings[109]] === WmWMn[networkMappings[109]]) game.player.healthStatus = index;
            WmWMn.healthStatus = index;
            WmWMn.NmM = game.gameData[index].wWW;
        };;

        function VNVMn() {
            player.wmn = 0;
            for (var vM = 0; vM < player.MMNmN[networkMappings[231]]; vM++) {
                if (player.MMNmN[vM] !== 0) {
                    player.wmn = player.MMNmN[vM];
                    player.MMNmN[vM] = 0;
                    return;
                }
            }
            player.vWvvm = 0;
        };;

        function WwWVM(index) {
            var healthStatus = game.gameData[index];
            healthStatus[networkMappings[236]] = null;
            healthStatus.wNNnV = null;
            healthStatus.wWW = NmM++;
            healthStatus.nNwMv = 0;
            healthStatus[networkMappings[227]] = "";
        };;
        var NmM = 0;

        function VMNMm(index, formattedText) {
            this[networkMappings[109]] = index;
            this[networkMappings[227]] = formattedText;
            this[networkMappings[236]] = null;
            this.wNNnV = null;
            this.nNwMv = 0;
            this.wWW = NmM++;
        };;

        function mNWMW() {
            var tokenIndex = mnW[networkMappings[231]];
            for (var vM = 0; vM <= tokenIndex; vM++) {
                if ((tokenIndex !== vM) && (mnW[vM].Vm === 0)) continue;
                var VNV = mNv.VNV[vM];
                var vmw = mNv[networkMappings[188]][vM];
                var wvN = vmw[networkMappings[188]];
                for (var wm = 0; wm < wvN; wm++) mWnwM(VNV[vmw.vwV[wm]]);
            }
            if (game.player.healthStatus !== -1) {
                for (var vM = 0; vM < player.Wwwnv; vM++) {
                    var Wvwmm = player.wVVwv[vM];
                    if (Wvwmm.MMVmM < 0) continue;
                    var wVN = game.playersList[Wvwmm[networkMappings[109]]];
                    wVN[networkMappings[158]] = Wn.NnV(wVN[networkMappings[158]], wVN[networkMappings[77]], 0.03);
                    wVN[networkMappings[41]] = Wn.NnV(wVN[networkMappings[41]], wVN[networkMappings[120]], 0.03);
                    Wvwmm.MMVmM -= WW;
                }
            }
            if (game.player.nMWvn > 0) {
                var wVN = game.playersList[game.player.MnNwW];
                wVN[networkMappings[158]] = Wn.NnV(wVN[networkMappings[158]], wVN[networkMappings[77]], 0.03);
                wVN[networkMappings[41]] = Wn.NnV(wVN[networkMappings[41]], wVN[networkMappings[120]], 0.03);
                game.player.nMWvn -= WW;
            }
        };;

        function mWnwM(wW) {
            vn = wW[networkMappings[158]] + ((WW * wW.VMN) * wW.nnVVV);
            WM = wW[networkMappings[41]] + ((WW * wW.VMN) * wW.vvvwv);
            if (MNM.VnN(wW[networkMappings[158]], wW[networkMappings[41]], wW.nwV, wW.nWv) < MNM.VnN(vn, WM, wW[networkMappings[158]], wW[networkMappings[41]])) {
                wW[networkMappings[158]] = wW.nwV;
                wW[networkMappings[41]] = wW.nWv;
            } else {
                wW[networkMappings[158]] = vn;
                wW[networkMappings[41]] = WM;
            }
            wW[networkMappings[77]] = wvm.NnV(wW[networkMappings[77]], wW[networkMappings[158]], wW.NnV);
            wW[networkMappings[120]] = wvm.NnV(wW[networkMappings[120]], wW[networkMappings[41]], wW.NnV);
            wW.vM = Math[networkMappings[4]](0, Math[networkMappings[250]](Vnmvm, Math[networkMappings[68]](wW[networkMappings[120]] / VN.mVV)));
            wW.wm = Math[networkMappings[4]](0, Math[networkMappings[250]](VwNmW, Math[networkMappings[68]](wW[networkMappings[77]] / VN.mVV)));
            if ((game.player[networkMappings[109]] === wW.nvW) && (wW[networkMappings[109]] === 0)) wW[networkMappings[142]] = WNw[networkMappings[142]];
            else if (wW.nvW === 0) wW[networkMappings[142]] = wvm.NnV(wW[networkMappings[142]], wW.WWVNm, wW.NnV / 2);
            else wW[networkMappings[142]] = wvm.NnV(wW[networkMappings[142]], wW.WWVNm, wW.NnV * 2);
        };;

        function VvVNm(vVw, m) {
            if ((game.playersList[vVw].nickname === 0) && (game.playersList[m].nickname === 0)) return 0;
            else if (game.playersList[vVw].nickname === 0) return game.playersList[m].playerState - 1;
            else if (game.playersList[m].nickname === 0) return -1 - game.playersList[vVw].playerState;
            else return game.playersList[m].playerState - game.playersList[vVw].playerState;
        };;

        function wwwnN() {
            console[networkMappings[31]](game.nnVNM);
            for (var vM = 0; vM < game.nnVNM; vM++) game.mvV[vM] = vM;
            game.mvV = game.mvV[networkMappings[159]](VvVNm)[networkMappings[183]](0, 10);
            for (var vM = 0; vM < game.nnVNM; vM++) game.MvmVm = 1;
        };;

        function WwNvW(nnW, NNw) {
            for (var vM = 0; vM < 10; vM++) {
                var index = NNw[2 + (vM * 4)];
                var playerState = nnW[2 + (vM * 2)];
                var player = game.playersList[index];
                player.playerState = wvm.nvMvv(playerState);
                player.WVNvV = NNw[3 + (vM * 4)];
                var nvVVM = wvm.VMnMn(player.playerState);
                if (nvVVM !== player.nvVVM) player.nVv = null;
                player.nvVVM = nvVVM;
                game.mvV[vM] = index;
            }
            game.MvmVm = 1;
        };;

        function nmWNN() {
            this.NVv = 0;
            this[networkMappings[230]] = 0;
            this.WmW = 0;
            this.VMN = 0;
            this[networkMappings[32]] = 0;
            this.VMWMW = 1;
            this.nWvMN = 0;
        };;

        function wWvVm(wMN, Vn, nmn, vmM, VVv) {
            wMN.NVv = Vn;
            wMN[networkMappings[230]] = Vn;
            wMN.WmW = Vn;
            wMN.nmn = nmn;
            wMN.vmM = vmM;
            wMN.VVv = VVv;
            wMN.nWvMN = 0;
        };;

        function VVVVN() {
            var element = mnW[vMM].VvW;
            wWvVm(VvW.life, element.life.WmW, element.life.nmn, element.life.vmM, 0);
            if (player.health === 0) {
                wWvVm(VvW.NWV, element.NWV.WmW, element.NWV.nmn, element.NWV.vmM, 1);
                wWvVm(VvW.Nmn, element.Nmn.WmW, element.Nmn.nmn, element.Nmn.vmM, 0);
                wWvVm(VvW.Nvv, element.Nvv.WmW, element.Nvv.nmn, element.Nvv.vmM, -1);
                wWvVm(VvW.WwV, element.WwV.WmW, element.WwV.nmn, element.WwV.vmM, 0);
            } else {
                wWvVm(VvW.NWV, element.NWV.WmW, element.NWV.nmn, 0, 1);
                wWvVm(VvW.Nmn, element.Nmn.WmW, element.Nmn.nmn, 0, 0);
                wWvVm(VvW.Nvv, element.Nvv.WmW, element.Nvv.nmn * 2, element.Nvv.vmM / 2, -1);
                wWvVm(VvW.WwV, element.WwV.WmW, element.WwV.nmn, 0, 0);
            }
            wWvVm(VvW.VMM, 255, 0, 0, 0);
            VvW.VMM[networkMappings[230]] = 0;
            VvW.VMM.NVv = 0;
            player.wWNwn = VNvVv;
            if (NMn === WWnvW) VvW.Nmn.VVv = 1;
        };;

        function nnNVw(wMN) {
            if (wMN.VVv === 1) wMN[networkMappings[230]] = Math[networkMappings[250]](wMN.WmW, Math[networkMappings[4]](wMN[networkMappings[230]] - (WW * (wMN.vmM - wMN.nWvMN)), 0));
            else if (wMN.VVv === -1) wMN[networkMappings[230]] = Math[networkMappings[250]](wMN[networkMappings[230]] + (WW * (wMN.nmn + wMN.nWvMN)), wMN.WmW);
            wMN.NVv = wvm.NnV(wMN.NVv, wMN[networkMappings[230]], 0.1);
        };;

        function WWvWN() {
            nnNVw(VvW.life);
            nnNVw(VvW.NWV);
            nnNVw(VvW.Nmn);
            nnNVw(VvW.WwV);
            nnNVw(VvW.Nvv);
            nnNVw(VvW.VMM);
            game.player.VvVnM += WW;
            if (VvW.WwV.NVv > 254) wvW.wnVwv = 0;
            else wvW.wnVwv = Math[networkMappings[250]](1, Math[networkMappings[4]](0, 1 - (VvW.WwV.NVv / 255)));
            wMmwN();
        };;
        var VvW = {
            life: new nmWNN,
            NWV: new nmWNN,
            Nmn: new nmWNN,
            WwV: new nmWNN,
            Nvv: new nmWNN,
            VMM: new nmWNN
        };
        var WWnvW = 1;
        var NMnNw = 0;
        var NMn = NMnNw;
        var wnVvW = 0;

        function MNMMw() {
            var MMm;
            MMm = WVMwv;
            WVMwv = Mww;
            Mww = MMm;
            MMm = nmnnn;
            nmnnn = NWw;
            NWw = MMm;
            MMm = mNvWW;
            mNvWW = wNN;
            wNN = MMm;
            MMm = MnMnw;
            MnMnw = nwv;
            nwv = MMm;
            MMm = VMNvn;
            VMNvn = mnW;
            mnW = MMm;
            MMm = wnVmV;
            wnVmV = vNmWV;
            vNmWV = MMm;
            MMm = MNvvM;
            MNvvM = vVwmN;
            vVwmN = MMm;
            MMm = VNnwN;
            VNnwN = wwW;
            wwW = MMm;
            NMn = (NMn + 1) % 2;
            game.NMn = NMn;
            if (NMn === 0) {
                document[networkMappings[61]]("bod")[networkMappings[174]][networkMappings[9]] = "#daeae6";
                nNv[networkMappings[174]][networkMappings[9]] = "#daeae6";
            } else {
                document[networkMappings[61]]("bod")[networkMappings[174]][networkMappings[9]] = "#19435A";
                nNv[networkMappings[174]][networkMappings[9]] = "#19435A";
            }
            wnVvW = 0;
        };;

        function MnwMn(vwV, WMWvW) {
            if (vwV !== NMn) game.NVM = 1000;
            game.NMn = NMn;
            wnVvW = WMWvW;
        };;

        function MVwWM(vwV, WMWvW) {
            if (vwV !== NMn) MNMMw();
            game.NMn = NMn;
            wnVvW = WMWvW;
        };;

        function NWMVm() {
            wnVvW += WW;
            return (wnVvW % game.NMnNw) + (NMn * 10000000);
        };;

        function vVmnw(index) {
            var tokenIndex = 0;
            var mN = Mww[index];
            gameManager.mainElement.nNn(mN.NN[networkMappings[10]], mN.NN.n);
            var wmvmV = mN[networkMappings[79]].NMW;
            var MVm = mN[networkMappings[79]].wvn;
            var NMW = gameManager.NMW;
            var vvWvn = gameManager.vvWvn;
            var vWWmm = player.vWWmm;
            player.wNnWw = index;
            if (MVm !== undefined) {
                for (var vM = 0; vM < MVm[networkMappings[231]]; vM++) {
                    var wwm = MvwvN[MVm[vM]];
                    if (wwm !== undefined) {
                        mN = Mww[wwm];
                        vvWvn[tokenIndex].nNn(mN.NN[networkMappings[10]], mN.NN.n);
                        tokenIndex++;
                    }
                }
            }
            player.WWvvw = tokenIndex;
            tokenIndex = 0;
            if (wmvmV !== undefined) {
                for (vM = 0; vM < wmvmV[networkMappings[231]]; vM++) {
                    mN = Mww[wmvmV[vM][0]];
                    NMW[tokenIndex].nNn(mN.NN[networkMappings[10]], mN.NN.n);
                    vWWmm[tokenIndex] = mN[networkMappings[109]];
                    tokenIndex++;
                }
            }
            player.VMmWm = tokenIndex;
            wvwwW(wmvmV);
        };;

        function VmVwN(index, text) {
            if ((player.vNMvM[index] === 1) || (text[networkMappings[95]] === -1)) return 2;
            else if (((text[networkMappings[95]] > player[networkMappings[95]]) || (player.NVV < text.MWNMV)) || ((text.MmvWV !== -1) && (player.vNMvM[text.MmvWV] === undefined))) return 0;
            return 1;
        };;

        function wvwwW(NMW) {
            var wmMMw = player.NwNvn;
            var ww = player.mWV;
            var vMNVm = 1;
            if (NMW === undefined) return vMNVm;
            for (var vM = 0; vM < NMW[networkMappings[231]]; vM++) {
                var wmmmV = NMW[vM];
                for (var wm = 0; wm < ww[networkMappings[231]]; wm++) {
                    var mN = ww[wm];
                    if (mN[0] === wmmmV[0]) {
                        if (mN[1] >= wmmmV[1]) {
                            wmMMw[vM] = wmmmV[1];
                            break;
                        } else wmMMw[vM] = -wmmmV[1];
                    }
                }
                if (wm === ww[networkMappings[231]]) {
                    wmMMw[vM] = -wmmmV[1];
                    vMNVm = 0;
                }
            }
            return vMNVm;
        };;

        function VnnWM() {
            if ((game.player.wvw === 1) || (game.player.WNMNN === 1)) {
                game.player.wvw = 0;
                game.player.WNMNN = 0;
                network.VMw("[17]");
            }
        };;

        function mVw(WnN) {
            game.VnnWM();
            var NwnVV = 0;
            var MVNmM = 0;
            var tokenIndex = 0;
            var WnV = player.mainCollection;
            var mainCollection = gameManager.WnV;
            var Vnm = player.Vnm;
            for (var vM = 1; vM < Mww[networkMappings[231]]; vM++) {
                var mN = Mww[vM];
                if (mN[networkMappings[79]].WnN === WnN) {
                    if (NwnVV === 0) {
                        NwnVV = vM;
                        MVNmM = tokenIndex;
                    }
                    mainCollection[tokenIndex].nNn(mN.NN[networkMappings[10]], mN.NN.n);
                    WnV[tokenIndex] = vM;
                    Vnm[tokenIndex] = VmVwN(vM, mN[networkMappings[79]]);
                    tokenIndex++;
                }
            }
            player.VNvVW = tokenIndex;
            player.NvN = -1;
            player.MwV = WnN;
            player.MWvwN = MVNmM;
            vVmnw(NwnVV);
        };;

        function wNm(wvn) {
            if (wvn === mw.wVn) {
                game.VnnWM();
                player.vN.wWV = -1;
            }
            var NwnVV = 0;
            var MVNmM = 0;
            var MmvWV = game.player.wNnWw;
            var tokenIndex = 0;
            var WnV = player.mainCollection;
            var Vnm = player.Vnm;
            var mainCollection = gameManager.WnV;
            for (var vM = 1; vM < Mww[networkMappings[231]]; vM++) {
                var mN = Mww[vM];
                var text = mN[networkMappings[79]];
                if (((text.wvn !== undefined) && (text.wvn[networkMappings[196]](wvn) !== -1)) && ((text[networkMappings[95]] === -1) || (player.vNMvM[mN[networkMappings[109]]] === 1))) {
                    if ((NwnVV === 0) || (MmvWV === vM)) {
                        NwnVV = vM;
                        MVNmM = tokenIndex;
                    }
                    mainCollection[tokenIndex].nNn(mN.NN[networkMappings[10]], mN.NN.n);
                    WnV[tokenIndex] = vM;
                    Vnm[tokenIndex] = wvwwW(text.NMW);
                    tokenIndex++;
                }
            }
            player.VNvVW = tokenIndex;
            player.NvN = wvn;
            player.MwV = -1;
            player.MWvwN = MVNmM;
            if (NwnVV > 0) vVmnw(NwnVV);
        };;
        VNvVv = 900;
        VWmnW = 1.105;

        function VmmWW(MvM) {
            var VMM = VNvVv;
            for (var vM = 0; vM < MvM; vM++) VMM = Math[networkMappings[68]](VMM * VWmnW);
            return VMM;
        };;

        function wMmwN() {
            if ((player.VMM > 0) && (Math[networkMappings[99]](VvW.VMM.NVv - VvW.VMM[networkMappings[230]]) < 0.6)) {
                if (VvW.VMM[networkMappings[230]] === 255) {
                    VvW.VMM.NVv = 0;
                    VvW.VMM[networkMappings[230]] = 0;
                    player[networkMappings[95]] ++;
                    player.NVV++;
                    if ((gameManager.NWW() === 1) && (player.MwV !== -1)) mVw(player.MwV);
                    MM.nmM(MM.Mn.nVNvn, 1, 0);
                    return;
                }
                if (player.VMM >= player.wWNwn) {
                    VvW.VMM[networkMappings[230]] = 255;
                    player.VMM -= player.wWNwn;
                    player.wWNwn = Math[networkMappings[68]](player.wWNwn * VWmnW);
                } else VvW.VMM[networkMappings[230]] = Math[networkMappings[68]]((255 * player.VMM) / player.wWNwn);
            }
        };;
        var player = {
            id: 0,
            x: 0,
            y: 0,
            vWn: 0,
            Nnn: 0,
            playerState: 0,
            NVmNW: -1,
            mWMNn: 0,
            nVv: null,
            click: 0,
            mWV: [],
            VMmWm: 0,
            WWvvw: 0,
            wwVMV: 0,
            VNvVW: 0,
            wvw: 0,
            WNMNN: 0,
            NvN: -1,
            MwV: -1,
            wNnWw: -1,
            MWvwN: -1,
            vNMvM: [],
            level: 0,
            MMwnN: 0,
            VMM: 0,
            wWNwn: 0,
            NVV: 0,
            vWWmm: [],
            mainCollection: [],
            Vnm: [],
            NwNvn: [],
            nNmMN: 0,
            wMvWW: 0,
            vWW: {
                wnv: 0,
                x: 0,
                y: 0,
                id: 0
            },
            NVMmm: null,
            mnv: -1,
            MVwNV: 0,
            VmWnn: 0,
            Nw: -1,
            MVwWV: -1,
            mWWWN: 0,
            wvv: -1,
            vNnWV: -1,
            MWnvV: -1,
            mNwVm: -1,
            WVm: [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ],
            VWWMm: 0,
            vN: {
                WWN: [0, 0, 0, 0],
                nM: 0,
                time: 0,
                VvVmv: 0,
                tokenIndex: 0,
                wWV: 0
            },
            vvv: 0,
            WwnMn: 0,
            vvVww: 0,
            WnvWN: 0,
            Vvm: 0,
            WMn: [0, 0, 0],
            vVnvN: 0,
            wwVnM: 0,
            VWmmv: [0, 0, 0],
            Vnmwm: [0, 0, 0],
            wMw: 0,
            Vwm: 0,
            Nmm: 0,
            NvvwM: 0,
            WwM: 0,
            WwNwm: 0,
            mwMnW: 0,
            vWvvm: 0,
            WvVnv: 0,
            wmMVV: 0,
            nNmnm: 0,
            wnwwV: 0,
            NmVvv: 0,
            MMNmN: [0, 0, 0, 0, 0],
            wmn: 0,
            nNmnm: 0,
            healthStatus: -1,
            wVVwv: [],
            Wwwnv: 0,
            WVNvV: 0,
            MnNwW: 0,
            nMWvn: 0,
            WVMmN: null,
            vvWVw: 0,
            nVwMN: 1,
            nNnwv: 0,
            NVwNm: 0,
            vnWWv: 0,
            vvMWw: 0,
            health: 0,
            vwmWM: []
        };
        return {
            mNm: 0,
            vVwwV: 1,
            mvVVw: 2,
            Wvv: 0,
            mvV: [],
            wwwnN: wwwnN,
            WwNvW: WwNvW,
            VVnNN: VVnNN,
            MvmVm: 0,
            nnVNM: 0,
            Wnw: 0,
            mvVWM: mvVWM,
            gameData: [],
            nmVWm: nmVWm,
            WwWVM: WwWVM,
            VNVMn: VNVMn,
            VnVNN: VnVNN,
            playersList: [],
            player: player,
            mWnwM: mWnwM,
            mNWMW: mNWMW,
            VvW: VvW,
            VVVVN: VVVVN,
            WWvWN: WWvWN,
            MNMMw: MNMMw,
            MnwMn: MnwMn,
            MVwWM: MVwWM,
            NWMVm: NWMVm,
            NMnNw: (8 * 60) * 1000,
            NMn: 0,
            NVM: 0,
            wNm: wNm,
            mVw: mVw,
            vVmnw: vVmnw,
            VnnWM: VnnWM,
            VmmWW: VmmWW
        };
    })();
    var mNv = (function() {
        var VVNmV = 0;
        var VNV = [];
        var vmw = [];
        var VNmNM = [];
        var VWvMM = 0;

        function nnM(MVmMN, vwWmN, vnWmm) {
            mNv.vwWmN = (vwWmN === undefined) ? 0 : vwWmN;
            mNv.vnWmm = (vnWmm === undefined) ? 0 : vnWmm;
            VWvMM = mNv.vnWmm + mNv.vwWmN;
            VVNmV = mnW[networkMappings[231]];
            var tokenIndex = mnW[networkMappings[231]] + 1;
            for (var vM = 0; vM < tokenIndex; vM++) {
                vmw[vM] = new vNnWv.vNnWv(MVmMN);
                VNV[vM] = [];
                for (var wm = 0; wm < MVmMN; wm++) VNV[vM][wm] = mNv[networkMappings[248]](vM);
            }
        };;

        function vVVvV(mv) {
            return new mwnWW(mv);
        };;

        function MVmWv() {
            for (var vM = 0; vM < mnW[networkMappings[231]]; vM++) vmw[vM][networkMappings[188]] = 0;
            VNmNM = [];
        };;

        function WNN(nvW, index, wWW, mv, mmVwm) {
            var vM = 0;
            var VvvnV = (((nvW === 0) ? 0 : VWvMM) + (nvW * mNv.VVvvN)) + index;
            var wW = VNmNM[VvvnV];
            if (((wW !== undefined) && (wW[networkMappings[217]] === mv)) && (wW.wWW === wWW)) VNmNM[VvvnV] = undefined;
            var m = vmw[mv];
            var mWnWn = VNV[mv];
            var tokenIndex = m[networkMappings[188]];
            for (vM = 0; vM < tokenIndex; vM++) {
                var wW = mWnWn[m.vwV[vM]];
                if (((wW.wWW === wWW) && (wW.nvW === nvW)) && (wW[networkMappings[109]] === index)) {
                    vNnWv.MVWwn(m, vM);
                    if ((mnW[wW[networkMappings[217]]][networkMappings[54]] > 0) && (mmVwm === 1)) {
                        var wNnvV = VNV[VVNmV][vNnWv.nWvMm(vmw[VVNmV])];
                        for (var wm in wW) wNnvV[wm] = wW[wm];
                        wNnvV.MnN = 1;
                    }
                    return;
                }
            }
        };;

        function wnN(nvW, index, wWW, mv) {
            var VvvnV = (((nvW === 0) ? 0 : VWvMM) + (nvW * mNv.VVvvN)) + index;
            var wW = VNmNM[VvvnV];
            if ((wW === undefined) || (wW.wWW !== wWW)) {
                var VvWMv = vNnWv.nWvMm(vmw[mv]);
                wW = VNV[mv][VvWMv];
                if (wW === undefined) {
                    console[networkMappings[31]]("Memory Warn: new entitie created");
                    VNV[mv][VvWMv] = mNv[networkMappings[248]](mv);
                    wW = VNV[mv][VvWMv];
                }
                VNmNM[VvvnV] = wW;
                wW[networkMappings[170]] = 0;
                wW.MnN = 0;
            }
            return wW;
        };;

        function VwnNV() {
            var m = vmw[VVNmV];
            var mWnWn = VNV[VVNmV];
            var tokenIndex = m[networkMappings[188]];
            for (vM = 0; vM < tokenIndex; vM++) {
                var wW = mWnWn[m.vwV[vM]];
                if (wW.MnN !== 1) {
                    vNnWv.MVWwn(m, vM);
                    tokenIndex--;
                    vM--;
                }
            }
        };;

        function nwNvW(mv, nvW, index) {
            var mWnWn = VNV[mv];
            var m = vmw[mv];
            var tokenIndex = m[networkMappings[188]];
            for (var vM = 0; vM < tokenIndex; vM++) {
                var VM = mWnWn[m.vwV[vM]];
                if ((VM[networkMappings[109]] === index) && (VM.nvW === nvW)) return VM;
            }
            return null;
        };;
        return {
            nnM: nnM,
            create: vVVvV,
            get: wnN,
            nwNvW: nwNvW,
            remove: WNN,
            MVmWv: MVmWv,
            VNV: VNV,
            border: vmw,
            VwnNV: VwnNV,
            VVvvN: 0,
            vwWmN: 0,
            vnWmm: 0
        };
    })();
    var mnW = [{
        VvW: {
            life: {
                WmW: 255,
                vmM: 0.005,
                nmn: 0.005
            },
            NWV: {
                WmW: 255,
                vmM: 0.0012,
                nmn: 0.0012
            },
            Nmn: {
                WmW: 255,
                vmM: 0.0035,
                nmn: 0.005
            },
            WwV: {
                WmW: 255,
                vmM: 0.024,
                nmn: 0.003
            },
            Nvv: {
                WmW: 255,
                vmM: 0.03,
                nmn: 0.015
            }
        },
        nmWwW: [{
            head: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-skin0.png?raw=true",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-left-arm0.png?raw=true",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-right-arm0.png?raw=true",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-skin1.png?raw=true",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-left-arm0.png?raw=true",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-right-arm0.png?raw=true",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-skin2.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm2.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm2.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-skin3.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm2.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm2.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-skin4.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm4.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm4.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-skin5.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm4.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm4.png",
                n: {
                    v: 0
                }
            }
        }],
        nwwWM: [{}, {
            head: {
                src: "img/day-headscarf.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-elf-hat.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-elf-hat.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-elf-hat.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-snowman-hat.png?raw=true",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-coat.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-coat.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-gaz-mask.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-gaz-protection.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-gaz-protection.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-gaz-protection.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-radiation-suit.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-radiation-suit.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-radiation-suit.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-metal-helmet.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-welding-helmet.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-welding-helmet.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-welding-helmet.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-gladiator-helmet.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-gladiator-armor.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-gladiator-armor.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-leather-jacket.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-leather-jacket.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-leather-jacket.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-kevlar-suit.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-kevlar-suit.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-kevlar-suit.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-SWAT-suit.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-SWAT-suit.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-SWAT-suit.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-protective-suit.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-protective-suit.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-protective-suit.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-tesla-0.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-tesla-0.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-tesla-0.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-tesla-armor.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-tesla-armor.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-tesla-armor.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-camouflage-gear.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-camouflage-gear.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-camouflage-gear.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-christmas-hat.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-deer-hat.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-snowman-hat.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-snowman-hat.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-snowman-hat.png",
                n: {
                    v: 0
                }
            }
        }, {
            head: {
                src: "img/day-elf-hat.png",
                n: {
                    v: 0
                }
            },
            nVW: {
                src: "img/day-left-arm-elf-hat.png",
                n: {
                    v: 0
                }
            },
            vvw: {
                src: "img/day-right-arm-elf-hat.png",
                n: {
                    v: 0
                }
            }
        }],
        mNnnW: {
            src: "img/day-run-effect.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-dead-player.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/hurt-player.png",
            n: {
                v: 0
            }
        },
        wWN: {
            src: "img/heal-player.png",
            n: {
                v: 0
            }
        },
        NWV: {
            src: "img/food-player.png",
            n: {
                v: 0
            }
        },
        nnVNm: [{
            src: "img/day-shotgun-cartridge.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-9mm-cartridge.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-AK47-cartridge.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-crossbow-cartridge.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-nails-cartridge.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-cells-cartridge.png",
            n: {
                v: 0
            }
        }],
        vNvmv: [
            [{
                src: "img/day-bullet1.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-bullet2.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-bullet2l.png",
                n: {
                    v: 0
                }
            }],
            [{
                src: "img/day-bullet3.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-bullet4.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-bullet4l.png",
                n: {
                    v: 0
                }
            }],
            [{
                src: "img/day-bullet5.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-bullet6.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-bullet6l.png",
                n: {
                    v: 0
                }
            }],
            [{
                src: "img/day-wood-arrow.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-wood-arrow1.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-wood-arrowl.png",
                n: {
                    v: 0
                }
            }],
            [{
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-wood-spear0.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-wood-spear1.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-wood-spearl.png",
                n: {
                    v: 0
                }
            }],
            [{
                src: "img/day-wood-crossarrow.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-wood-crossarrow1.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-wood-crossarrowl.png",
                n: {
                    v: 0
                }
            }],
            [{
                src: "img/day-nail1.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-nail2.png",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-nail2l.png",
                n: {
                    v: 0
                }
            }],
            [{
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-laser0.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-laser1.png",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-laser1l.png?raw=true",
                n: {
                    v: 0
                }
            }],
            [{
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-grenade0.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-grenade21.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "img/day-grenadel.png",
                n: {
                    v: 0
                }
            }]
        ],
        wwM: [
            [{
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gun-effect0.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gun-effect1.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gun-effect2.png?raw=true",
                n: {
                    v: 0
                }
            }],
            [{
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-laser-effect0.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-laser-effect1.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-laser-effect2.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-laser-effect3.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-laser-effect4.png?raw=true",
                n: {
                    v: 0
                }
            }]
        ],
        Mmwnn: [{
            type: 0,
            id: 0,
            vnV: 0,
            vvw: {
                angle: 0,
                x: 22,
                y: 39
            },
            nVW: {
                angle: 0,
                x: 22,
                y: -39
            },
            mNW: 0,
            vNm: 0.5,
            mwW: 3,
            nWw: ["audio/hand-swing0.mp3", "audio/hand-swing2.mp3", "audio/hand-swing3.mp3"],
            wM: 0.05,
            Vm: 3,
            messageHandler: 300,
            mVW: 301,
            Nmw: 150,
            currentDamage: 20,
            mwMVv: 3,
            WMN: 10,
            Nvv: 2,
            Vwn: 30,
            MVnWm: 0,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 0.8,
            mwW: 1,
            nWw: ["audio/pickaxe-swing.mp3"],
            statusEffect: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-stone-pickaxe.png?raw=true",
                n: {
                    v: 0
                },
                angle: 0,
                x: 30,
                y: 0,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.02,
            Vm: 2,
            messageHandler: 800,
            VmWMm: 800,
            mVW: 801,
            Nmw: 650,
            currentDamage: 45,
            mwMVv: 16,
            WMN: 15,
            Nvv: 5,
            Vwn: 50,
            VNv: 56,
            vwn: 0,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 0.8,
            mwW: 1,
            nWw: ["audio/pickaxe-swing.mp3"],
            statusEffect: {
                src: "img/day-steel-pickaxe.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 30,
                y: 0,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.02,
            Vm: 2,
            messageHandler: 800,
            VmWMm: 800,
            mVW: 801,
            Nmw: 650,
            currentDamage: 55,
            mwMVv: 22,
            WMN: 15,
            Nvv: 5,
            Vwn: 50,
            VNv: 56,
            vwn: 0,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 0.8,
            mwW: 1,
            nWw: ["audio/hatchet-swing.mp3"],
            //nWw: ["https://raw.githubusercontent.com/ultrasmesharik/sound/main/snowshot1.mp3"],
            
            statusEffect: {
                src: "img/day-hachet.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 30,
                y: 0,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.02,
            Vm: 2,
            messageHandler: 500,
            VmWMm: 500,
            mVW: 501,
            Nmw: 350,
            currentDamage: 30,
            mwMVv: 7,
            WMN: 10,
            Nvv: 4,
            Vwn: 40,
            VNv: 59,
            vwn: 0,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 0.8,
            mwW: 1,
            nWw: ["audio/axe-swing.mp3"],
            statusEffect: {
                src: "img/day-stone-axe.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 30,
                y: 0,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.05,
            Vm: 3,
            messageHandler: 650,
            mVW: 651,
            Nmw: 550,
            currentDamage: 50,
            mwMVv: 26,
            WMN: 20,
            Nvv: 4,
            Vwn: 46,
            VNv: 72,
            vwn: 0,
            nN: 0
        }, {
            type: 3,
            id: 0,
            vnV: 1,
            mNW: 0.75,
            vNm: 1,
            mwW: 1,
            nWw: ["audio/spear-shot.mp3"],
            statusEffect: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-wood-spear.png?raw=true",
                n: {
                    v: 0
                },
                angle: 0,
                x: 25,
                y: 40
            },
            vvw: {
                angle: 0,
                x: 10,
                y: 44
            },
            nVW: {
                angle: 0,
                x: 22,
                y: -39
            },
            VWW: [0],
            WVw: 4,
            MvV: 0.5,
            vWw: 1,
            path: 600,
            currentDamage: 80,
            WMN: 30,
            wM: 0.05,
            MWVVN: 2,
            Vm: 3,
            messageHandler: 850,
            mVW: 100,
            Nmw: 100,
            Nvv: 15,
            x: -40,
            VNv: 47,
            vwv: 60,
            vwn: 0,
            nN: 0
        }, {
            type: 4,
            id: 0,
            vnV: 1,
            VMNwm: {
                src: "img/day-wood-arrow1.png",
                n: {
                    v: 0
                },
                x: 50,
                y: 0
            },
            mNW: 1.08,
            vNm: 1.4,
            mwW: 1,
            nWw: ["audio/bow-shot.mp3"],
            statusEffect: {
                src: "img/day-wood-bow.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 44,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 10,
                y: 44
            },
            nVW: {
                angle: 0,
                x: 40,
                y: -30
            },
            currentDamage: 40,
            WMN: 10,
            VWW: [0],
            WVw: 3,
            MvV: 0.75,
            vWw: 1,
            path: 800,
            wM: 0.5,
            MWVVN: 1,
            Vm: 1,
            messageHandler: 1200,
            mVW: 120,
            Nmw: 100,
            Nvv: 8,
            x: -1,
            VNv: 47,
            vwv: -8,
            vwn: 0,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 43,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            nWw: ["audio/shotgun-shot.mp3"],
            statusEffect: {
                src: "img/day-shotgun.png",
                n: {
                    v: 0
                },
                x: 60,
                y: 0
            },
            currentDamage: 21,
            WMN: 20,
            wwM: 0,
            NvW: 0,
            vvwnn: 500,
            NwV: 3,
            VNw: 4,
            Vmv: 3,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0, 0.1, -0.1, 0.2, -0.2],
            WVw: 2,
            MvV: 1.1,
            vWw: 1,
            NNmNW: 8,
            reload: 10,
            nMwWm: 1,
            vwv: 58,
            wM: 1,
            Vm: 2,
            messageHandler: 900,
            mVW: 901,
            Nvv: 0,
            x: 0,
            path: 600,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            nWw: ["audio/9mm-shot.mp3"],
            statusEffect: {
                src: "img/day-9mm.png",
                n: {
                    v: 0
                },
                x: 50,
                y: 0
            },
            currentDamage: 28,
            WMN: 10,
            wwM: 0,
            NvW: 1,
            vvwnn: 400,
            NwV: 2,
            VNw: 1,
            Vmv: 2,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 0,
            MvV: 1.2,
            vWw: 1,
            NNmNW: 20,
            reload: 22,
            nMwWm: 0,
            vwv: 40,
            wM: 1,
            Vm: 2,
            messageHandler: 400,
            mVW: 401,
            Nvv: 0,
            x: 0,
            path: 800,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            mNW: 0,
            vNm: 1.3,
            mwW: 1,
            nWw: ["audio/desert-eagle-shot.mp3"],
            statusEffect: {
                src: "img/day-desert-eagle.png",
                n: {
                    v: 0
                },
                x: 50,
                y: 0
            },
            currentDamage: 40,
            WMN: 25,
            wwM: 0,
            NvW: 1,
            vvwnn: 400,
            NwV: 2,
            VNw: 1,
            Vmv: 2,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 0,
            MvV: 1.4,
            vWw: 1,
            NNmNW: 7,
            reload: 22,
            nMwWm: 0,
            vwv: 40,
            wM: 1,
            Vm: 2,
            messageHandler: 400,
            mVW: 401,
            Nvv: 0,
            x: 0,
            path: 900,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 43,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            nWw: ["audio/ak47-shot.mp3"],
            statusEffect: {
                src: "img/day-AK47.png",
                n: {
                    v: 0
                },
                x: 60,
                y: 0
            },
            currentDamage: 30,
            WMN: 25,
            wwM: 0,
            NvW: 2,
            vvwnn: 500,
            NwV: 3,
            VNw: 2,
            Vmv: 4,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 1,
            MvV: 1.4,
            vWw: 1,
            NNmNW: 30,
            reload: 25,
            nMwWm: 0,
            vwv: 58,
            wM: 1,
            Vm: 2,
            messageHandler: 120,
            mVW: 121,
            Nvv: 0,
            x: 0,
            path: 900,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 43,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            nWw: ["audio/sniper-shot.mp3"],
            statusEffect: {
                src: "img/day-sniper.png",
                n: {
                    v: 0
                },
                x: 60,
                y: 0
            },
            currentDamage: 90,
            WMN: 30,
            wwM: 0,
            NvW: 2,
            vvwnn: 500,
            NwV: 3,
            VNw: 1,
            Vmv: 4,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 1,
            MvV: 1.5,
            vWw: 1,
            NNmNW: 10,
            reload: 20,
            nMwWm: 0,
            vwv: 70,
            wM: 1,
            Vm: 2,
            messageHandler: 1250,
            mVW: 1251,
            Nvv: 0,
            x: 0,
            path: 1100,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-raw-steak.png",
                n: {
                    v: 0
                },
                angle: 1,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 20,
            NWV: 30,
            Wwm: 0,
            VWw: 20,
            wWN: -10,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-cooked-steak.png",
                n: {
                    v: 0
                },
                angle: 1,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 4,
            wM: 0.4,
            Vm: 0.8,
            Nvv: 0,
            VWV: 200,
            wait: 20,
            NWV: 127,
            Wwm: 0,
            VWw: 80,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-rotten-steak.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 20,
            NWV: 15,
            Wwm: 0,
            VWw: 0,
            wWN: -40,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-orange.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 40,
            Wwm: 0,
            VWw: 10,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-rotten-orange.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 5,
            Wwm: 0,
            VWw: 0,
            wWN: -40,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-medikit.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 55,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 32
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -32
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 25,
            NWV: 0,
            Wwm: 0,
            VWw: 0,
            wWN: 200,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-bandage.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 0,
            Wwm: 0,
            VWw: 0,
            wWN: 60,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-soda.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 30,
            Wwm: 0,
            VWw: 155,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 43,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            nWw: ["audio/mp5-shot.mp3"],
            statusEffect: {
                src: "img/day-MP5.png",
                n: {
                    v: 0
                },
                x: 60,
                y: 0
            },
            currentDamage: 18,
            WMN: 15,
            wwM: 0,
            NvW: 1,
            vvwnn: 500,
            NwV: 3,
            VNw: 2,
            Vmv: 4,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 0,
            MvV: 1.2,
            vWw: 1,
            NNmNW: 30,
            reload: 26,
            nMwWm: 0,
            vwv: 52,
            wM: 1,
            Vm: 2,
            messageHandler: 100,
            mVW: 101,
            Nvv: 0,
            x: 0,
            path: 900,
            VNv: 47,
            nN: 0
        }, {
            type: 6,
            id: 0,
            vnV: 0,
            vvw: {
                angle: 0,
                x: 22,
                y: 39
            },
            nVW: {
                angle: 0,
                x: 22,
                y: -39
            },
            wM: 0.05,
            Vm: 3,
            MVnWm: 0,
            vvv: {
                src: "img/day-hand-craft.png",
                n: {
                    v: 0
                }
            },
            nMWMm: {
                src: "img/day-hand-craftpencil.png",
                n: {
                    v: 0
                }
            },
            vwn: 0,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 0.8,
            mwW: 1,
            nWw: ["audio/pickaxe-swing.mp3"],
            statusEffect: {
                src: "img/day-sulfur-pickaxe.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 20,
                y: 0,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.02,
            Vm: 2,
            messageHandler: 800,
            VmWMm: 800,
            mVW: 801,
            Nmw: 650,
            currentDamage: 65,
            mwMVv: 30,
            WMN: 15,
            Nvv: 5,
            Vwn: 50,
            VNv: 56,
            vwn: 0,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 0.8,
            mwW: 1,
            nWw: ["audio/hammer-swing.mp3"],
            statusEffect: {
                src: "img/day-hammer.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 25,
                y: 0,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.02,
            Vm: 2,
            messageHandler: 1100,
            VmWMm: 1100,
            mVW: 1101,
            Nmw: 950,
            currentDamage: 120,
            mwMVv: 30,
            WMN: 30,
            Nvv: 15,
            Vwn: 40,
            VNv: 56,
            vwn: 0,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-repair-hammer.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 20,
                y: 0,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.02,
            Vm: 2,
            messageHandler: 700,
            VmWMm: 700,
            mVW: 701,
            Nmw: 550,
            currentDamage: 40,
            mwMVv: 15,
            WMN: 10,
            Nvv: 6,
            Vwn: 40,
            VNv: 59,
            vwn: 0,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-tomato-soup.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 30,
            NWV: 160,
            Wwm: 0,
            VWw: 40,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-radaway.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 25
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -25
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 30,
            NWV: 0,
            Wwm: 255,
            VWw: 30,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-tomato.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 50,
            Wwm: 0,
            VWw: 10,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-rotten-tomato.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 5,
            Wwm: 0,
            VWw: 0,
            wWN: -40,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            nWw: ["audio/crossbow-shot.mp3"],
            statusEffect: {
                src: "img/day-wood-crossbow.png",
                n: {
                    v: 0
                },
                x: 50,
                y: 0
            },
            currentDamage: 50,
            WMN: 15,
            wwM: 0,
            NvW: 3,
            vvwnn: 400,
            NwV: 2,
            VNw: 1,
            Vmv: 2,
            mVN: 1,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 5,
            MvV: 0.95,
            vWw: 1,
            NNmNW: 1,
            reload: 8,
            nMwWm: 0,
            vwv: 40,
            wM: 1,
            Vm: 2,
            messageHandler: 400,
            mVW: 401,
            Nvv: 12,
            x: 0,
            path: 800,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            nWw: ["audio/nail-gun-shot.mp3"],
            statusEffect: {
                src: "img/day-nail-gun.png",
                n: {
                    v: 0
                },
                x: 50,
                y: 0
            },
            currentDamage: 6,
            WMN: 10,
            wwM: 0,
            NvW: 4,
            vvwnn: 400,
            NwV: 2,
            VNw: 1,
            Vmv: 2,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 6,
            MvV: 1,
            vWw: 1,
            NNmNW: 80,
            reload: 30,
            nMwWm: 0,
            vwv: 52,
            wM: 1,
            Vm: 2,
            messageHandler: 300,
            mVW: 301,
            Nvv: 0,
            x: 0,
            path: 500,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 43,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            nWw: ["audio/shotgun-shot.mp3"],
            statusEffect: {
                src: "img/day-sawed-off-shotgun.png",
                n: {
                    v: 0
                },
                x: 50,
                y: 0
            },
            currentDamage: 28,
            WMN: 30,
            wwM: 0,
            NvW: 0,
            vvwnn: 500,
            NwV: 3,
            VNw: 4,
            Vmv: 3,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0, 0.12, -0.12, 0.24, -0.24],
            WVw: 2,
            MvV: 1.11,
            vWw: 1,
            NNmNW: 8,
            reload: 10,
            nMwWm: 1,
            vwv: 53,
            wM: 1,
            Vm: 2,
            messageHandler: 900,
            mVW: 901,
            Nvv: 0,
            x: 0,
            path: 400,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-chips.png",
                n: {
                    v: 0
                },
                angle: 1,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 4,
            wM: 0.4,
            Vm: 0.8,
            Nvv: 0,
            VWV: 200,
            wait: 20,
            NWV: 90,
            Wwm: 0,
            VWw: 50,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-rotten-chips.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 5,
            Wwm: 0,
            VWw: 0,
            wWN: -40,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            //nWw: ["audio/laser-pistol-shot.mp3"],
            nWw: ["https://raw.githubusercontent.com/ultrasmesharik/sound/main/snowshot1.mp3"],
            statusEffect: {
                src: "img/day-laser-pistol.png",
                n: {
                    v: 0
                },
                x: 50,
                y: 0
            },
            currentDamage: 55,
            WMN: 0,
            wwM: 1,
            NvW: 5,
            vvwnn: 400,
            NwV: 2,
            VNw: 1,
            Vmv: 2,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 7,
            MvV: 1.45,
            vWw: 2,
            NNmNW: 12,
            reload: 22,
            nMwWm: 0,
            vwv: 50,
            wM: 1,
            Vm: 2,
            messageHandler: 400,
            mVW: 401,
            Nvv: 0,
            x: 0,
            path: 900,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 0.8,
            mwW: 1,
            nWw: ["audio/axe-swing.mp3"],
            statusEffect: {
                src: "img/day-sulfur-axe.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 30,
                y: 0,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.05,
            Vm: 3,
            messageHandler: 650,
            mVW: 651,
            Nmw: 550,
            currentDamage: 50,
            mwMVv: 30,
            WMN: 20,
            Nvv: 4,
            Vwn: 46,
            VNv: 72,
            vwn: 0,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-joystick.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 2,
            NWV: 0,
            Wwm: 0,
            VWw: 0,
            wWN: 0,
            nwm: 0,
            vwn: 0,
            nN: 1
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            //nWw: ["audio/laser-submachine-shot.mp3"],
            nWw: ["https://raw.githubusercontent.com/ultrasmesharik/sound/main/snowshot1.mp3"],
            statusEffect: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-laser-submachine.png?raw=true",
                n: {
                    v: 0
                },
                x: 50,
                y: 0
            },
            currentDamage: 45,
            WMN: 0,
            wwM: 1,
            NvW: 5,
            vvwnn: 500,
            NwV: 3,
            VNw: 2,
            Vmv: 4,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 7,
            MvV: 1.45,
            vWw: 2,
            NNmNW: 30,
            reload: 25,
            nMwWm: 0,
            vwv: 54,
            wM: 1,
            Vm: 2,
            messageHandler: 160,
            mVW: 161,
            Nvv: 0,
            x: 0,
            path: 900,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 3,
            id: 0,
            vnV: 1,
            statusEffect: {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-grenade21.png?raw=true",
                n: {
                    v: 0
                },
                angle: 0,
                x: 25,
                y: 50
            },
            vvw: {
                angle: 0,
                x: 10,
                y: 44
            },
            nVW: {
                angle: 0,
                x: 22,
                y: -39
            },
            VWW: [0],
            WVw: 8,
            MvV: 0.4,
            vWw: 1,
            path: 380,
            currentDamage: 15,
            WMN: 5,
            wM: 0.05,
            MWVVN: 2,
            Vm: 3,
            messageHandler: 850,
            mVW: 100,
            Nmw: 100,
            Nvv: 15,
            x: -50,
            VNv: 47,
            vwv: 25,
            vwn: 0,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-super-hammer.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 25,
                y: 5,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.02,
            Vm: 2,
            messageHandler: 1100,
            VmWMm: 1100,
            mVW: 1101,
            Nmw: 950,
            currentDamage: 1000,
            mwMVv: 255,
            WMN: 30,
            Nvv: 15,
            Vwn: 40,
            VNv: 56,
            vwn: 0,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-ghoul-drug.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 13
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 30,
            NWV: 0,
            Wwm: 0,
            VWw: 0,
            wWN: -10,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-mushroom1.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 0,
            Wwm: 0,
            VWw: 10,
            wWN: -20,
            nwm: 12,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-mushroom2.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 40,
            Wwm: 0,
            VWw: 10,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-mushroom3.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 40,
            Wwm: 0,
            VWw: 10,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-rotten-mushroom1.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 0,
            Wwm: 0,
            VWw: 0,
            wWN: -40,
            nwm: 8,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-rotten-mushroom2.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 5,
            Wwm: 0,
            VWw: 0,
            wWN: -40,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-rotten-mushroom3.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 5,
            Wwm: 0,
            VWw: 0,
            wWN: -40,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-lapadoine.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 13
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 30,
            NWV: 0,
            Wwm: 0,
            VWw: 0,
            wWN: -10,
            nwm: 2,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-pumpkin.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 25
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -25
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 20,
            NWV: 90,
            Wwm: 0,
            VWw: 20,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-rotten-pumpkin.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 25
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -25
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 30,
            Wwm: 0,
            VWw: 0,
            wWN: -40,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-antidote.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 13
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -13
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 30,
            NWV: 0,
            Wwm: 0,
            VWw: 0,
            wWN: 50,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-acorn.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 10
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -10
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 15,
            Wwm: 0,
            VWw: 0,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            mNW: 0,
            vNm: 1,
            mwW: 3,
            nWw: 1,
            statusEffect: {
                src: "img/day-hand-rotten-acorn.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 10
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -10
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 2,
            Wwm: 0,
            VWw: 0,
            wWN: -20,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 2,
            id: 0,
            vnV: 1,
            vvw: {
                angle: 0,
                x: 32,
                y: 15
            },
            nVW: {
                angle: 0,
                x: 43,
                y: -13
            },
            mNW: 0,
            vNm: 1,
            mwW: 1,
            //nWw: ["audio/laser-sniper-shot.mp3"],
            nWw: ["https://raw.githubusercontent.com/ultrasmesharik/sound/main/snowshot1.mp3"],
            statusEffect: {
                src: "img/day-laser-sniper.png",
                n: {
                    v: 0
                },
                x: 55,
                y: 0
            },
            currentDamage: 100,
            WMN: 0,
            wwM: 1,
            NvW: 5,
            vvwnn: 500,
            NwV: 3,
            VNw: 1,
            Vmv: 4,
            mVN: 0,
            MWmvN: 0,
            wwVmW: 0,
            VWW: [0],
            WVw: 7,
            MvV: 1.5,
            vWw: 2,
            NNmNW: 10,
            reload: 20,
            nMwWm: 0,
            vwv: 70,
            wM: 1,
            Vm: 2,
            messageHandler: 1250,
            mVW: 1251,
            Nvv: 0,
            x: 0,
            path: 1100,
            VNv: 47,
            vwn: 0,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-christmas-cake.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 10
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -10
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 127,
            Wwm: 0,
            VWw: 30,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-rotten-christmas-cake.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 10
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -10
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 10,
            Wwm: 0,
            VWw: 0,
            wWN: -20,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-gingerbread-man.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 10
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -10
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 20,
            Wwm: 0,
            VWw: 20,
            wWN: 40,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-rotten-gingerbread-man.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 10
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -10
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 10,
            Wwm: 0,
            VWw: 0,
            wWN: -20,
            nwm: 0,
            vwn: 1,
            nN: 0
        }, {
            type: 1,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-sugar-can.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 30,
                y: 0,
                wNW: 4,
                x2: 20,
                y2: 10
            },
            vvw: {
                angle: 0,
                x: 33,
                y: 28,
                VNv: 8,
                wNW: 1.8
            },
            nVW: {
                angle: 0,
                x: 30,
                y: -28,
                VNv: -14,
                wNW: 1
            },
            wM: 0.02,
            Vm: 2,
            VmWMm: 650,
            messageHandler: 650,
            mVW: 651,
            Nmw: 550,
            currentDamage: 60,
            mwMVv: 38,
            WMN: 20,
            Nvv: 16,
            Vwn: 50,
            VNv: 56,
            vwn: 0,
            nN: 0
        }, {
            type: 5,
            id: 0,
            vnV: 0,
            statusEffect: {
                src: "img/day-hand-sugar-can-bow.png",
                n: {
                    v: 0
                },
                angle: 0,
                x: 50,
                y: 0
            },
            vvw: {
                angle: 0,
                x: 32,
                y: 10
            },
            nVW: {
                angle: 0,
                x: 32,
                y: -10
            },
            NwV: 3,
            wM: 0.02,
            Vm: 2,
            Nvv: 0,
            VWV: 200,
            wait: 10,
            NWV: 30,
            Wwm: 0,
            VWw: 50,
            wWN: 0,
            nwm: 0,
            vwn: 1,
            nN: 0
        }],
        mMwWV: {
            w: 24,
            mVn: 24
        },
        Vwn: 38,
        MMWMv: 40,
        VwwwM: 36,
        vVVMM: 36,
        MmNvn: 36,
        WmV: 36,
        VMN: 0.23,
        vnwVW: 0.35,
        wmMvM: 0.08,
        vnMMn: 0.08,
        Nmmmv: 0.08,
        nVnWm: 0.05,
        nnwNN: 0,
        remove: 1000,
        z: 0,
        life: 0,
        VwwmM: 8,
        NnV: 0.15,
        vmN: -1
    }, {
        mMwWV: {
            w: 0,
            mVn: 0
        },
        Vwn: 50,
        VwwwM: 0,
        vVVMM: 0,
        MmNvn: 0,
        WmV: 0,
        VMN: 0.2,
        nnwNN: 2,
        remove: 1000,
        z: 0,
        life: 0,
        NnV: 0.1,
        vmN: 20000
    }, {
        mMwWV: {
            w: 0,
            mVn: 0
        },
        Vwn: 4,
        VwwwM: 0,
        vVVMM: 0,
        MmNvn: 0,
        WmV: 0,
        VMN: 1,
        nnwNN: 2,
        remove: 1000,
        z: 0,
        life: 0,
        NnV: 0.2,
        vmN: -1
    }, {
        mMwWV: {
            w: 0,
            mVn: 0
        },
        VwwwM: 0,
        vVVMM: 0,
        MmNvn: 0,
        WmV: 0,
        VMN: 0,
        life: 0,
        remove: 1000,
        z: 0,
        NnV: 0.2,
        nnwNN: 1,
        vmN: -1
    }, {
        mMwWV: {
            w: 0,
            mVn: 0
        },
        VwwwM: 0,
        vVVMM: 0,
        MmNvn: 0,
        WmV: 0,
        VMN: 0,
        life: 0,
        remove: 1000,
        z: 0,
        NnV: 0.2,
        nnwNN: 1,
        vmN: -1
    }, {
        mMwWV: {
            w: 0,
            mVn: 0
        },
        VwwwM: 0,
        vVVMM: 0,
        MmNvn: 0,
        WmV: 0,
        VMN: 0,
        life: 0,
        remove: 1000,
        z: 0,
        NnV: 0.2,
        nnwNN: 1,
        vmN: -1
    }, {
        mMwWV: {
            w: 0,
            mVn: 0
        },
        VwwwM: 0,
        vVVMM: 0,
        MmNvn: 0,
        WmV: 0,
        VMN: 0,
        life: 0,
        remove: 1000,
        z: 0,
        NnV: 0.2,
        nnwNN: 1,
        vmN: -1
    }, {
        VMN: 0.7,
        life: 0,
        z: 0,
        NnV: 0.2
    }, {
        mMwWV: {
            w: 24,
            mVn: 24
        },
        Vwn: 38,
        MMWMv: 40,
        VwwwM: 36,
        vVVMM: 36,
        MmNvn: 36,
        WmV: 36,
        VMN: 0,
        nnwNN: 0,
        remove: 1000,
        z: 1,
        life: 0,
        NnV: 0.15,
        vmN: 1800000
    }, {
        mMwWV: {
            w: 24,
            mVn: 24
        },
        Vwn: 38,
        MMWMv: 40,
        VwwwM: 36,
        vVVMM: 36,
        MmNvn: 36,
        WmV: 36,
        VMN: 0,
        nnwNN: 0,
        remove: 1000,
        z: 1,
        life: 0,
        NnV: 0.15,
        vmN: 1800000
    }, {
        mMwWV: {
            w: 24,
            mVn: 24
        },
        Vwn: 38,
        MMWMv: 40,
        VwwwM: 36,
        vVVMM: 36,
        MmNvn: 36,
        WmV: 36,
        VMN: 0,
        nnwNN: 0,
        remove: 1000,
        z: 1,
        life: 0,
        NnV: 0.15,
        vmN: 1800000
    }, {
        mMwWV: {
            w: 24,
            mVn: 24
        },
        Vwn: 38,
        MMWMv: 40,
        VwwwM: 36,
        vVVMM: 36,
        MmNvn: 36,
        WmV: 36,
        VMN: 0,
        nnwNN: 0,
        remove: 1000,
        z: 1,
        life: 0,
        NnV: 0.15,
        vmN: 1800000
    }, {
        mMwWV: {
            w: 24,
            mVn: 24
        },
        Vmwvm: [{
            src: "img/day-explosion0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-explosion1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-explosion2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-explosion3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-explosion4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-explosion5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-explosion6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-explosion7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-explosion8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-explosion9.png",
            n: {
                v: 0
            }
        }],
        Vwn: 38,
        MMWMv: 40,
        VwwwM: 36,
        vVVMM: 36,
        MmNvn: 36,
        WmV: 36,
        VMN: 0,
        nnwNN: 2,
        remove: 0,
        z: 1,
        life: 64000,
        NnV: 0.15,
        vmN: 1500
    }, {
        mMwWV: {
            w: 24,
            mVn: 24
        },
        Vwn: 38,
        MMWMv: 40,
        VwwwM: 36,
        vVVMM: 36,
        MmNvn: 36,
        WmV: 36,
        VMN: 0.23,
        vnwVW: 0.35,
        wmMvM: 0.08,
        nVnWm: 0.05,
        nnwNN: 0,
        remove: 1000,
        z: 0,
        life: 0,
        VwwmM: 8,
        NnV: 0.15,
        vmN: -1
    }];

    function mwnWW(mv) {
        this.wWW = 0;
        this.nvW = 0;
        this[networkMappings[109]] = 0;
        this[networkMappings[217]] = mv;
        this.wVm = 0;
        this[networkMappings[142]] = 0;
        this.WWVNm = 0;
        this.nnVVV = 0;
        this.vvvwv = 0;
        this[networkMappings[155]] = 0;
        this.Nvm = 0;
        this.mmN = 0;
        this[networkMappings[77]] = 0;
        this[networkMappings[120]] = 0;
        this[networkMappings[158]] = 0;
        this[networkMappings[41]] = 0;
        this.nwV = -1;
        this.nWv = 0;
        this.mNVWM = 0;
        this.vnmvv = 0;
        this.vM = 0;
        this.wm = 0;
        this.VMN = 0;
        this[networkMappings[170]] = 0;
        this.MnN = 0;
        this.nMM = 0;
        this.wWM = 0;
        this.Mvw = 0;
        this.wnn = 0;
        this.wWN = 0;
        this.vNn = 0;
        this.NvV = 0;
        this.wM = 0;
        this.mNn = 0;
        this.wMM = [];
        this.MW = null;
        for (var vM = 0; vM < 10; vM++) this.wMM[networkMappings[140]]({
            c: 0,
            W: 0,
            wWWnW: 0,
            nNmmn: 0,
            VNm: 0,
            r: 0
        });
        this.NnV = 0.1;
    };;

    function VMNWV(wW, nvW, wWW, index, mv, vn, WM, nwV, nWv, Nvm, MN, NWn) {
        wW.nvW = nvW;
        wW.wWW = wWW;
        wW[networkMappings[109]] = index;
        wW.WWVNm = wvm.mvVnv(wW[networkMappings[142]], ((MN * 2) * Math[networkMappings[179]]) / 255);
        wW[networkMappings[155]] = NWn;
        wW.nwV = nwV;
        wW.nWv = nWv;
        wW.Nvm = Nvm;
        if (wW[networkMappings[170]] === 0) {
            var element = mnW[mv];
            wW.VMN = element.VMN;
            wW[networkMappings[142]] = wW.WWVNm;
            wW[networkMappings[77]] = vn;
            wW[networkMappings[120]] = WM;
            wW[networkMappings[254]] = element[networkMappings[254]];
            wW.NnV = element.NnV;
            wW[networkMappings[158]] = vn;
            wW[networkMappings[41]] = WM;
            wW.vM = Math[networkMappings[68]](WM / VN.mVV);
            wW.wm = Math[networkMappings[68]](vn / VN.mVV);
            wW.nMM = 0;
            wW.wWM = 0;
            wW.Mvw = 0;
            wW.MVw = 0;
            wW.wnn = 0;
            wW.wWN = 0;
            wW.vNn = 0;
            wW.wM = 0;
            wW.mNn = 0;
            wW.NvV = 0;
            wW.mmN = 0;
            wW.wVm = 0;
            wW.MW = null;
            var nnM = element.nnM;
            if (nnM !== undefined) nnM(wW);
        }
        var MN = MNM[networkMappings[142]](wW[networkMappings[158]], wW[networkMappings[41]], nwV, nWv);
        wW.nnVVV = Math[networkMappings[218]](MN);
        wW.vvvwv = Math[networkMappings[147]](MN);
        wW[networkMappings[170]] = 1;
    };;
    var vNnWv = (function() {
        function nWvMm(m) {
            if (m[networkMappings[188]] === m[networkMappings[85]]) {
                m.vwV[m[networkMappings[85]]] = m[networkMappings[85]];
                m.WmmNm[m[networkMappings[85]]] = m[networkMappings[85]];
                m[networkMappings[85]] ++;
            }
            return m.vwV[m[networkMappings[188]] ++];
        };;

        function MvVmN(m) {
            if (m[networkMappings[188]] < m[networkMappings[85]]) return m.vwV[m[networkMappings[188]] ++];
            return -1;
        };;

        function MVWwn(m, wnMnN) {
            m[networkMappings[188]] --;
            var nWVMw = m.vwV[m[networkMappings[188]]];
            m.vwV[m[networkMappings[188]]] = m.vwV[wnMnN];
            m.vwV[wnMnN] = nWVMw;
        };;

        function wVwnW(m, wVmWW) {
            m[networkMappings[188]] --;
            var nWVMw = m.vwV[m[networkMappings[188]]];
            var vWWnn = m.WmmNm[wVmWW];
            m.vwV[m[networkMappings[188]]] = wVmWW;
            m.vwV[vWWnn] = nWVMw;
            m.WmmNm[nWVMw] = vWWnn;
            m.WmmNm[wVmWW] = m[networkMappings[188]];
        };;

        function vNnWv(wmV) {
            this[networkMappings[85]] = wmV;
            this[networkMappings[188]] = 0;
            this.vwV = [];
            this.WmmNm = [];
            for (var vM = 0; vM < wmV; vM++) {
                this.vwV[vM] = vM;
                this.WmmNm[vM] = vM;
            }
        };;

        function vvvVW(wmV) {
            var vmw = new vNnWv(wmV);
            var vwV = vmw.vwV;
            var NvvmW = new Array(wmV);
            this[networkMappings[231]] = 0;
            this[networkMappings[203]] = function mnwvv() {
                vmw[networkMappings[188]] = 0;
                this[networkMappings[231]] = 0;
            };
            this[networkMappings[92]] = function nNWWW(WWm) {
                NvvmW[nWvMm(vmw)] = WWm;
                this[networkMappings[231]] ++;
            };
            this[networkMappings[54]] = function WNN(WWm) {
                for (var vM = 0; vM < this[networkMappings[231]]; vM++) {
                    if (NvvmW[vwV[vM]] === WWm) {
                        MVWwn(vmw, vM);
                        this[networkMappings[231]] --;
                        return;
                    }
                }
            };
            this[networkMappings[57]] = function wnN(vM) {
                return NvvmW[vwV[vM]];
            };
        };;

        function mNmMV(wmV) {
            var vmw = new vNnWv(wmV);
            var vwV = vmw.vwV;
            var NvvmW = new Array(wmV);
            var vM = 0;
            var mWvNV = [];
            for (vM = 0; vM < wmV; vM++) mWvNV[vM] = -1;
            this[networkMappings[231]] = 0;
            this[networkMappings[203]] = function mnwvv() {
                vmw[networkMappings[188]] = 0;
                this[networkMappings[231]] = 0;
            };
            this[networkMappings[92]] = function nNWWW(WWm) {
                var nM = nWvMm(vmw);
                NvvmW[nM] = WWm;
                mWvNV[WWm] = vmw[networkMappings[188]] - 1;
                this[networkMappings[231]] ++;
            };
            this[networkMappings[54]] = function WNN(WWm) {
                var nM = mWvNV[WWm];
                if (nM === -1) return;
                mWvNV[WWm] = -1;
                MVWwn(vmw, nM);
                this[networkMappings[231]] --;
                if (this[networkMappings[231]] > 0) mWvNV[NvvmW[vwV[nM]]] = nM;
            };
            this[networkMappings[57]] = function wnN(vM) {
                return NvvmW[vwV[vM]];
            };
        };;
        return {
            vNnWv: vNnWv,
            mNmMV: mNmMV,
            vvvVW: vvvVW,
            MvVmN: MvVmN,
            nWvMm: nWvMm,
            wVwnW: wVwnW,
            MVWwn: MVWwn
        };
    })();
    var wWMNn = (function() {
        function WMnnM(wNWNw) {
            var nNmmn = 2147483648;
            var vVw = 1103515245;
            var Mmm = 12345;
            var NWn = wNWNw ? wNWNw : Math[networkMappings[68]](Math[networkMappings[211]]() * (nNmmn - 1));
            this.nnM = function(wNWNw) {
                NWn = wNWNw ? wNWNw : Math[networkMappings[68]](Math[networkMappings[211]]() * (nNmmn - 1));
            };
            this[networkMappings[57]] = function() {
                NWn = ((vVw * NWn) + Mmm) % nNmmn;
                return NWn / nNmmn;
            };
        };;
        return {
            WMnnM: WMnnM
        };
    })();
    var vVVMm = (function() {
        function mNMnV(Nnv, vNNmM, vnwvm, mmv, mnMMw) {
            var mWVwW = mmv;
            var MNMNM = Nnv[vnwvm];
            var wnWWm = Nnv[vnwvm];
            Nnv[vnwvm] = Nnv[mnMMw];
            Nnv[mnMMw] = wnWWm;
            for (var nvmmm = mmv; nvmmm < mnMMw; nvmmm++) {
                if (vNNmM(Nnv[nvmmm], MNMNM) <= 0) {
                    var wnWWm = Nnv[nvmmm];
                    Nnv[nvmmm] = Nnv[mWVwW];
                    Nnv[mWVwW] = wnWWm;
                    mWVwW++;
                }
            }
            var wnWWm = Nnv[mnMMw];
            Nnv[mnMMw] = Nnv[mWVwW];
            Nnv[mWVwW] = wnWWm;
            return mWVwW;
        };;

        function vMNmw(Nnv, vNNmM, mmv, mnMMw) {
            var vnwvm = 0;
            if (mmv < mnMMw) {
                vnwvm = mmv + Math[networkMappings[191]]((mnMMw - mmv) * 0.5);
                wnWWW = mNMnV(Nnv, vNNmM, vnwvm, mmv, mnMMw);
                vMNmw(Nnv, vNNmM, mmv, wnWWW - 1);
                vMNmw(Nnv, vNNmM, wnWWW + 1, mnMMw);
            }
        };;

        function mNVnm(Nnv, vNNmM) {
            try {
                vMNmw(Nnv, vNNmM, 0, Nnv[networkMappings[231]] - 1);
            } catch (NNV) {
                Nnv[networkMappings[159]](vNNmM);
            }
        };;
        return {
            sort: mNVnm
        };
    })();
    var NNNvm = (function() {
        var nvV = 0;
        var mMNnn = {
            wNmVm: [nvV++, "en"],
            NWVnn: [nvV++, "ru"],
            NwNwN: [nvV++, "sp"],
            mNnNn: [nvV++, "fr"],
            VVnVn: [nvV++, "de"],
            wvVVn: [nvV++, "it"],
            MmmVV: [nvV++, "pl"],
            MmMww: [nvV++, "pt"]
        };
        var mNM = mMNnn.wNmVm;
        var VVNNm = mNM[0];
        var VMmmV = [];
        for (var vM = 0; vM < nvV; vM++) VMmmV[vM] = [];
        var VnmWM = mMNnn.wNmVm;

        function wMMwv(vmNnM) {
            mNM = vmNnM;
            NNNvm[networkMappings[134]] = mNM;
            VVNNm = mNM[0];
            localStorage[networkMappings[76]]("lang", JSON[networkMappings[185]](mNM));
        };;

        function wnN(index) {
            if ((VMmmV[VVNNm] === undefined) || (VMmmV[VVNNm][index] === undefined)) return VMmmV[VnmWM[0]][index];
            else return VMmmV[VVNNm][index];
        };;

        function NVnvV(index) {
            var status;
            if ((VMmmV[VVNNm] === undefined) || (VMmmV[VVNNm][index] === undefined)) MNwwv = VMmmV[VnmWM][index];
            else MNwwv = VMmmV[VVNNm][index];
            for (var vM = 1; vM < arguments[networkMappings[231]]; vM++) MNwwv[0] = MNwwv[0][networkMappings[221]]("%d", arguments[vM]);
            return MNwwv;
        };;

        function wvWNN(vWMwV) {
            for (var vM = 0; vM < vWMwV[networkMappings[231]]; vM++) VMmmV[VVNNm][vM] = [vWMwV[vM]];
        };;

        function nMVvm(vmNnM, callback) {
            wMMwv(vmNnM);
            if (VMmmV[vmNnM[0]][networkMappings[231]] !== 0) {
                if (callback !== undefined) callback();
                return;
            }
            var nvNWN = new XMLHttpRequest;
            nvNWN[networkMappings[103]]("GET", ("json/lang" + vmNnM[1]) + ".json", true);
            nvNWN[networkMappings[204]] = function() {
                if ((nvNWN[networkMappings[208]] === 4) && (this[networkMappings[168]] === 200)) {
                    wvWNN(JSON[networkMappings[20]](this.VvnmV));
                    if (callback !== undefined) callback();
                }
            };
            nvNWN[networkMappings[23]]();
        };;

        function nnM(vWMwV, Nwmvn, callback) {
            if (Nwmvn !== undefined) VnmWM = Nwmvn;
            if (vWMwV !== undefined) {
                var MMm = VVNNm;
                VVNNm = VnmWM[0];
                wvWNN(vWMwV);
                VVNNm = MMm;
            }
            var MWVmm = localStorage[networkMappings[88]]("lang");
            if (MWVmm === null) {
                var NWNMN = navigator[networkMappings[245]] || navigator[networkMappings[238]];
                switch (NWNMN) {
                    case "ru":
                        mNM = mMNnn.NWVnn;
                        break;
                    case "en":
                        mNM = mMNnn.wNmVm;
                        break;
                    case "es":
                        mNM = mMNnn.NwNwN;
                        break;
                    case "fr":
                        mNM = mMNnn.mNnNn;
                        break;
                    case "it":
                        mNM = mMNnn.wvVVn;
                        break;
                    case "pl":
                        mNM = mMNnn.MmmVV;
                        break;
                    case "de":
                        mNM = mMNnn.VVnVn;
                        break;
                    case "pt":
                        mNM = mMNnn.MmMww;
                        break;
                }
            } else mNM = JSON[networkMappings[20]](MWVmm);
            nMVvm(mNM, callback);
        };;
        return {
            languages: mMNnn,
            lang: mNM,
            get: wnN,
            NVnvV: NVnvV,
            nnM: nnM,
            nMVvm: nMVvm
        };
    })();
    var VVW = (function() {
        var NmmNN = "0";
        var NvnNN = "1";
        var nmm = 0;
        var nvnVn = 1;
        var MMn = 65;
        var Wmv = 68;
        var NVW = 87;
        var wnw = 83;
        var nVmWV = 37;
        var mNnmV = 39;
        var MWWwV = 38;
        var mNWww = 40;
        var mVvmW = 16;
        var VVm = (new Array(255))[networkMappings[202]](nmm);
        var WMnNn = null;

        function mvMvM() {
            if (WMnNn === NvnNN) return 1;
            else return 0;
        };;

        function MMwWw() {
            if (WMnNn === NmmNN) return 1;
            else return 0;
        };;

        function NvWwV() {
            MMn = 81;
            Wmv = 68;
            NVW = 90;
            wnw = 83;
            localStorage[networkMappings[76]]("keyboardMap", NvnNN);
            WMnNn = NvnNN;
        };;

        function NwWvW() {
            MMn = 65;
            Wmv = 68;
            NVW = 87;
            wnw = 83;
            localStorage[networkMappings[76]]("keyboardMap", NmmNN);
            WMnNn = NmmNN;
        };;

        function mMMwM(mV) {
            var MNN = Math[networkMappings[250]](mV[networkMappings[104]] || mV[networkMappings[106]], 255);
            VVm[MNN] = nmm;
        };;

        function nwNNV(mV) {
            var MNN = Math[networkMappings[250]](mV[networkMappings[104]] || mV[networkMappings[106]], 255);
            if ((MNN === MMn) || (MNN === nVmWV)) mwmmm();
            else if ((MNN === NVW) || (MNN === MWWwV)) mmWmm();
            else if ((MNN === wnw) || (MNN === mNWww)) wVMMN();
            else if ((MNN === Wmv) || (MNN === mNnmV)) NvVwM();
            VVm[MNN] = nvnVn;
            return MNN;
        };;

        function mwmmm() {
            VVm[Wmv] = nmm;
            VVm[mNnmV] = nmm;
        };;

        function NvVwM() {
            VVm[MMn] = nmm;
            VVm[nVmWV] = nmm;
        };;

        function wVMMN() {
            VVm[NVW] = nmm;
            VVm[MWWwV] = nmm;
        };;

        function mmWmm() {
            VVm[wnw] = nmm;
            VVm[mNWww] = nmm;
        };;

        function nVMMM() {
            return VVm[MMn] || VVm[nVmWV];
        };;

        function WVNWW() {
            return VVm[Wmv] || VVm[mNnmV];
        };;

        function nMNWV() {
            return VVm[wnw] || VVm[mNWww];
        };;

        function MNMmM() {
            return VVm[NVW] || VVm[MWWwV];
        };;

        function vvNMm() {
            return VVm[mVvmW];
        };;

        function NVWwn(Wvmnm) {
            return VVm[Wvmnm];
        };;

        function WNwNn() {
            VVm[Wmv] = nmm;
            VVm[mNnmV] = nmm;
            VVm[MMn] = nmm;
            VVm[nVmWV] = nmm;
            VVm[NVW] = nmm;
            VVm[MWWwV] = nmm;
            VVm[wnw] = nmm;
            VVm[mNWww] = nmm;
        };;

        function VwWVV() {
            this[networkMappings[106]] = 0;
            this[networkMappings[104]] = 0;
            this[networkMappings[21]] = false;
            this[networkMappings[172]] = false;
            this[networkMappings[180]] = function() {};
        };;
        WMnNn = localStorage[networkMappings[88]]("keyboardMap");
        if (WMnNn === null) {
            var mwMvm = navigator[networkMappings[245]] || navigator[networkMappings[238]];
            if ((mwMvm === "fr") || (mwMvm === "fr-FR")) NvWwV();
            else NwWvW();
        } else if (WMnNn === NvnNN) NvWwV();
        else NwWvW();
        return {
            NvWwV: NvWwV,
            NwWvW: NwWvW,
            mMMwM: mMMwM,
            nwNNV: nwNNV,
            WNwNn: WNwNn,
            nVMMM: nVMMM,
            WVNWW: WVNWW,
            nMNWV: nMNWV,
            MNMmM: MNMmM,
            mvMvM: mvMvM,
            MMwWw: MMwWw,
            vvNMm: vvNMm,
            NVWwn: NVWwn,
            VwWVV: VwWVV
        };
    })();
    var MM = (function() {
        var WNMMV = 30000;
        var wVwnV = 300;
        NV[networkMappings[22]] = NV[networkMappings[22]] || NV[networkMappings[220]];
        var vnmWw = new AudioContext;
        if (!vnmWw[networkMappings[182]]) vnmWw[networkMappings[182]] = vnmWw.MmMVV;
        NvVNm = null;
        Nwvvw = null;
        WNmVW = [];
        mWmnm = null;
        wnNvm = null;

        function MmwVm() {
            return mWmnm;
        };;

        function vvVWV() {
            NvVNm = vnmWw[networkMappings[64]]();
            Nwvvw = new MediaRecorder(NvVNm[networkMappings[39]]);
            Nwvvw[networkMappings[93]] = function(mV) {
                WNmVW[networkMappings[140]](mV[networkMappings[240]]);
            };
            Nwvvw[networkMappings[6]] = function(mV) {
                var mmNVm = JSON[networkMappings[20]]('{ "type" : "audio/ogg; codecs=opus" }');
                wnNvm = new Blob(WNmVW, mmNVm);
                mWmnm = URL[networkMappings[153]](wnNvm);
            };
        };;

        function MMMVn() {
            wnNvm = null;
            mWmnm = null;
            WNmVW = [];
            Nwvvw[networkMappings[19]]();
        };;

        function mWvwm() {
            Nwvvw[networkMappings[47]]();
        };;
        var VMm = {
            nvWnM: 1,
            nvVNM: 1
        };
        try {
            var Vn = localStorage[networkMappings[88]]("isFx");
            if (Vn !== null) VMm.nvWnM = Number(Vn);
            else if (wVw === 1) VMm.nvWnM = 0;
            Vn = localStorage[networkMappings[88]]("isAudio");
            if (Vn !== null) VMm.nvVNM = Number(Vn);
            else if (wVw === 1) VMm.nvVNM = 0;
        } catch (NNV) {
            if (wVw === 1) {
                VMm.nvWnM = 0;
                VMm.nvVNM = 0;
            }
        }

        function VVWnW(Vn) {
            if ((Vn === 0) && (VMm.nvVNM !== Vn)) {
                for (var nmNwW in MM.NVw) {
                    var NVw = MM.NVw[nmNwW];
                    nNmnV(NVw);
                }
            }
            VMm.nvVNM = Vn;
            localStorage[networkMappings[76]]("isAudio", "" + Vn);
        };;

        function WWMnM(Vn) {
            if ((Vn === 0) && (VMm.nvWnM !== Vn)) {
                for (var Vmvwn in MM.Mn) {
                    var Mn = MM.Mn[Vmvwn];
                    nNmnV(Mn);
                }
            }
            VMm.nvWnM = Vn;
            localStorage[networkMappings[76]]("isFx", "" + Vn);
        };;

        function nmM(Mn, NwM, VNv, NWNMM) {
            if (VNv > wVwnV) return;
            NwM = (1 - (VNv / wVwnV)) * NwM;
            Mn[networkMappings[194]] = NwM;
            WwwMm(Mn, 0, NWNMM);
            Mn.Wwv = 0;
        };;

        function NmW(nww, NwM, wvMWw, Mn) {
            this[networkMappings[246]] = nww;
            this[networkMappings[5]] = null;
            this[networkMappings[232]] = null;
            this.v = 0;
            this.Wwv = 0;
            this.Mnmvw = null;
            this[networkMappings[13]] = wvMWw;
            this[networkMappings[194]] = 1;
            this.mnnnn = -1;
            if (NwM !== undefined) this[networkMappings[194]] = NwM;
            this.MwWvw = -1;
            this.Mn = 0;
            if (Mn === 1) this.Mn = 1;
            this.vMnwm = 0;
            this.vVmWW = 0;
            this.VWMNW = 0;
            this[networkMappings[19]] = 0;
            this.wVMVW = 0;
        };;

        function MnMmn(nWw, Vn) {
            nWw.Mnmvw[networkMappings[122]][networkMappings[230]] = Vn;
            nWw[networkMappings[194]] = Vn;
        };;

        function nNmnV(nWw) {
            if (nWw.Wwv === 1) {
                nWw.Wwv = 0;
                nWw.mnnnn = -1;
                nWw[networkMappings[232]][networkMappings[47]]();
                console[networkMappings[31]]("Stop", nWw[networkMappings[246]]);
            }
        };;

        function mWNvw(nWw, vNN, mWw) {
            if (nWw.MwWvw !== -1) nWw[networkMappings[194]] = nWw.MwWvw;
            nWw.vMnwm = 0;
            nWw.vVmWW = vNN;
            nWw.VWMNW = mWw;
            console[networkMappings[31]]("FADE", nWw[networkMappings[246]]);
        };;

        function WwwMm(nWw, vNN, NWNMM) {
            if (nWw.Mn === 0) {
                if (VMm.nvVNM === 0) return;
            } else if (VMm.nvWnM === 0) return;
            if (nWw.Wwv === 1) {
                if (((nWw.mnnnn !== -1) && (nWw.vVmWW === 0)) && ((VvM - nWw.mnnnn) > WNMMV)) {
                    nNmnV(nWw);
                    return;
                }
                if (nWw.vVmWW > 0) {
                    nWw.vMnwm = Math[networkMappings[250]](nWw.vMnwm + WW, nWw.vVmWW);
                    var NwM = Math[networkMappings[4]](0, Math[networkMappings[250]](1, nWw[networkMappings[194]] + (Math[networkMappings[218]](((1 - (nWw.vMnwm / nWw.vVmWW)) * 0.5) * Math[networkMappings[179]]) * nWw.VWMNW)));
                    nWw.Mnmvw[networkMappings[122]][networkMappings[230]] = NwM;
                    nWw.MwWvw = NwM;
                    if (nWw.vMnwm === nWw.vVmWW) {
                        nWw[networkMappings[194]] = NwM;
                        nWw.MwWvw = -1;
                        nWw.vVmWW = 0;
                        nWw.vMnwm = 0;
                        if (nWw[networkMappings[194]] === 0) nWw.mnnnn = VvM;
                        else nWw.mnnnn = -1;
                    }
                }
                return;
            }
            if (((nWw.vVmWW === 0) && (nWw.vMnwm === 0)) && (nWw[networkMappings[194]] === 0)) return;
            if (nWw.v !== 1) {
                NwN(nWw);
                return;
            }
            var mvW = vnmWw[networkMappings[70]]();
            var Mnmvw = vnmWw[networkMappings[182]]();
            nWw[networkMappings[232]] = mvW;
            nWw.Mnmvw = Mnmvw;
            MnMmn(nWw, nWw[networkMappings[194]]);
            mvW[networkMappings[5]] = nWw[networkMappings[5]];
            mvW[networkMappings[48]](Mnmvw);
            if (NvVNm !== null) mvW[networkMappings[48]](NvVNm);
            Mnmvw[networkMappings[48]](vnmWw[networkMappings[156]]);
            if (nWw[networkMappings[13]] === true) mvW[networkMappings[13]] = nWw[networkMappings[13]];
            if (!mvW[networkMappings[47]]) mvW[networkMappings[47]] = mvW.NVwwv;
            if (!mvW[networkMappings[19]]) mvW[networkMappings[19]] = mvW.vwNVV;
            nWw[networkMappings[232]][networkMappings[19]](((NWNMM === undefined) ? 0 : NWNMM) + vnmWw[networkMappings[154]], (vNN === undefined) ? 0 : vNN);
            nWw.Wwv = 1;
            nWw[networkMappings[19]] = VvM;
            console[networkMappings[31]]("Start", nWw[networkMappings[246]], nWw.vMnwm, nWw.vVmWW, vNN);
        };;

        function NwN(nWw) {
            if (nWw.v === 2) return;
            console[networkMappings[31]]("LOAD", nWw);
            var VWmvN = new XMLHttpRequest;
            VWmvN[networkMappings[103]]('GET', nWw[networkMappings[246]], true);
            VWmvN[networkMappings[243]] = 'arraybuffer';
            VWmvN[networkMappings[226]] = function() {
                vnmWw[networkMappings[11]](VWmvN[networkMappings[177]], function(NNvwv) {
                    nWw[networkMappings[5]] = NNvwv;
                    nWw.v = 1;
                    nWw.wVMVW = NNvwv[networkMappings[135]] * 1000;
                });
            };
            nWw.v = 2;
            VWmvN[networkMappings[23]]();
            return;
        };;
        return {
            NmW: NmW,
            NwN: NwN,
            WwwMm: WwwMm,
            nmM: nmM,
            nNmnV: nNmnV,
            mWNvw: mWNvw,
            MnMmn: MnMmn,
            options: VMm,
            VVWnW: VVWnW,
            WWMnM: WWMnM,
            vvVWV: vvVWV,
            MMMVn: MMMVn,
            mWvwm: mWvwm,
            MmwVm: MmwVm,
            NVw: {},
            Mn: {}
        };
    })();
    var nMv = (function() {
        var WVWmw;

        function nnM() {
            WVWmw = textFormatter.nwn(423, 276, "img/loading1.png");
        };;
        var wVM;
        var WNW = new WNw.vVmwN;
        var WVN = new VVW.VwWVV;
        var wMm = 800;
        var wwV = 0;
        var Mnwmn = function(VNm) {
            return wvm.Mnm.WVVwM(VNm, wvm.Mnm.mVnnv, 0.05);
        };
        var Wnm = 800;
        var WVV = 0;
        var WmvwW = function(VNm) {
            return wvm.Mnm.WVVwM(VNm, wvm.Mnm.VmV, 0.05);
        };
        var NnM = 0;
        var mMV = 0;
        var VMv = undefined;

        function Wwv() {
            Wn.VWwWv(nMv);
            mMV = Wnm;
            NnM = Wnm;
            VMv = WmvwW;
            WVV = 1;
            verifyConnectionState();
        };;

        function mnV(nNM) {
            wVM = nNM;
            mMV = wMm;
            NnM = wMm;
            VMv = Mnwmn;
            wwV = 1;
        };;

        function verifyConnectionState() {
            var nMw = 0;
            var wVW = 0;
            if (mMV > 0) {
                wVW = mMn;
                var NVM = VMv(1 - (mMV / NnM));
                if (NVM === 1) mMV = 0;
                if (wwV === 1) NVM *= -1;
                else NVM = 1 - Math[networkMappings[99]](NVM);
                nMw *= NVM;
                wVW *= NVM;
            }
            WVWmw.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](211 * Vv)) + nMw;
            WVWmw.nM[networkMappings[120]] = Math[networkMappings[4]](0, NMv - Math[networkMappings[68]](138 * Vv)) + wVW;
        };;

        function MW() {
            if (NvWVm() === 0) return;
            value[networkMappings[113]](0, 0, Vmn, mMn);
            WVWmw.MW();
        };;

        function NvWVm() {
            if (wwV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    wwV = 0;
                    wVM.Wwv();
                    return 0;
                }
                mMV -= WW;
            } else if (WVV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    WVV = 0;
                    nMv.WMW = function(formattedText) {
                        VnMvN = location[networkMappings[72]];
                        formattedText = formattedText[networkMappings[221]](/[\[]/, "\[")[networkMappings[221]](/[\]]/, "\]");
                        var NvwMM = ("[\?&]" + formattedText) + "=([^&#]*)";
                        var mwmwn = new RegExp(NvwMM);
                        var MNVWW = mwmwn[networkMappings[86]](VnMvN);
                        return (MNVWW === null) ? null : MNVWW[1];
                    };

                    function wmWVm() {
                        var wWv = network.wWv;
                        adminSettings.regions = [];
                        adminSettings.MWm = [];
                        adminSettings.mwVWw = [];
                        var regions = [];
                        var wNVNW = [];
                        var vmMnW = 0;
                        var mmWww = '<select id="servers"><option value="auto">Auto Select Server</option>';
                        for (var vM = 0; vM < wWv[networkMappings[231]]; vM++) {
                            var VnVVn = wWv[vM][4];
                            var nnVNM = wWv[vM][5];
                            var Wvv = wWv[vM][6];
                            vmMnW += nnVNM;
                            if (Wvv == "ghoul") {
                                adminSettings.mwVWw[networkMappings[140]](vM);
                                continue;
                            }
                            if (Wvv == "br") {
                                VnVVn = VnVVn[networkMappings[221]]("BR", "");
                                if (adminSettings.regions[VnVVn] === undefined) adminSettings.regions[VnVVn] = [];
                                adminSettings.regions[VnVVn][networkMappings[140]](vM);
                                continue;
                            }
                            for (var wm = 0; wm < regions[networkMappings[231]]; wm++) {
                                if (regions[wm] === VnVVn) {
                                    wNVNW[wm] += nnVNM;
                                    wm = -1;
                                    break;
                                }
                            }
                            if (wm !== -1) {
                                regions[networkMappings[140]](VnVVn);
                                wNVNW[networkMappings[140]](nnVNM);
                            }
                        }
                        var Vvvnn = 1;
                        var nVwmW = 0;
                        for (vM = 0; vM < regions[networkMappings[231]]; vM++) {
                            VnVVn = regions[vM];
                            mmWww += ((("<option disabled>" + regions[vM]) + " - ") + wNVNW[vM]) + " players</option>";
                            Vvvnn++;
                            var index = 1;
                            for (wm = 0; wm < wWv[networkMappings[231]]; wm++) {
                                if ((wWv[wm][4] === VnVVn) && (wWv[wm][6] === "survival")) {
                                    mmWww += ((((((('<option value="' + wWv[wm][0]) + '">') + regions[vM]) + " ") + (index++)) + " - ") + wWv[wm][5]) + " players</option>";
                                    if (network.vMMMV === wm) nVwmW = Vvvnn;
                                    Vvvnn++;
                                }
                            }
                        }
                        adminSettings.NwMvw = '<select id="servers"><option value="auto">Auto Select Server</option>';
                        for (var vM in adminSettings.regions) {
                            var Vvvnn = 0;
                            for (var MNN = 0; MNN < adminSettings.regions[vM][networkMappings[231]]; MNN++) Vvvnn += wWv[adminSettings.regions[vM][MNN]][5];
                        }
                        adminSettings.MWm = adminSettings.MWm[networkMappings[159]](function(vVw, m) {
                            return Number(wWv[m][5]) - Number(wWv[vVw][5]);
                        });
                        adminSettings.wnVVV = '<select id="servers"><option value="auto">Auto Select Server</option>';
                        for (var vM in adminSettings.MWm) {
                            adminSettings.wnVVV += ((((('<option value="' + wWv[adminSettings.MWm[vM]][0]) + '">') + wWv[adminSettings.MWm[vM]][4][networkMappings[221]]("PRIV", "")) + " - ") + wWv[adminSettings.MWm[vM]][5]) + " players</option>";
                        }
                        adminSettings.VwWNm = '<select id="servers"><option value="auto">Auto Select Server</option>';
                        for (var vM in adminSettings.mwVWw) {
                            adminSettings.VwWNm += ((((('<option value="' + wWv[adminSettings.mwVWw[vM]][0]) + '">') + wWv[adminSettings.mwVWw[vM]][4][networkMappings[221]]("GHOUL", "")) + " - ") + wWv[adminSettings.mwVWw[vM]][5]) + " players</option>";
                        }
                        mmWww += ("<option disabled>All servers - " + vmMnW) + " players</option></select>";
                        adminSettings.NwMvw += ("<option disabled>All servers - " + vmMnW) + " players</option></select>";
                        adminSettings.wnVVV += ("<option disabled>All servers - " + vmMnW) + " players</option></select>";
                        adminSettings.VwWNm += ("<option disabled>All servers - " + vmMnW) + " players</option></select>";
                        document[networkMappings[61]]("serverList")[networkMappings[255]] = mmWww;
                        document[networkMappings[61]]("servers")[networkMappings[94]] = 0;
                        if (((nMv.WMW("admin") !== null) || (nMv.WMW("member") !== null)) || (nMv.WMW("moderator") !== null)) {
                            if ((nMv.WMW("admin") !== null) || (nMv.WMW("moderator") !== null)) {
                                game.player.vvMWw = 1;
                                document[networkMappings[61]]("chatInput")[networkMappings[28]] = 1000000;
                            }
                            document[networkMappings[61]]("nickname")[networkMappings[255]] += '<input id="passwordInput" type="password" placeholder="Password" maxLength="16">';
                            var password = localStorage[networkMappings[88]]("password");
                            if (password !== null) document[networkMappings[61]]("passwordInput")[networkMappings[230]] = password;
                        }
                        var port = nMv.WMW("port");
                        var nnN = nMv.WMW("ips");
                        if (nnN !== null) {
                            nnN = nnN[networkMappings[221]](/\./g, '-');
                            var vMMMV = Number(document[networkMappings[61]]("servers")[networkMappings[230]]);
                            network.wWv[vMMMV][0] = nnN;
                            network.wWv[vMMMV][1] = nnN + ".devast.io";
                            network.wWv[vMMMV][2] = (port === null) ? "443" : port;
                            network.wWv[vMMMV][3] = 1;
                        }
                        nnN = nMv.WMW("ip");
                        if (nnN !== null) {
                            nnN = nnN[networkMappings[221]](/\./g, '-');
                            var vMMMV = Number(document[networkMappings[61]]("servers")[networkMappings[230]]);
                            network.wWv[vMMMV][0] = nnN;
                            network.wWv[vMMMV][1] = nnN;
                            network.wWv[vMMMV][2] = (port === null) ? "8080" : port;
                            network.wWv[vMMMV][3] = 0;
                        }
                    };;
                    network.fetchLobbies(function() {
                        wmWVm();
                        nMv.mnV(adminSettings);
                    });
                    var mwMmW = mnW[WmWMw].Vmwvm;
                    var vwwNv = VMNvn[WmWMw].Vmwvm;
                    for (var vM = 0; vM < mwMmW[networkMappings[231]]; vM++) {
                        mwMmW[vM].n = Wn.Nvw(mwMmW[vM][networkMappings[10]], mwMmW[vM].n);
                        vwwNv[vM].n = Wn.Nvw(vwwNv[vM][networkMappings[10]], vwwNv[vM].n);
                    }
                }
                mMV -= WW;
            }
            return 1;
        };;
        return {
            mnV: mnV,
            nnM: nnM,
            Wwv: Wwv,
            update: verifyConnectionState,
            MW: MW
        };
    })();
    var adminSettings = (function() {
        function mNVvw(wWVmV) {
            console[networkMappings[31]]('Join server');
            adminSettings.WwmWN = NV["Widget"]["isBlocked"];
            try {
                document[networkMappings[61]]("trevda")[networkMappings[109]];
                document[networkMappings[61]]("preroll")[networkMappings[109]];
            } catch (NNV) {
                adminSettings.WwmWN = 1;
            }
            try {
                if (NV["Widget"]) {
                    if (adminSettings.nVN === 1) return;
                    if (adminSettings.mmMNn === 1) {
                        wvW.WVMwN();
                        adminSettings.nVN = 1;

                        function wvMVW() {
                            adminSettings.nVN = 0;
                            adminSettings.mmMNn = -1;
                            adminSettings.mNVvw();
                        };
                        if (adminSettings.WwmWN === 1) NV["Widget"]["createAdPlayer"](wvMVW, wvMVW);
                        else NV["Widget"]["preroll"]();
                        NV["Widget"]["play"] = wvMVW;
                        return;
                    }
                }
            } catch (NNV) {}
            var mwmMN;
            if (adminSettings.Wvv === game.mNm) mwmMN = "survival";
            else if (adminSettings.Wvv === game.mvVVw) mwmMN = "ghoul";
            else if (adminSettings.Wvv === game.vVwwV) mwmMN = "br";
            else {
                throw new Error("Unknown game mode", adminSettings.Wvv)
            }
            var WMVMv = document[networkMappings[61]]("servers")[networkMappings[230]];
            var nww, nwVwN;
            if (WMVMv == "auto") {
                nww = "https://api.rivet.gg/matchmaker/lobbies/find";
                nwVwN = {
                    "game_modes": [mwmMN]
                };
            } else {
                nww = "https://api.rivet.gg/matchmaker/lobbies/join";
                nwVwN = {
                    "lobby_id": WMVMv
                };
            }
            if (network.WwNmM || (network[networkMappings[155]] === network.connectionStates.nnMvm)) {
                console[networkMappings[31]]('Already joining server');
                return;
            }
            network.WwNmM = true;
            let headers = {};
            headers["Accept"] = "application/json";
            headers["Content-Type"] = "application/json";
            if (NV["RIVET_TOKEN"]) {
                headers["Authorization"] = 'Bearer ' + NV["RIVET_TOKEN"];
            }
            NV["fetch"](nww, {
                "method": "POST",
                "headers": headers,
                "body": JSON[networkMappings[185]](nwVwN)
            }).then((response) => {
                if (response[networkMappings[213]]) {
                    return response[networkMappings[35]]();
                } else {
                    throw "Failed to find lobby: " + response[networkMappings[168]]
                }
            }).then((response) => {
                console[networkMappings[31]]("Lobby found", response);
                let lobby = response["lobby"];
                network.vMMMV = network.wWv[networkMappings[36]]((vn) => vn[0] == lobby["lobby_id"]);
                network.mMVMv = lobby;
                network.mwMmn(document[networkMappings[61]]("nicknameInput")[networkMappings[230]], 0, lobby["player"]["token"]);
            }).catch((VwwWW) => {
                console[networkMappings[73]]("Failed to join server", VwwWW);
                alert("Failed to join server");
                network.WwNmM = false;
            });
        };;

        function mNw(NWn) {};;

        function vwWmV() {
            mnV(gameManager);
        };;

        function mNN() {
            vwWmV();
        };;
        var MmW = 0;

        function NWv(mv, vn, WM, MN, NvWvV, mwMVW) {
            var wW = mNv[networkMappings[57]](0, MmW, MmW, mv);
            VMNWV(wW, 0, MmW, MmW, mv, vn, WM, vn, WM, (NvWvV << 5) + (mwMVW << 10), MN, 1);
            MmW++;
        };

        function WwnNw(mv, vn, WM, Wv, NWn, wVm) {
            var wW = mNv[networkMappings[57]](0, MmW, MmW, mv);
            VMNWV(wW, 0, MmW, MmW, mv, vn, WM, vn, WM, (wVm << 7) + (Wv << 5), 0, NWn);
            MmW++;
        };
        var mmw = 0;
        var WvMwW = {
            nWWWW: [{
                formattedText: 'Yuukun',
                button: ["img/yuukun0out.png", "img/yuukun0in.png", "img/yuukun0click.png"],
                VnMvN: "https://www.youtube.com/watch?v=TyI_8Il64d8"
            }, {
                formattedText: 'eXistenZ',
                button: ["img/existenz5out.png", "img/existenz5in.png", "img/existenz5click.png"],
                VnMvN: "https://www.youtube.com/watch?v=Seq6QGBTvNQ"
            }, {
                formattedText: 'Bubble Gum',
                button: ["img/bubblegum2out.png", "img/bubblegum2in.png", "img/bubblegum2click.png"],
                VnMvN: "https://youtu.be/fD7lx9zAQGU"
            }],
            nVnvn: [{
                formattedText: 'Devaster',
                button: ["img/devaster0out.png", "img/devaster0in.png", "img/devaster0click.png"],
                VnMvN: "https://www.youtube.com/watch?v=Jpgx-d3qHzs"
            }]
        };
        var MMMnV = WvMwW.nWWWW;
        var NWNMN = navigator[networkMappings[245]] || navigator[networkMappings[238]];
        if (NWNMN[networkMappings[52]]()[networkMappings[196]]("fr") !== -1) MMMnV = WvMwW.nVnvn;
        var MnMWm = MMMnV[Math[networkMappings[68]](MMMnV[networkMappings[231]] * Math[networkMappings[211]]())];
        var wvnWm = [textFormatter.MwM(MnMWm.formattedText, "'Viga', sans-serif", "#FFFFFF", 30, 150), textFormatter.MwM(MnMWm.formattedText, "'Viga', sans-serif", "#C5B03C", 30, 150), textFormatter.MwM(MnMWm.formattedText, "'Viga', sans-serif", "#9B800D", 30, 150)];
        wvnWm[0].v = 1;
        wvnWm[1].v = 1;
        wvnWm[2].v = 1;
        var MMNMm = textFormatter.vMV(wvnWm[0].vww, wvnWm[0].mnn, undefined, wvnWm);
        var mwvwN = textFormatter.vMV(120, 67, MnMWm[networkMappings[33]]);
        var NVNwV = {
            n: null
        };
        var mVv;
        var mwvVw;
        var nickname;
        var mWwWV;
        var nvmVW;
        var Mwn;
        var nmWvM;
        var nMVNN;
        var NWMvW;
        var wWv;
        var wMVVn;
        var nWWnw;
        var VVwVn;
        var MwWVM;
        var vmNVm;
        var MnMVN;
        var nWvMn;
        var MnVMV;
        var mmMvm;
        var nmNvw;
        var MvmnV;
        var mvn;
        var wNMwM;
        var wwNmM;
        var wMmMN;
        var VNWmV;
        var VVVNm;
        var nMW;
        var vnWwV;
        var VWvmW;
        var nWn;
        var Vvn;
        var vNnVV;
        var nMNvn;
        var VvvWw;
        var nwvMM;
        var WNmMN;
        var WvVWv;
        var nVNmn;
        var VNMMm;
        var MWm;
        var NNnvm;
        var NWwNm;
        var vvWnm;
        var WNmWv;
        var nVVnN;
        var MMMnw;
        var nmmNn;
        var NnVwN;
        var nwVvm;
        var wmVvw;

        function nnM() {
            adminSettings.mNVvw = mNVvw;
            adminSettings.mmMNn = 1;
            adminSettings.nVN = 0;
            try {
                adminSettings.WwmWN = NV["Widget"]["isBlocked"];
            } catch (NNV) {}
            adminSettings.Wvv = 0;
            adminSettings.VVwnn = 1;
            adminSettings.mVVmv = 0;
            adminSettings.vMMMN = 0;
            document[networkMappings[61]]("nicknameInput")[networkMappings[230]] = localStorage[networkMappings[88]]("nickname", nickname);
            MM.mWNvw(MM.NVw[networkMappings[43]], 1000, wvW.MWWmN);
            mNv.MVmWv();
            VN[networkMappings[203]](1);
            MmW = 0;
            NWv(wwWnW, 200, 0, 127, vMv.MmnwV, 3);
            NWv(WwMWM, 400, 100, 127, vMv.NnWWn, 2);
            NWv(WWv, 100, 100, 127, vMv.WWV, 0);
            WwnNw(WwvNn, 900, 500, 0, 33, Mv.nwN);
            WwnNw(MMwVM, 800, 400, 1, 1, Mv.wVv);
            NWv(WWv, 1100, 300, 10, vMv.WWV, 1);
            NWv(WWv, 800, 200, 127, vMv.WWV, 2);
            NWv(WWv, 700, 100, 127, vMv.WWV, 3);
            NWv(WWv, 1200, 0, 127, vMv.WWV, 0);
            NWv(WWv, 1300, 100, 127, vMv.WWV, 4);
            NWv(WWv, 1300, 300, 127, vMv.WWV, 2);
            NWv(WWv, 800, 500, 127, vMv.WWV, 4);
            NWv(WwMWM, 1000, 200, 127, vMv.NnWWn, 0);
            NWv(WWv, 700, 600, 127, vMv.WWV, 0);
            NWv(WWv, 500, 400, 127, vMv.WWV, 2);
            NWv(wwWnW, 500, 700, 127, vMv.MmnwV, 3);
            NWv(wwWnW, 1000, 300, 127, vMv.MmnwV, 4);
            NWv(WWv, 1300, 500, 100, vMv.WWV, 2);
            NWv(WWv, 1200, 700, 127, vMv.WWV, 4);
            NWv(WWv, 1300, 700, 127, vMv.WWV, 0);
            NWv(wwWnW, 800, 600, 127, vMv.MmnwV, 5);
            NWv(WWv, 500, 600, 127, vMv.WWV, 4);
            NWv(wwWnW, 200, 400, 127, vMv.MWmww, 0);
            NWv(wwWnW, 400, 500, 50, vMv.wmwWm, 3);
            NWv(WWv, 100, 400, 190, vMv.WWV, 2);
            NWv(WWv, 100, 500, 190, vMv.WWV, 3);
            NWv(WWv, 100, 600, 127, vMv.WWV, 4);
            NWv(WWv, 0, 500, 127, vMv.WWV, 1);
            NWv(WWv, 200, 300, 50, vMv.WWV, 4);
            NWv(WWv, 400, 200, 10, vMv.WWV, 2);
            NWv(WWv, 500, 200, 10, vMv.WWV, 1);
            NWv(WWv, 100, 800, 10, vMv.WWV, 0);
            NWv(WWv, 400, 800, 10, vMv.WWV, 1);
            NWv(WWv, 700, 800, 10, vMv.WWV, 2);
            NWv(wwWnW, 900, 700, 50, vMv.wmwWm, 4);
            if (wVw === 1) mVv = textFormatter.nwn(650, 312, "img/logo-homepage-mobile2.png");
            else mVv = textFormatter.nwn(650, 312, "img/logo-homepage4.png");
            if (wVw === 1) mwvVw = textFormatter.vMV(0, 0);
            else mwvVw = textFormatter.vMV(94, 40, ["img/more-io-games-out.png", "img/more-io-games-in.png", "img/more-io-games-click.png"]);
            nickname = document[networkMappings[61]]("nickname");
            mWwWV = nickname[networkMappings[174]];
            nvmVW = {
                x: 0,
                y: 0
            };
            nickname[networkMappings[116]]("keyup", function(mV) {
                if ((wwV | WVV) === 1) return;
                if (mV[networkMappings[106]] === 13) mNVvw();
            }, false);
            Mwn = textFormatter.vMV(136, 57, ["img/play-button-out.png", "img/play-button-in.png", "img/play-button-click.png"]);
            nmWvM = document[networkMappings[61]]("terms");
            nMVNN = nmWvM[networkMappings[174]];
            NWMvW = {
                x: 0,
                y: 0
            };
            wWv = document[networkMappings[61]]("serverList");
            wMVVn = wWv[networkMappings[174]];
            nWWnw = {
                x: 0,
                y: 0
            };
            wWv[networkMappings[116]]("mouseover", function(mV) {
                if ((wwV | WVV) === 1) return;
            }, false);
            wWv[networkMappings[116]]("mousedown", function(mV) {
                if ((wwV | WVV) === 1) return;
            }, false);
            wWv[networkMappings[116]]("mouseup", function(mV) {
                if ((wwV | WVV) === 1) return;
            }, false);
            if (wVw === 1) VVwVn = textFormatter.nwn(0, 0);
            else VVwVn = textFormatter.nwn(230, 235, "img/changelogBox.png");
            MwWVM = document[networkMappings[61]]("changelog");
            vmNVm = MwWVM[networkMappings[174]];
            MnMVN = {
                x: 0,
                y: 0
            };
            if (wVw === 1) nWvMn = textFormatter.nwn(0, 0);
            else nWvMn = textFormatter.nwn(230, 355, "img/commandsBox.png");
            MnVMV = document[networkMappings[61]]("howtoplay");
            mmMvm = MnVMV[networkMappings[174]];
            nmNvw = {
                x: 0,
                y: 0
            };
            if (wVw === 1) MvmnV = textFormatter.nwn(0, 0);
            else MvmnV = textFormatter.nwn(123, 55, "img/gameMade.png");
            if (wVw === 1) mvn = textFormatter.vMV(0, 0);
            else mvn = textFormatter.vMV(40, 38, ["img/twitter-button-out.png", "img/twitter-button-in.png", "img/twitter-button-click.png"]);
            if (wVw === 1) wNMwM = textFormatter.vMV(0, 0);
            else wNMwM = textFormatter.vMV(40, 38, ["img/facebook-button-out.png", "img/facebook-button-in.png", "img/facebook-button-click.png"]);
            if (wVw === 1) wwNmM = textFormatter.vMV(0, 0);
            else wwNmM = textFormatter.vMV(40, 38, ["img/youtube-button-out.png", "img/youtube-button-in.png", "img/youtube-button-click.png"]);
            if (wVw === 1) wMmMN = textFormatter.vMV(0, 0);
            else wMmMN = textFormatter.vMV(40, 38, ["img/tiktok-button-out.png", "img/tiktok-button-in.png", "img/tiktok-button-click.png"]);
            if (wVw === 1) VNWmV = textFormatter.vMV(0, 0);
            else VNWmV = textFormatter.vMV(54, 54, ["img/home-reddit-button-out.png", "img/home-reddit-button-in.png", "img/home-reddit-button-click.png"]);
            if (wVw === 1) VVVNm = textFormatter.vMV(0, 0);
            else VVVNm = textFormatter.vMV(54, 54, ["img/home-discord-button-out.png", "img/home-discord-button-in.png", "img/home-discord-button-click.png"]);
            nMW = textFormatter.vMV(93, 51, ["img/survivalmode-button-out.png", "img/survivalmode-button-in.png", "img/survivalmode-button-click.png"]);
            vnWwV = textFormatter.vMV(93, 51, ["img/battle-royale-button-out.png", "img/battle-royale-button-in.png", "img/battle-royale-button-click.png"]);
            VWvmW = textFormatter.vMV(93, 51, ["img/ghoul-mode-button-out.png", "img/ghoul-mode-button-in.png", "img/ghoul-mode-button-click.png"]);
            nWn = textFormatter.vMV(68, 34, ["img/private-server-button-out.png", "img/private-server-button-in.png", "img/private-server-button-click.png"]);
            Vvn = textFormatter.vMV(68, 34, ["img/public-server-button-out.png", "img/public-server-button-in.png", "img/public-server-button-click.png"]);
            if (wVw === 1) vNnVV = textFormatter.nwn(0, 0);
            else vNnVV = textFormatter.nwn(171, 432, "img/featured.png");
            if (wVw === 1) nMNvn = textFormatter.vMV(0, 0);
            else nMNvn = textFormatter.vMV(60, 60, ["img/home-limaxio-out.png", "img/home-limaxio-in.png", "img/home-limaxio-click.png"]);
            if (wVw === 1) VvvWw = textFormatter.vMV(0, 0);
            else VvvWw = textFormatter.vMV(60, 60, ["img/home-oibio-out.png", "img/home-oibio-in.png", "img/home-oibio-click.png"]);
            if (wVw === 1) nwvMM = textFormatter.vMV(0, 0);
            else nwvMM = textFormatter.vMV(60, 60, ["img/home-starveio-out.png", "img/home-starveio-in.png", "img/home-starveio-click.png"]);
            if (wVw === 1) WNmMN = textFormatter.vMV(0, 0);
            else WNmMN = textFormatter.vMV(60, 60, ["img/home-nendio-out.png", "img/home-nendio-in.png", "img/home-nendio-click.png"]);
            WvVWv = document[networkMappings[61]]("featuredVideo");
            nVNmn = WvVWv[networkMappings[174]];
            VNMMm = {
                x: 0,
                y: 0
            };
            if (wVw === 1) MWm = textFormatter.vMV(0, 0);
            else MWm = textFormatter.vMV(86, 48, ["img/privateserver-button-out.png", "img/privateserver-button-in.png", "img/privateserver-button-click.png"]);
            if (wVw === 1) NNnvm = textFormatter.vMV(0, 0);
            else NNnvm = textFormatter.vMV(52, 42, ["img/map-editor-button-out.png", "img/map-editor-button-in.png", "img/map-editor-button-click.png"]);
            NWwNm = document[networkMappings[61]]("trevda");
            vvWnm = NWwNm[networkMappings[174]];
            WNmWv = {
                x: 0,
                y: 0
            };
            nVVnN = document[networkMappings[61]]("preroll");
            MMMnw = nVVnN[networkMappings[174]];
            nmmNn = {
                x: 0,
                y: 0
            };
            NnVwN = document[networkMappings[61]]("footer");
            nwVvm = NnVwN[networkMappings[174]];
            wmVvw = {
                x: 0,
                y: 0
            };
        };;
        var wVM;
        var WNW = new WNw.vVmwN;
        var WVN = new VVW.VwWVV;
        var wMm = 800;
        var wwV = 0;
        var Mnwmn = function(VNm) {
            return wvm.Mnm.WVVwM(VNm, wvm.Mnm.mVnnv, 0.05);
        };
        var Wnm = 2000;
        var WVV = 0;
        var WmvwW = function(VNm) {
            return wvm.Mnm.WVVwM(VNm, wvm.Mnm.VmV, 0.05);
        };
        var NnM = 0;
        var mMV = 0;
        var VMv = undefined;

        function Wwv() {
            network.mNw = mNw;
            network.mNN = mNN;
            game.player.wMw = 0;
            game.player[networkMappings[109]] = 0;
            VN.VmMNn(0);
            VN.wWMMW();
            if (adminSettings.Wvv === 1) {
                Vvn.Vwv();
                nWn.Vwv();
            }
            adminSettings.vvWnm = vvWnm;
            if (wVw === 1) {
                MMNMm.Vwv();
                mwvwN.Vwv();
                NNnvm.Vwv();
            }
            Wn.VWwWv(adminSettings);
            mMV = Wnm;
            NnM = Wnm;
            VMv = WmvwW;
            WVV = 1;
            verifyConnectionState();
            mWwWV[networkMappings[162]] = "inline-block";
            if (wVw === 0) nMVNN[networkMappings[162]] = "inline-block";
            wMVVn[networkMappings[162]] = "inline-block";
            if (wVw === 0) vmNVm[networkMappings[162]] = "inline-block";
            if (wVw === 0) mmMvm[networkMappings[162]] = "inline-block";
            if (wVw === 0) nVNmn[networkMappings[162]] = "inline-block";
        };;

        function mnV(nNM) {
            wVM = nNM;
            wVmnV();
            mMV = wMm;
            NnM = wMm;
            VMv = Mnwmn;
            wwV = 1;
        };;

        function verifyConnectionState() {
            var nMw = 0;
            var wVW = 0;
            if (mMV > 0) {
                wVW = mMn;
                var NVM = VMv(1 - (mMV / NnM));
                if (NVM === 1) mMV = 0;
                if (WVV === 1) NVM = 1 - Math[networkMappings[99]](NVM);
                nMw *= NVM;
                wVW *= NVM;
            }
            mVv.nM[networkMappings[77]] = ((Wvm - Math[networkMappings[68]](325 * Vv)) + Math[networkMappings[68]](((wVw === 0) ? -30 : -70) * Vv)) - nMw;
            mVv.nM[networkMappings[120]] = Math[networkMappings[4]](0, (NMv - Math[networkMappings[68]](156 * Vv)) + Math[networkMappings[68]](((wVw === 0) ? -150 : -150) * Vv)) - wVW;
            mwvVw.nM[networkMappings[77]] = Math[networkMappings[68]](5 * Vv) + nMw;
            mwvVw.nM[networkMappings[120]] = ((mMn - Math[networkMappings[68]](40 * Vv)) + Math[networkMappings[68]](-5 * Vv)) + wVW;
            nvmVW[networkMappings[77]] = ((Wvm - Math[networkMappings[68]](96 * Vv)) + Math[networkMappings[68]](((wVw === 0) ? 4 : -35.5) * Vv)) - nMw;
            mWwWV[networkMappings[209]] = nvmVW[networkMappings[77]] + "px";
            nvmVW[networkMappings[120]] = mVv.nM[networkMappings[120]] + Math[networkMappings[68]](143 * Vv);
            mWwWV[networkMappings[178]] = nvmVW[networkMappings[120]] + "px";
            Mwn.nM[networkMappings[77]] = mVv.nM[networkMappings[77]] + Math[networkMappings[68]](290 * Vv);
            Mwn.nM[networkMappings[120]] = mVv.nM[networkMappings[120]] + Math[networkMappings[68]](235 * Vv);
            NWMvW[networkMappings[77]] = (Vmn - 152) + nMw;
            nMVNN[networkMappings[209]] = NWMvW[networkMappings[77]] + "px";
            NWMvW[networkMappings[120]] = (mMn - 17) + wVW;
            nMVNN[networkMappings[178]] = NWMvW[networkMappings[120]] + "px";
            nWWnw[networkMappings[77]] = ((Wvm - Math[networkMappings[68]](100 * Vv)) + Math[networkMappings[68]](((wVw === 0) ? 5 : -35) * Vv)) - nMw;
            wMVVn[networkMappings[209]] = nWWnw[networkMappings[77]] + "px";
            nWWnw[networkMappings[120]] = nvmVW[networkMappings[120]] + Math[networkMappings[68]](45 * Vv);
            wMVVn[networkMappings[178]] = nWWnw[networkMappings[120]] + "px";
            VVwVn.nM[networkMappings[77]] = ((Vmn - Math[networkMappings[68]](230 * Vv)) + Math[networkMappings[68]](7 * Vv)) - nMw;
            VVwVn.nM[networkMappings[120]] = -wVW;
            MnMVN[networkMappings[77]] = ((Vmn - 200) + Math[networkMappings[68]](8 * Vv)) - nMw;
            vmNVm[networkMappings[209]] = MnMVN[networkMappings[77]] + "px";
            MnMVN[networkMappings[120]] = Math[networkMappings[68]](18 * Vv) - wVW;
            vmNVm[networkMappings[178]] = MnMVN[networkMappings[120]] + "px";
            nWvMn.nM[networkMappings[77]] = VVwVn.nM[networkMappings[77]];
            nWvMn.nM[networkMappings[120]] = VVwVn.nM[networkMappings[120]] + Math[networkMappings[68]](230 * Vv);
            nmNvw[networkMappings[77]] = ((Vmn - 200) + Math[networkMappings[68]](10 * Vv)) - nMw;
            mmMvm[networkMappings[209]] = nmNvw[networkMappings[77]] + "px";
            nmNvw[networkMappings[120]] = MnMVN[networkMappings[120]] + Math[networkMappings[68]](217 * Vv);
            mmMvm[networkMappings[178]] = nmNvw[networkMappings[120]] + "px";
            MvmnV.nM[networkMappings[77]] = Math[networkMappings[68]](15 * Vv) - nMw;
            MvmnV.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            mvn.nM[networkMappings[77]] = MvmnV.nM[networkMappings[77]] + Math[networkMappings[68]](-5 * Vv);
            mvn.nM[networkMappings[120]] = MvmnV.nM[networkMappings[120]] + Math[networkMappings[68]](55 * Vv);
            wNMwM.nM[networkMappings[77]] = mvn.nM[networkMappings[77]] + Math[networkMappings[68]](45 * Vv);
            wNMwM.nM[networkMappings[120]] = mvn.nM[networkMappings[120]];
            wwNmM.nM[networkMappings[77]] = wNMwM.nM[networkMappings[77]] + Math[networkMappings[68]](45 * Vv);
            wwNmM.nM[networkMappings[120]] = mvn.nM[networkMappings[120]];
            wMmMN.nM[networkMappings[77]] = wwNmM.nM[networkMappings[77]] + Math[networkMappings[68]](45 * Vv);
            wMmMN.nM[networkMappings[120]] = mvn.nM[networkMappings[120]];
            VNWmV.nM[networkMappings[77]] = mVv.nM[networkMappings[77]] + Math[networkMappings[68]](26 * Vv);
            VNWmV.nM[networkMappings[120]] = mVv.nM[networkMappings[120]] + Math[networkMappings[68]](36 * Vv);
            VVVNm.nM[networkMappings[77]] = VNWmV.nM[networkMappings[77]] + Math[networkMappings[68]](83.5 * Vv);
            VVVNm.nM[networkMappings[120]] = VNWmV.nM[networkMappings[120]];
            nMW.nM[networkMappings[77]] = Mwn.nM[networkMappings[77]] + Math[networkMappings[68]](213 * Vv);
            nMW.nM[networkMappings[120]] = Mwn.nM[networkMappings[120]] + Math[networkMappings[68]](-98 * Vv);
            vnWwV.nM[networkMappings[77]] = nMW.nM[networkMappings[77]];
            vnWwV.nM[networkMappings[120]] = nMW.nM[networkMappings[120]] + Math[networkMappings[68]](60 * Vv);
            VWvmW.nM[networkMappings[77]] = nMW.nM[networkMappings[77]];
            VWvmW.nM[networkMappings[120]] = nMW.nM[networkMappings[120]] + Math[networkMappings[68]](60 * Vv);
            nWn.nM[networkMappings[77]] = Mwn.nM[networkMappings[77]] + Math[networkMappings[68]](-126 * Vv);
            nWn.nM[networkMappings[120]] = Mwn.nM[networkMappings[120]] + Math[networkMappings[68]](-58 * Vv);
            Vvn.nM[networkMappings[77]] = nWn.nM[networkMappings[77]];
            Vvn.nM[networkMappings[120]] = nWn.nM[networkMappings[120]] + Math[networkMappings[68]](-37 * Vv);
            vNnVV.nM[networkMappings[77]] = mvn.nM[networkMappings[77]];
            vNnVV.nM[networkMappings[120]] = mvn.nM[networkMappings[120]] + Math[networkMappings[68]](50 * Vv);
            nMNvn.nM[networkMappings[77]] = mvn.nM[networkMappings[77]] + Math[networkMappings[68]](21.5 * Vv);
            nMNvn.nM[networkMappings[120]] = mvn.nM[networkMappings[120]] + Math[networkMappings[68]](72 * Vv);
            VvvWw.nM[networkMappings[77]] = nMNvn.nM[networkMappings[77]];
            VvvWw.nM[networkMappings[120]] = nMNvn.nM[networkMappings[120]] + Math[networkMappings[68]](70 * Vv);
            nwvMM.nM[networkMappings[77]] = VvvWw.nM[networkMappings[77]];
            nwvMM.nM[networkMappings[120]] = VvvWw.nM[networkMappings[120]] + Math[networkMappings[68]](69 * Vv);
            WNmMN.nM[networkMappings[77]] = nwvMM.nM[networkMappings[77]];
            WNmMN.nM[networkMappings[120]] = nwvMM.nM[networkMappings[120]] + Math[networkMappings[68]](69 * Vv);
            VNMMm[networkMappings[77]] = Math[networkMappings[68]](40 * Vv) - nMw;
            nVNmn[networkMappings[209]] = VNMMm[networkMappings[77]] + "px";
            VNMMm[networkMappings[120]] = Math[networkMappings[68]](417 * Vv) - wVW;
            nVNmn[networkMappings[178]] = VNMMm[networkMappings[120]] + "px";
            MWm.nM[networkMappings[77]] = Vvn.nM[networkMappings[77]] + Math[networkMappings[68]](-120 * Vv);
            MWm.nM[networkMappings[120]] = Vvn.nM[networkMappings[120]] + Math[networkMappings[68]](41 * Vv);
            NNnvm.nM[networkMappings[77]] = MWm.nM[networkMappings[77]] + Math[networkMappings[68]](-8.5 * Vv);
            NNnvm.nM[networkMappings[120]] = MWm.nM[networkMappings[120]] + Math[networkMappings[68]](-53 * Vv);
            WNmWv[networkMappings[77]] = Wvm - Math[networkMappings[68]](325 * Vv);
            vvWnm[networkMappings[209]] = WNmWv[networkMappings[77]] + "px";
            WNmWv[networkMappings[120]] = nvmVW[networkMappings[120]] + Math[networkMappings[68]](130 * Vv);
            vvWnm[networkMappings[178]] = WNmWv[networkMappings[120]] + "px";
            var VNwvW = Math[networkMappings[250]](Vv, 1);
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[178]] = Math[networkMappings[68]]((nvmVW[networkMappings[120]] + wVW) + 170) + "px";
            if ((nMv.WMW("ips") !== null) || (nMv.WMW("ip") !== null)) {
                wMVVn[networkMappings[162]] = "none";
                nMW.nM[networkMappings[120]] = -500;
                vnWwV.nM[networkMappings[120]] = -500;
                VWvmW.nM[networkMappings[120]] = -500;
                nWn.nM[networkMappings[120]] = -500;
                Vvn.nM[networkMappings[120]] = -500;
                if (nMv.WMW("admin") !== null) NWwNm[networkMappings[162]] = "none";
            }
            var nM = (nvmVW[networkMappings[120]] + wVW) + (170 * Vv);
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[209]] = "0";
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[87]] = "0";
            document[networkMappings[61]]("trevda")[networkMappings[174]].wNMvV = "auto";
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[178]] = Math[networkMappings[68]](nM + (((VNwvW * 250) - 250) / 2)) + "px";
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[127]] = ("scale(" + VNwvW) + ")";
            var WwmWv = document[networkMappings[61]]("nicknameInput")[networkMappings[174]];
            var vw = Math[networkMappings[68]](220 * Vv);
            var Vw = Math[networkMappings[68]](35 * Vv);
            Vw = Vw + "px";
            vw = vw + "px";
            mWwWV[networkMappings[65]] = vw;
            mWwWV[networkMappings[12]] = Vw;
            WwmWv["borderWidth"] = Math[networkMappings[68]](3 * Vv) + "px";
            WwmWv[networkMappings[65]] = vw;
            WwmWv[networkMappings[12]] = Vw;
            WwmWv[networkMappings[239]] = Math[networkMappings[68]](18 * Vv) + "px";
            if (document[networkMappings[61]]("passwordInput") !== null) {
                var vnmvm = document[networkMappings[61]]("passwordInput")[networkMappings[174]];
                var vw = Math[networkMappings[68]](220 * Vv);
                var Vw = Math[networkMappings[68]](35 * Vv);
                var mmv = Math[networkMappings[68]](Wvm - (vw / 2)) + "px";
                Vw = Vw + "px";
                vw = vw + "px";
                vnmvm[networkMappings[65]] = vw;
                vnmvm[networkMappings[12]] = Vw;
                vnmvm[networkMappings[209]] = mmv;
                vnmvm["borderWidth"] = Math[networkMappings[68]](3 * Vv) + "px";
                vnmvm[networkMappings[65]] = vw;
                vnmvm[networkMappings[12]] = Vw;
                vnmvm[networkMappings[239]] = Math[networkMappings[68]](18 * Vv) + "px";
                vnmvm["marginTop"] = Math[networkMappings[68]](4 * Vv) + "px";
            };
            vw = Math[networkMappings[68]](200 * Vv);
            Vw = Math[networkMappings[68]](28 * Vv);
            Vw = Vw + "px";
            vw = vw + "px";
            wMVVn[networkMappings[65]] = vw;
            wMVVn[networkMappings[12]] = Vw;
            wMVVn["backgroundSize"] = Math[networkMappings[68]](17 * Vv) + "px";
            var nNMnv = document[networkMappings[61]]("servers")[networkMappings[174]];
            vw = Math[networkMappings[68]](230 * Vv) + "px";
            Vw = Math[networkMappings[68]](28 * Vv) + "px";
            nNMnv[networkMappings[65]] = vw;
            nNMnv[networkMappings[12]] = Vw;
            nNMnv[networkMappings[239]] = Math[networkMappings[68]](13 * Vv) + "px";
            vw = Math[networkMappings[68]](185 * Vv);
            Vw = Math[networkMappings[68]](17 * Vv);
            mmv = Math[networkMappings[68]](Vmn - vw) + "px";
            Vw = Vw + "px";
            vw = vw + "px";
            WmV = (Math[networkMappings[68]](mMn - (18 * Vv)) + wVW) + "px";
            nMVNN[networkMappings[65]] = vw;
            nMVNN[networkMappings[12]] = Vw;
            nMVNN[networkMappings[209]] = mmv;
            nMVNN[networkMappings[178]] = WmV;
            nMVNN[networkMappings[239]] = Math[networkMappings[68]](11 * Vv) + "px";
            vw = Math[networkMappings[68]](197 * Vv);
            Vw = Math[networkMappings[68]](250 * Vv);
            mmv = Math[networkMappings[68]](Vmn - (205 * Vv)) + "px";
            Vw = Vw + "px";
            vw = vw + "px";
            vmNVm[networkMappings[65]] = vw;
            vmNVm[networkMappings[12]] = Vw;
            vmNVm[networkMappings[209]] = mmv;
            vmNVm[networkMappings[239]] = Math[networkMappings[68]](11 * Vv) + "px";
            vmNVm["borderRadius"] = Math[networkMappings[68]](5 * Vv) + "px";
            vmNVm["paddingTop"] = Math[networkMappings[68]](18 * Vv) + "px";
            var vmNnw = document[networkMappings[61]]("changelogTitle")[networkMappings[174]];
            vw = Math[networkMappings[68]](197 * Vv) + "px";
            Vw = Math[networkMappings[68]](23 * Vv) + "px";
            vmNnw[networkMappings[65]] = vw;
            vmNnw[networkMappings[12]] = Vw;
            vmNnw[networkMappings[239]] = Math[networkMappings[68]](16 * Vv) + "px";
            vmNnw["paddingTop"] = Math[networkMappings[68]](8 * Vv) + "px";
            vmNnw["paddingBottom"] = Math[networkMappings[68]](0 * Vv) + "px";
            vmNnw["marginBottom"] = Math[networkMappings[68]](-2 * Vv) + "px";
            vmNnw["marginTop"] = Math[networkMappings[68]](-22 * Vv) + "px";
            vmNnw["borderRadius"] = ((((((Math[networkMappings[68]](5 * Vv) + "px ") + Math[networkMappings[68]](5 * Vv)) + "px ") + Math[networkMappings[68]](0 * Vv)) + "px ") + Math[networkMappings[68]](0 * Vv)) + "px";
            var VWwmW = document[networkMappings[61]]("changelogImg")[networkMappings[174]];
            vw = Math[networkMappings[68]](175 * Vv) + "px";
            Vw = Math[networkMappings[68]](80 * Vv) + "px";
            VWwmW[networkMappings[65]] = vw;
            VWwmW[networkMappings[12]] = Vw;
            VWwmW.MWWnv = Math[networkMappings[68]](10 * Vv) + "px";
            var VwNWn = document[networkMappings[61]]("changelogText")[networkMappings[174]];
            VwNWn[networkMappings[239]] = Math[networkMappings[68]](10 * Vv) + "px";
            VwNWn["padding"] = Math[networkMappings[68]](15 * Vv) + "px";
            VwNWn["paddingTop"] = Math[networkMappings[68]](5 * Vv) + "px";
            vw = Math[networkMappings[68]](197 * Vv);
            Vw = Math[networkMappings[68]](347 * Vv);
            mmv = Math[networkMappings[68]](Vmn - (205 * Vv)) + "px";
            NvmNM = Math[networkMappings[68]](mMn - (125 * Vv)) + "px";
            Vw = Vw + "px";
            vw = vw + "px";
            mmMvm[networkMappings[65]] = vw;
            mmMvm[networkMappings[12]] = Vw;
            mmMvm[networkMappings[209]] = mmv;
            mmMvm[networkMappings[137]] = NvmNM;
            mmMvm[networkMappings[239]] = Math[networkMappings[68]](13 * Vv) + "px";
            mmMvm["marginTop"] = Math[networkMappings[68]](0 * Vv) + "px";
            mmMvm["paddingTop"] = Math[networkMappings[68]](18 * Vv) + "px";
            document[networkMappings[61]]("featuredVideo")[networkMappings[174]][networkMappings[239]] = Math[networkMappings[68]](13 * Vv) + "px";
            document[networkMappings[61]]("mainCommands")[networkMappings[174]]["marginTop"] = Math[networkMappings[68]](55 * Vv) + "px";
            document[networkMappings[61]]("secondCommands")[networkMappings[174]]["marginTop"] = Math[networkMappings[68]](55 * Vv) + "px";
            document[networkMappings[61]]("moveCommand")[networkMappings[174]]["paddingLeft"] = Math[networkMappings[68]](20 * Vv) + "px";
            document[networkMappings[61]]("moveCommand")[networkMappings[174]]["paddingRight"] = Math[networkMappings[68]](20 * Vv) + "px";
            document[networkMappings[61]]("hitCommands")[networkMappings[174]]["paddingLeft"] = Math[networkMappings[68]](10 * Vv) + "px";
            document[networkMappings[61]]("hitCommands")[networkMappings[174]]["paddingRight"] = Math[networkMappings[68]](10 * Vv) + "px";
            document[networkMappings[61]]("runCommands")[networkMappings[174]]["paddingLeft"] = Math[networkMappings[68]](0 * Vv) + "px";
            document[networkMappings[61]]("runCommands")[networkMappings[174]]["paddingRight"] = Math[networkMappings[68]](20 * Vv) + "px";
            document[networkMappings[61]]("interactCommands")[networkMappings[174]]["paddingLeft"] = Math[networkMappings[68]](7 * Vv) + "px";
            document[networkMappings[61]]("interactCommands")[networkMappings[174]]["paddingRight"] = Math[networkMappings[68]](0 * Vv) + "px";
            document[networkMappings[61]]("craftCommands")[networkMappings[174]]["paddingLeft"] = Math[networkMappings[68]](5 * Vv) + "px";
            document[networkMappings[61]]("craftCommands")[networkMappings[174]]["paddingRight"] = Math[networkMappings[68]](18 * Vv) + "px";
            document[networkMappings[61]]("mapCommands")[networkMappings[174]]["paddingLeft"] = Math[networkMappings[68]](6 * Vv) + "px";
            document[networkMappings[61]]("mapCommands")[networkMappings[174]]["paddingRight"] = Math[networkMappings[68]](12 * Vv) + "px";
            var mmmWM = document[networkMappings[61]]("howtoplayTitle")[networkMappings[174]];
            vw = Math[networkMappings[68]](197 * Vv) + "px";
            Vw = Math[networkMappings[68]](23 * Vv) + "px";
            mmmWM[networkMappings[65]] = vw;
            mmmWM[networkMappings[12]] = Vw;
            mmmWM[networkMappings[239]] = Math[networkMappings[68]](16 * Vv) + "px";
            mmmWM["paddingTop"] = Math[networkMappings[68]](0 * Vv) + "px";
            mmmWM["paddingBottom"] = Math[networkMappings[68]](13 * Vv) + "px";
            mmmWM["marginBottom"] = Math[networkMappings[68]](6 * Vv) + "px";
            mmmWM["marginTop"] = Math[networkMappings[68]](0 * Vv) + "px";
            mmmWM["borderRadius"] = ((((((Math[networkMappings[68]](5 * Vv) + "px ") + Math[networkMappings[68]](5 * Vv)) + "px ") + Math[networkMappings[68]](0 * Vv)) + "px ") + Math[networkMappings[68]](0 * Vv)) + "px";
            var VnmNV = document[networkMappings[61]]("howtoplayText")[networkMappings[174]];
            VnmNV[networkMappings[239]] = Math[networkMappings[68]](11 * Vv) + "px";
            VnmNV.wNMvV = Math[networkMappings[68]](6 * Vv) + "px";
            VnmNV[networkMappings[12]] = Math[networkMappings[68]](52 * Vv) + "px";
            var nNmMM = document[networkMappings[61]]("howtoplayCommands")[networkMappings[174]];
            vw = Math[networkMappings[68]](197 * Vv) + "px";
            Vw = Math[networkMappings[68]](23 * Vv) + "px";
            nNmMM[networkMappings[65]] = vw;
            nNmMM[networkMappings[12]] = Vw;
            nNmMM[networkMappings[239]] = Math[networkMappings[68]](16 * Vv) + "px";
            nNmMM["paddingTop"] = Math[networkMappings[68]](13 * Vv) + "px";
            nNmMM["paddingBottom"] = Math[networkMappings[68]](13 * Vv) + "px";
            nNmMM["marginBottom"] = Math[networkMappings[68]](6 * Vv) + "px";
            nNmMM["marginTop"] = Math[networkMappings[68]](11 * Vv) + "px";
        };;

        function MW() {
            if (NvWVm() === 0) return;
            value[networkMappings[113]](0, 0, Vmn, mMn);
            VN.Vmmww();
            if (mMV > 0) {
                mmw = VMv(1 - (mMV / NnM));
                if (WVV === 1) mmw = 1 - Math[networkMappings[99]](mmw);
                mmw = 1 - mmw;
            }
            value[networkMappings[192]] = 0.3 * mmw;
            value[networkMappings[84]] = "#000000";
            value[networkMappings[3]](0, 0, Vmn, mMn);
            value[networkMappings[192]] = 1;
            if (adminSettings.Wvv === game.mNm) nMW.NnW(textFormatter.mmM);
            else if (adminSettings.Wvv === game.vVwwV) vnWwV.NnW(textFormatter.mmM);
            else if (adminSettings.Wvv === game.mvVVw) VWvmW.NnW(textFormatter.mmM);
            if (adminSettings.VVwnn === 0) nWn.NnW(textFormatter.mmM);
            else if (adminSettings.VVwnn === 1) Vvn.NnW(textFormatter.mmM);
            mVv.MW();
            mwvVw.MW();
            Mwn.MW();
            VVwVn.MW();
            nWvMn.MW();
            MvmnV.MW();
            mvn.MW();
            wNMwM.MW();
            wwNmM.MW();
            wMmMN.MW();
            VNWmV.MW();
            VVVNm.MW();
            nMW.MW();
            VWvmW.MW();
            nWn.MW();
            Vvn.MW();
            vNnVV.MW();
            nMNvn.MW();
            VvvWw.MW();
            nwvMM.MW();
            WNmMN.MW();
            MWm.MW();
            NNnvm.MW();
            if (NVNwV.n === null) {
                NVNwV.n = textFormatter.MwM((('0.' + mNWWw[0]) + '.') + mNWWw[1], "'Viga', sans-serif", "#d6ddde", 24, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#2b3c3e", 8);
                NVNwV.n.v = 1;
            }
            Wn.MV(NVNwV, (mVv.nM[networkMappings[77]] / Vv) + 484.5, (mVv.nM[networkMappings[120]] / Vv) + 124, 0, 0, 0, 1);
            mwvwN.nM[networkMappings[77]] = vNnVV.nM[networkMappings[77]] + (27 * Vv);
            mwvwN.nM[networkMappings[120]] = vNnVV.nM[networkMappings[120]] + (329 * Vv);
            mwvwN.MW();
            MMNMm.nM[networkMappings[77]] = vNnVV.nM[networkMappings[77]] + (34 * Vv);
            MMNMm.nM[networkMappings[120]] = vNnVV.nM[networkMappings[120]] + (399 * Vv);
            MMNMm.MW();
            VN.MWMww();
            wvW.WNmWW();
        };;

        function NvWVm() {
            if (wwV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    wwV = 0;
                    mwvVw.NnW(textFormatter.mwv);
                    mWwWV[networkMappings[162]] = "none";
                    Mwn.NnW(textFormatter.mwv);
                    nMVNN[networkMappings[162]] = "none";
                    wMVVn[networkMappings[162]] = "none";
                    vmNVm[networkMappings[162]] = "none";
                    mmMvm[networkMappings[162]] = "none";
                    mvn.NnW(textFormatter.mwv);
                    wNMwM.NnW(textFormatter.mwv);
                    wwNmM.NnW(textFormatter.mwv);
                    wMmMN.NnW(textFormatter.mwv);
                    VNWmV.NnW(textFormatter.mwv);
                    VVVNm.NnW(textFormatter.mwv);
                    nMW.NnW(textFormatter.mwv);
                    vnWwV.NnW(textFormatter.mwv);
                    VWvmW.NnW(textFormatter.mwv);
                    nWn.NnW(textFormatter.mwv);
                    Vvn.NnW(textFormatter.mwv);
                    nMNvn.NnW(textFormatter.mwv);
                    VvvWw.NnW(textFormatter.mwv);
                    nwvMM.NnW(textFormatter.mwv);
                    WNmMN.NnW(textFormatter.mwv);
                    nVNmn[networkMappings[162]] = "none";
                    MWm.NnW(textFormatter.mwv);
                    NNnvm.NnW(textFormatter.mwv);
                    vvWnm[networkMappings[162]] = "none";
                    MMMnw[networkMappings[162]] = "none";
                    nwVvm[networkMappings[162]] = "none";
                    wVM.Wwv();
                    return 0;
                }
                mMV -= WW;
            } else if (WVV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    WVV = 0;
                    if (game.player.vvMWw !== 1) vvWnm[networkMappings[162]] = "inline-block";
                    document[networkMappings[61]]("bod")[networkMappings[174]][networkMappings[9]] = "#daeae6";
                    NMNnV();
                }
                mMV -= WW;
            }
            return 1;
        };;

        function mnN(mV) {
            WNw.extra(mV, WNw.VVwmw);
            var wv = 0;
            if (mwvVw.nN() === 1) {
                wv = 1;
            }
            if (Mwn.nN() === 1) {
                wv = 1;
            }
            if (mvn.nN() === 1) {
                wv = 1;
            }
            if (wNMwM.nN() === 1) {
                wv = 1;
            }
            if (wwNmM.nN() === 1) {
                wv = 1;
            }
            if (wMmMN.nN() === 1) {
                wv = 1;
            }
            if (VNWmV.nN() === 1) {
                wv = 1;
            }
            if (VVVNm.nN() === 1) {
                wv = 1;
            }
            if (nMW.nN() === 1) {
                wv = 1;
            }
            if (vnWwV.nN() === 1) {
                wv = 1;
            }
            if (VWvmW.nN() === 1) {
                wv = 1;
            }
            if (nWn.nN() === 1) {
                wv = 1;
            }
            if (Vvn.nN() === 1) {
                wv = 1;
            }
            if (nMNvn.nN() === 1) {
                wv = 1;
            }
            if (VvvWw.nN() === 1) {
                wv = 1;
            }
            if (nwvMM.nN() === 1) {
                wv = 1;
            }
            if (WNmMN.nN() === 1) {
                wv = 1;
            }
            if (MWm.nN() === 1) {
                wv = 1;
            }
            if (NNnvm.nN() === 1) {
                wv = 1;
            }
            mwvwN.nN();
            MMNMm.nN();
        };;

        function vvW(mV) {
            WNw.extra(mV, WNw.mmNNn);
            var wv = 0;
            if (mwvVw.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("", "_blank");
            }
            if (Mwn.nN() === 1) {
                wv = 1;
                mNVvw();
                MM.nmM(MM.Mn[networkMappings[83]], 1, 0);
            }
            if (mvn.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("", "_blank");
            }
            if (wNMwM.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("", "_blank");
            }
            if (wwNmM.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("https://www.youtube.com/@artsdartsAD", "_blank");
            }
            if (wMmMN.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("", "_blank");
            }
            if (VNWmV.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("", "_blank");
            }
            if (VVVNm.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("https://discord.gg/6DzrXg9R7f", "_blank");
            }
            if (nMW.nN() === 1) {
                wv = 1;
                if (adminSettings.Wvv !== 0) {
                    if (((network[networkMappings[155]] & connectionStates.mMMMV) === 0) && ((network[networkMappings[155]] & connectionStates.nnMvm) === 0)) {
                        adminSettings.Wvv = 0;
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        Vvn[networkMappings[249]]();
                        nWn[networkMappings[249]]();
                        document[networkMappings[61]]("serverList")[networkMappings[255]] = adminSettings.VnvWv;
                        document[networkMappings[61]]("servers")[networkMappings[94]] = adminSettings.VnWVM;
                        verifyConnectionState();
                    }
                }
            }
            if (vnWwV.nN() === 1) {
                wv = 1;
                if ((0 && (adminSettings.Wvv !== 1)) && (adminSettings.VVwnn === 1)) {
                    if (((network[networkMappings[155]] & connectionStates.mMMMV) === 0) && ((network[networkMappings[155]] & connectionStates.nnMvm) === 0)) {
                        adminSettings.Mvwvn = 0;
                        adminSettings.Wvv = game.vVwwV;
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        Vvn.Vwv();
                        nWn.Vwv();
                        adminSettings.VnvWv = document[networkMappings[61]]("serverList")[networkMappings[255]];
                        adminSettings.VnWVM = document[networkMappings[61]]("servers")[networkMappings[94]];
                        document[networkMappings[61]]("serverList")[networkMappings[255]] = adminSettings.NwMvw;
                        var wm = 0;
                        var NMnWW = 0;
                        for (var vM in adminSettings.regions) {
                            if (vM === network.wWv[adminSettings.VnWVM][4]) {
                                adminSettings.Mvwvn = Math[networkMappings[68]](Math[networkMappings[211]]() * adminSettings.regions[vM][networkMappings[231]]);
                                NMnWW = wm;
                                break;
                            }
                            wm++;
                        };
                        document[networkMappings[61]]("servers")[networkMappings[94]] = NMnWW;
                        verifyConnectionState();
                    }
                }
            }
            if (VWvmW.nN() === 1) {
                wv = 1;
                if ((adminSettings.Wvv !== 1) && (adminSettings.VVwnn === 1)) {
                    if (((network[networkMappings[155]] & connectionStates.mMMMV) === 0) && ((network[networkMappings[155]] & connectionStates.nnMvm) === 0)) {
                        adminSettings.Mvwvn = 0;
                        adminSettings.Wvv = game.mvVVw;
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        Vvn.Vwv();
                        nWn.Vwv();
                        adminSettings.VnvWv = document[networkMappings[61]]("serverList")[networkMappings[255]];
                        adminSettings.VnWVM = document[networkMappings[61]]("servers")[networkMappings[94]];
                        document[networkMappings[61]]("serverList")[networkMappings[255]] = adminSettings.VwWNm;
                        var NMnWW = Math[networkMappings[68]](Math[networkMappings[211]]() * 1);
                        document[networkMappings[61]]("servers")[networkMappings[94]] = NMnWW;
                        verifyConnectionState();
                    }
                }
            }
            if (nWn.nN() === 1) {
                wv = 1;
                if ((adminSettings.VVwnn !== 0) && (adminSettings.Wvv === 0)) {
                    if (((network[networkMappings[155]] & connectionStates.mMMMV) === 0) && ((network[networkMappings[155]] & connectionStates.nnMvm) === 0)) {
                        adminSettings.Mvwvn = 0;
                        adminSettings.VVwnn = 0;
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        nMW.Vwv();
                        vnWwV.Vwv();
                        VWvmW.Vwv();
                        adminSettings.VnvWv = document[networkMappings[61]]("serverList")[networkMappings[255]];
                        adminSettings.VnWVM = document[networkMappings[61]]("servers")[networkMappings[94]];
                        document[networkMappings[61]]("serverList")[networkMappings[255]] = adminSettings.wnVVV;
                        adminSettings.Mvwvn = 0;
                        document[networkMappings[61]]("servers")[networkMappings[94]] = 0;
                        verifyConnectionState();
                    }
                }
            }
            if (Vvn.nN() === 1) {
                wv = 1;
                if ((adminSettings.VVwnn !== 1) && (adminSettings.Wvv === 0)) {
                    if (((network[networkMappings[155]] & connectionStates.mMMMV) === 0) && ((network[networkMappings[155]] & connectionStates.nnMvm) === 0)) {
                        adminSettings.VVwnn = 1;
                        adminSettings.Wvv = 0;
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        nMW[networkMappings[249]]();
                        VWvmW[networkMappings[249]]();
                        document[networkMappings[61]]("serverList")[networkMappings[255]] = adminSettings.VnvWv;
                        document[networkMappings[61]]("servers")[networkMappings[94]] = adminSettings.VnWVM;
                        verifyConnectionState();
                    }
                }
            }
            if (nMNvn.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("http://limax.io", "_blank");
            }
            if (VvvWw.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("http://oib.io", "_blank");
            }
            if (nwvMM.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("http://starve.io", "_blank");
            }
            if (WNmMN.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("https://nend.io", "_blank");
            }
            if (MWm.nN() === 1) {
                wv = 1;
                var nMnmm = NV[networkMappings[103]]("https://devast.io/private-server", "_blank");
            }
            if (NNnvm.nN() === 1) {
                wv = 1;
                adminSettings.mnV(Mwmnn);
                MM.nmM(MM.Mn[networkMappings[83]], 1, 0);
            }
            if ((mwvwN.nN() === 1) || (MMNMm.nN() === 1)) {
                var nMnmm = NV[networkMappings[103]](MnMWm.VnMvN, "_blank");
            };
        };;

        function mwM(mV) {
            WNw.extra(mV, WNw.MwnMN);
            var wv = 0;
            if (mwvVw.nN() === 1) {
                wv = 1;
            }
            if (Mwn.nN() === 1) {
                wv = 1;
            }
            if (mvn.nN() === 1) {
                wv = 1;
            }
            if (wNMwM.nN() === 1) {
                wv = 1;
            }
            if (wwNmM.nN() === 1) {
                wv = 1;
            }
            if (wMmMN.nN() === 1) {
                wv = 1;
            }
            if (VNWmV.nN() === 1) {
                wv = 1;
            }
            if (VVVNm.nN() === 1) {
                wv = 1;
            }
            if (nMW.nN() === 1) {
                wv = 1;
            }
            if (vnWwV.nN() === 1) {
                wv = 1;
            }
            if (VWvmW.nN() === 1) {
                wv = 1;
            }
            if (nWn.nN() === 1) {
                wv = 1;
            }
            if (Vvn.nN() === 1) {
                wv = 1;
            }
            if (nMNvn.nN() === 1) {
                wv = 1;
            }
            if (VvvWw.nN() === 1) {
                wv = 1;
            }
            if (nwvMM.nN() === 1) {
                wv = 1;
            }
            if (WNmMN.nN() === 1) {
                wv = 1;
            }
            if (MWm.nN() === 1) {
                wv = 1;
            }
            if (NNnvm.nN() === 1) {
                wv = 1;
            }
            mwvwN.nN();
            MMNMm.nN();
        };;

        function Vnw(mV) {
            if (mV[networkMappings[207]][networkMappings[231]] > 0) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][0]);
                mnN(WNW);
            }
        };;

        function Nww(mV) {
            vvW(WNW);
        };;

        function WNv(mV) {
            if (mV[networkMappings[207]][networkMappings[231]] > 0) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][0]);
                vvW(WNW);
            }
        };;

        function vwm(mV) {
            if (mV[networkMappings[207]][networkMappings[231]] > 0) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][0]);
                mwM(WNW);
            }
        };;

        function NMNnV() {
            if (wVw === 0) NV[networkMappings[116]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[116]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[116]]('mousemove', mwM, false);
            if (wVw === 1) NV[networkMappings[116]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[116]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[116]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[116]]('touchmove', vwm, false);
        };;

        function wVmnV() {
            if (wVw === 0) NV[networkMappings[205]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[205]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[205]]('mousemove', mwM, false);
            if (wVw === 1) NV[networkMappings[205]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[205]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[205]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[205]]('touchmove', vwm, false);
        };;
        return {
            mnV: mnV,
            nnM: nnM,
            Wwv: Wwv,
            update: verifyConnectionState,
            MW: MW
        };
    })();
    var gameManager = (function() {
        function mNw(NWn) {
            console[networkMappings[31]]("onError", NWn);
            if (game.Wvv === 1) mnV(WWWnm);
            else mnV(nNVVV);
        };;

        function mNN() {};;

        function wMnnM() {
            return vnW;
        };;

        function NWW() {
            return vnW & nnn;
        };;
        var mwMMw = null;
        var WnmnN = 0;
        var vnW = 0;
        var nvN = 0;
        var NMM = 0;
        var nnn = 0;
        var nMMwM = 0;
        var vmvNV = 0;
        var WMVnN = 0;

        function WVMvn(nnvVm) {
            nWV();
            vnW = 1;
            if (nnvVm === 1) nnn = 1;
            else if (nnvVm === 2) nMMwM = 1;
        };;

        function nWV() {
            vnW = 0;
            secondaryElement.NnW(textFormatter.mwv);
            nvN = 0;
            NMM = 0;
            nnn = 0;
            nMMwM = 0;
            vmvNV = 0;
            game.VnnWM();
        };;
        var mnNWN = textFormatter.vMV(63, 28, ["img/addteam-button-out.png", "img/addteam-button-in.png", "img/addteam-button-click.png"]);
        var vnMMv = textFormatter.vMV(44, 33, ["img/leave-button-out.png", "img/leave-button-in.png", "img/leave-button-click.png"]);
        var wNmWv = textFormatter.vMV(44, 33, ["img/lockteam-button-out.png", "img/lockteam-button-in.png", "img/lockteam-button-click.png"]);
        var NNVvM = textFormatter.vMV(44, 33, ["img/unlockteam-button-out.png", "img/unlockteam-button-in.png", "img/unlockteam-button-click.png"]);
        var nvwmV = textFormatter.vMV(44, 33, ["img/delete-button-out.png", "img/delete-button-in.png", "img/delete-button-click.png"]);
        var vwWNm = textFormatter.vMV(44, 33, ["img/delete-button-out.png", "img/delete-button-in.png", "img/delete-button-click.png"]);
        var NWWNN = textFormatter.vMV(44, 33, ["img/join-button-out.png", "img/join-button-in.png", "img/join-button-click.png"]);
        var NmmvW = textFormatter.vMV(71, 46, ["img/craft-button-out.png", "img/craft-button-in.png", "img/craft-button-click.png"]);
        var mmmwW = textFormatter.vMV(71, 46, ["img/cancel-craft-button-out.png", "img/cancel-craft-button-in.png", "img/cancel-craft-button-click.png"]);
        var WMMMw = textFormatter.vMV(71, 46, ["img/unlock-button-out.png", "img/unlock-button-in.png", "img/unlock-button-click.png"]);
        var mmn = textFormatter.vMV(64, 63, ["img/bag-button-out.png", "img/bag-button-in.png", "img/bag-button-click.png"]);
        mmn[networkMappings[103]] = 0;
        var primaryCollection = [];
        var mainCollection = [];
        var NNMmm = 0;
        var secondaryElement = textFormatter.vMV(43, 43, ["img/close-box-out.png", "img/close-box-in.png", "img/close-box-click.png"]);
        var MnmnM = [Wn.Nvw("img/high-particules-out.png"), Wn.Nvw("img/high-particules-in.png"), Wn.Nvw("img/high-particules-click.png")];
        var vvmwm = [Wn.Nvw("img/join-button-out.png"), Wn.Nvw("img/join-button-in.png"), Wn.Nvw("img/join-button-click.png")];
        var mMWvw = [Wn.Nvw("img/remove-button-out.png"), Wn.Nvw("img/remove-button-in.png"), Wn.Nvw("img/remove-button-click.png")];
        var WmMmM = textFormatter.vMV(54, 42, null, MnmnM);
        var nWWvw = [Wn.Nvw("img/low-particules-out.png"), Wn.Nvw("img/low-particules-in.png"), Wn.Nvw("img/low-particules-click.png")];
        var mWVnn = textFormatter.vMV(54, 42, null, nWWvw);
        var mvWVW = [Wn.Nvw("img/no-particules-out.png"), Wn.Nvw("img/no-particules-in.png"), Wn.Nvw("img/no-particules-click.png")];
        var Vnvvn = textFormatter.vMV(54, 42, null, mvWVW);
        var MNnwv = [Wn.Nvw("img/fuel-button-out.png"), Wn.Nvw("img/fuel-button-in.png"), Wn.Nvw("img/fuel-button-click.png")];
        var time = textFormatter.vMV(46, 46, null, MNnwv);
        var NvNVN = [Wn.Nvw("img/fuel1-button-out.png"), Wn.Nvw("img/fuel1-button-in.png"), Wn.Nvw("img/fuel1-button-click.png")];
        var WMWVm = textFormatter.vMV(46, 46, null, NvNVN);
        var wmWwn = [Wn.Nvw("img/energy-cells-button-out.png"), Wn.Nvw("img/energy-cells-button-in.png"), Wn.Nvw("img/energy-cells-button-click.png")];
        var wMVvv = textFormatter.vMV(46, 46, null, wmWwn);
        var vWmMv = [Wn.Nvw("img/high-resolution-out.png"), Wn.Nvw("img/high-resolution-in.png"), Wn.Nvw("img/high-resolution-click.png")];
        var VWnnM = textFormatter.vMV(54, 42, null, vWmMv);
        var vWnMn = [Wn.Nvw("img/medium-resolution-out.png"), Wn.Nvw("img/medium-resolution-in.png"), Wn.Nvw("img/medium-resolution-click.png")];
        var mwmMV = textFormatter.vMV(54, 42, null, vWnMn);
        var mWMwM = [Wn.Nvw("img/low-resolution-out.png"), Wn.Nvw("img/low-resolution-in.png"), Wn.Nvw("img/low-resolution-click.png")];
        var NWnwN = textFormatter.vMV(54, 42, null, mWMwM);
        var mVNwV = [Wn.Nvw("img/azerty-button-out.png"), Wn.Nvw("img/azerty-button-in.png"), Wn.Nvw("img/azerty-button-click.png")];
        var nnMnv = textFormatter.vMV(81, 33, null, mVNwV);
        var wVwMm = [Wn.Nvw("img/qwerty-button-out.png"), Wn.Nvw("img/qwerty-button-in.png"), Wn.Nvw("img/qwerty-button-click.png")];
        var MmnwN = textFormatter.vMV(87, 33, null, wVwMm);
        var Nnvwm = [Wn.Nvw("img/sound-on-out.png"), Wn.Nvw("img/sound-on-in.png"), Wn.Nvw("img/sound-on-click.png")];
        var mvnnV = [Wn.Nvw("img/sound-off-out.png"), Wn.Nvw("img/sound-off-in.png"), Wn.Nvw("img/sound-off-click.png")];
        var NwmnM = textFormatter.vMV(51, 36, null, Nnvwm);
        var VvnWn = textFormatter.vMV(51, 36, null, mvnnV);
        var wNmMW = textFormatter.vMV(51, 36, null, Nnvwm);
        var vvnwM = textFormatter.vMV(51, 36, null, mvnnV);
        var VWVMM = [];
        var WMw = -1;
        var VWnWn = -1;
        var VWNMM = Wn.Nvw("img/inv-empty.png");
        var vWMVW = [VWNMM, VWNMM, VWNMM];
        var mWV = [];
        var WnV = [];
        var NMW = [];
        var WWN = [];
        var vvWvn = [];
        var NWvVw = [];
        var nWMVn = [];
        var WVm = [];
        var mainElement = textFormatter.vMV(58, 58, null, vWMVW);
        var vnn = [];
        var delta = [];
        var vVN = 0;
        var MwVmn = 0;
        var WvmWw = 0;
        var mwnVn = 0;
        var MnvmV = 0;
        var NWvwW = 0;
        var VMWWM = 0;
        var mmvvw = 0;

        function NMNNw() {
            if ((WNw[networkMappings[155]] === WNw.VVwmw) && (game.player[networkMappings[26]] === 0)) {
                if (game.player.wMw === 1) {
                    game.player[networkMappings[26]] = -1;
                    if (game.player.NvvwM === 1) network.VMw(JSON[networkMappings[185]]([14, game.player.vvVww, game.player.Vwm, game.player.Nmm]));
                } else {
                    game.player[networkMappings[26]] = 1;
                    game.mnv = -1;
                    network.Vmnmv();
                }
            } else if (WNw[networkMappings[155]] === WNw.mmNNn) {
                if (game.player.wMw === 1) {
                    NNMmm = 0;
                    game.player[networkMappings[26]] = 0;
                } else if (game.player[networkMappings[26]] === 1) {
                    NNMmm = 0;
                    game.player[networkMappings[26]] = 0;
                    network.VvMMn();
                } else if (NNMmm === 1) {
                    game.player[networkMappings[26]] = 1;
                    game.mnv = -1;
                    network.Vmnmv();
                }
            }
        };;

        function nWnNw() {
            network[networkMappings[170]]();
            if (WW > 5000) network.VMw("[20]");
            if (WnmnN === 0) {
                network.VnMwN();
                network.WvvNn();
            }
            if (WNw[networkMappings[155]] === WNw.VVwmw) network.mVWWW();
            else network.VWwNv();
            NMNNw();
        };;
        var wNVNn;
        var vwmNW;
        var mNWnW;
        var initialize;
        var wVmvW;
        var MWn;
        var mvV;
        var wWvVN;
        var VwWmw;
        var wMW;
        var vnvwW;
        var vWV;
        var vVn;
        var nVvmw;
        var vVW;
        var mwWmw;
        var mvVNW;
        var Nmwvm;
        var VwNVv;

        function nnM() {
            mwMMw = document[networkMappings[61]]("chatInput");
            var wmV = 68;
            var tokenIndex = mnW[vMM].VwwmM + 8;
            for (vM = 0; vM < tokenIndex; vM++) mWV[networkMappings[140]](textFormatter.vMV(wmV, wmV, null, vWMVW));
            for (vM = 0; vM < 4; vM++) WVm[networkMappings[140]](textFormatter.vMV(wmV, wmV, null, vWMVW));
            wmV = 49;
            for (vM = 0; vM < 35; vM++) WnV[networkMappings[140]](textFormatter.vMV(wmV, wmV, null, vWMVW));
            wmV = 40;
            for (vM = 0; vM < 5; vM++) NMW[networkMappings[140]](textFormatter.vMV(wmV, wmV, null, vWMVW));
            for (vM = 0; vM < 4; vM++) WWN[networkMappings[140]](textFormatter.vMV(wmV, wmV, null, vWMVW));
            for (vM = 0; vM < 3; vM++) vvWvn[networkMappings[140]](textFormatter.vMV(wmV, wmV, null, vWMVW));
            for (vM = 0; vM < 9; vM++) nWMVn[networkMappings[140]](textFormatter.vMV(29, 27, null, mMWvw));
            for (vM = 0; vM < 18; vM++) NWvVw[networkMappings[140]](textFormatter.vMV(44, 33, null, vvmwm));
            gameManager.secondaryElement = nWV;
            gameManager.mnNNN = WVMvn;
            gameManager.mWV = mWV;
            gameManager.WnV = WnV;
            gameManager.NMW = NMW;
            gameManager.mainElement = mainElement;
            gameManager.WWN = WWN;
            gameManager.vvWvn = vvWvn;
            gameManager.WVm = WVm;
            gameManager.nWMVn = nWMVn;
            gameManager[networkMappings[164]] = NWvVw;
            gameManager.NWW = NWW;
            gameManager.wMnnM = wMnnM;
            gameManager.gameSettings = "";
            gameManager.WvvNm = NWWNN;
            gameManager.wwVnn = vwWNm;
            gameManager.vnn = vnn;
            gameManager.delta = delta;
            gameManager.MmNVw = 0;
            gameManager.VVMvM = 0;
            gameManager.WnMnV = 0;
            gameManager.vnMMw = 0;
            gameManager.nwmvm = 0;
            gameManager.VwmNV = 0;
            primaryCollection[wn.MVV] = textFormatter.vMV(42, 42, ["img/building-button-out.png", "img/building-button-in.png", "img/building-button-click.png"]);
            primaryCollection[wn.WNvWM] = textFormatter.vMV(42, 42, ["img/skill-button-out.png", "img/skill-button-in.png", "img/skill-button-click.png"]);
            primaryCollection[wn.mNV] = textFormatter.vMV(42, 42, ["img/clothe-button-out.png", "img/clothe-button-in.png", "img/clothe-button-click.png"]);
            primaryCollection[wn.WNWVW] = textFormatter.vMV(42, 42, ["img/plant-button-out.png", "img/plant-button-in.png", "img/plant-button-click.png"]);
            primaryCollection[wn.mwMnV] = textFormatter.vMV(42, 42, ["img/medecine-button-out.png", "img/medecine-button-in.png", "img/medecine-button-click.png"]);
            primaryCollection[wn.MwMMN] = textFormatter.vMV(42, 42, ["img/resources-button-out.png", "img/resources-button-in.png", "img/resources-button-click.png"]);
            primaryCollection[wn.mNm] = textFormatter.vMV(42, 42, ["img/survival-button-out.png", "img/survival-button-in.png", "img/survival-button-click.png"]);
            primaryCollection[wn.VMMNM] = textFormatter.vMV(42, 42, ["img/tool-button-out.png", "img/tool-button-in.png", "img/tool-button-click.png"]);
            primaryCollection[wn.MMN] = textFormatter.vMV(42, 42, ["img/weapon-button-out.png", "img/weapon-button-in.png", "img/weapon-button-click.png"]);
            primaryCollection[wn.Wnv] = textFormatter.vMV(42, 42, ["img/cable-button-out.png", "img/cable-button-in.png", "img/cable-button-click.png"]);
            mainCollection[mw.wVn] = textFormatter.vMV(42, 42, ["img/own-button-out.png", "img/own-button-in.png", "img/own-button-click.png"]);
            mainCollection[mw.VmM] = textFormatter.vMV(42, 42, ["img/fire-button-out.png", "img/fire-button-in.png", "img/fire-button-click.png"]);
            mainCollection[mw.wVv] = textFormatter.vMV(42, 42, ["img/workbench1-button-out.png", "img/workbench1-button-in.png", "img/workbench1-button-click.png"]);
            mainCollection[mw.mnM] = textFormatter.vMV(42, 42, ["img/bbq-button-out.png", "img/bbq-button-in.png", "img/bbq-button-click.png"]);
            mainCollection[mw.MWV] = textFormatter.vMV(42, 42, ["img/composter-button-out.png", "img/composter-button-in.png", "img/composter-button-click.png"]);
            mainCollection[mw.VWN] = textFormatter.vMV(42, 42, ["img/weaving-machine-button-out.png", "img/weaving-machine-button-in.png", "img/weaving-machine-button-click.png"]);
            mainCollection[mw.Www] = textFormatter.vMV(42, 42, ["img/welding-machine-button-out.png", "img/welding-machine-button-in.png", "img/welding-machine-button-click.png"]);
            mainCollection[mw.wmW] = textFormatter.vMV(42, 42, ["img/workbench2-button-out.png", "img/workbench2-button-in.png", "img/workbench2-button-click.png"]);
            mainCollection[mw.mnm] = textFormatter.vMV(42, 42, ["img/smelter-button-out.png", "img/smelter-button-in.png", "img/smelter-button-click.png"]);
            mainCollection[mw.nvw] = textFormatter.vMV(42, 42, ["img/workbench3-button-out.png", "img/workbench3-button-in.png", "img/workbench3-button-click.png"]);
            mainCollection[mw.MWw] = textFormatter.vMV(42, 42, ["img/agitator-button-out.png", "img/agitator-button-in.png", "img/agitator-button-click.png"]);
            mainCollection[mw.nVm] = textFormatter.vMV(42, 42, ["img/extractor-button-out.png", "img/extractor-button-in.png", "img/extractor-button-click.png"]);
            mainCollection[mw.nwW] = textFormatter.vMV(42, 42, ["img/feeder-button-out.png", "img/feeder-button-in.png", "img/feeder-button-click.png"]);
            wNVNn = textFormatter.nwn(255, 174, "img/profile-player2.png");
            vwmNW = textFormatter.nwn(269, 267, "img/settings-box.png");
            mNWnW = textFormatter.nwn(162, 165, "img/chest-box4.png");
            initialize = textFormatter.nwn(595, 405, "img/craftbox2.png");
            wVmvW = textFormatter.nwn(412, 412, "img/borderBigMinimap2.png");
            MWn = textFormatter.nwn(128, 128, "img/minimap.png");
            mvV = textFormatter.nwn(233, 246, "img/leaderboard.png");
            wWvVN = textFormatter.nwn(516, 275, "img/jointeam-box.png");
            VwWmw = textFormatter.nwn(513, 150, "img/memberteam-box.png");
            wMW = textFormatter.vMV(40, 40, ["img/full-screen-out.png", "img/full-screen-in.png", "img/full-screen-click.png"]);
            vnvwW = textFormatter.vMV(64, 63, ["img/craftbox-button-out.png", "img/craftbox-button-in.png", "img/craftbox-button-click.png"]);
            vWV = textFormatter.vMV(40, 40, ["img/settings-out.png", "img/settings-in.png", "img/settings-click.png"]);
            vVn = textFormatter.vMV(40, 40, ["img/minimap-button-out.png", "img/minimap-button-in.png", "img/minimap-button-click.png"]);
            nVvmw = textFormatter.vMV(40, 40, ["img/team-button-out.png", "img/team-button-in.png", "img/team-button-click.png"]);
            vVW = textFormatter.vMV(34, 33, ["img/close-leaderboard-out.png", "img/close-leaderboard-in.png", "img/close-leaderboard-click.png"]);
            mwWmw = textFormatter.vMV(34, 33, ["img/open-leaderboard-out.png", "img/open-leaderboard-in.png", "img/open-leaderboard-click.png"]);
            mvVNW = document[networkMappings[61]]("chat");
            Nmwvm = mvVNW[networkMappings[174]];
            VwNVv = {
                x: 0,
                y: 0
            };
        };;
        var wVM;
        var WNW = new WNw.vVmwN;
        var WVN = new VVW.VwWVV;
        var wMm = 2000;
        var wwV = 0;
        var Mnwmn = wvm.Mnm.WWM;
        var Wnm = 1000;
        var WVV = 0;
        var WmvwW = wvm.Mnm.vNM;
        var NnM = 0;
        var mMV = 0;
        var VMv = undefined;

        function Wwv() {
            network.mNw = mNw;
            network.mNN = mNN;
            if (localStorage[networkMappings[88]]("showLeaderboard") === "0") {
                vVW.Vwv();
                mwWmw[networkMappings[249]]();
            } else {
                mwWmw.Vwv();
                vVW[networkMappings[249]]();
            }
            document[networkMappings[61]]("bod")[networkMappings[174]][networkMappings[9]] = "#daeae6";
            NNMmm = 0;
            adminSettings.mmMNn++;
            gameManager.gameSettings = "";
            gameManager.wnwwV = 0;
            wvW.NnnwW();
            if (game.Wvv === game.vVwwV) {
                nVvmw.Vwv();
                vnvwW[networkMappings[249]]();
            } else if (game.player.health > 0) {
                console[networkMappings[31]]("HERE");
                nVvmw.Vwv();
                vnvwW.Vwv();
            } else {
                nVvmw[networkMappings[249]]();
                vnvwW[networkMappings[249]]();
            }
            Wn.VWwWv(gameManager);
            mMV = Wnm;
            NnM = Wnm;
            VMv = WmvwW;
            WVV = 1;
            verifyConnectionState();
        };;

        function mnV(nNM) {
            WnmnN = 0;
            nWV();
            wvW.vwWmV();
            wVM = nNM;
            wVmnV();
            mMV = wMm;
            NnM = wMm;
            VMv = Mnwmn;
            wwV = 1;
        };;

        function verifyConnectionState() {
            var nMw = 0;
            var wVW = 0;
            if (mMV > 0) {
                wVW = mMn;
                var NVM = VMv(1 - (mMV / NnM));
                if (NVM === 1) mMV = 0;
                if (WVV === 1) NVM = 1 - Math[networkMappings[99]](NVM);
                nMw *= NVM;
                wVW *= NVM;
            }
            wNVNn.nM[networkMappings[77]] = Math[networkMappings[68]](5 * Vv) + nMw;
            wNVNn.nM[networkMappings[120]] = ((mMn - Math[networkMappings[68]](174 * Vv)) + Math[networkMappings[68]](-5 * Vv)) + wVW;
            vwmNW.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](134 * Vv)) + nMw;
            vwmNW.nM[networkMappings[120]] = Math[networkMappings[4]](0, NMv - Math[networkMappings[68]](133 * Vv)) + wVW;
            mNWnW.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](81 * Vv)) + nMw;
            mNWnW.nM[networkMappings[120]] = Math[networkMappings[4]](0, NMv - Math[networkMappings[68]](82 * Vv)) + wVW;
            initialize.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](297 * Vv)) + nMw;
            initialize.nM[networkMappings[120]] = Math[networkMappings[4]](0, NMv - Math[networkMappings[68]](202 * Vv)) + wVW;
            wVmvW.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](206 * Vv)) + nMw;
            wVmvW.nM[networkMappings[120]] = Math[networkMappings[4]](0, NMv - Math[networkMappings[68]](206 * Vv)) + wVW;
            MWn.nM[networkMappings[77]] = Math[networkMappings[68]](5 * Vv) - nMw;
            MWn.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            mvV.nM[networkMappings[77]] = ((Vmn - Math[networkMappings[68]](233 * Vv)) + Math[networkMappings[68]](-6 * Vv)) - nMw;
            mvV.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            wWvVN.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](258 * Vv)) - nMw;
            wWvVN.nM[networkMappings[120]] = Math[networkMappings[4]](0, NMv - Math[networkMappings[68]](137 * Vv)) - wVW;
            VwWmw.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](256 * Vv)) - nMw;
            VwWmw.nM[networkMappings[120]] = Math[networkMappings[4]](0, NMv - Math[networkMappings[68]](75 * Vv)) - wVW;
            wMW.nM[networkMappings[77]] = MWn.nM[networkMappings[77]] + Math[networkMappings[68]](126 * Vv);
            wMW.nM[networkMappings[120]] = MWn.nM[networkMappings[120]];
            vnvwW.nM[networkMappings[77]] = wMW.nM[networkMappings[77]] + Math[networkMappings[68]](50 * Vv);
            vnvwW.nM[networkMappings[120]] = wMW.nM[networkMappings[120]];
            vWV.nM[networkMappings[77]] = wMW.nM[networkMappings[77]];
            vWV.nM[networkMappings[120]] = wMW.nM[networkMappings[120]] + Math[networkMappings[68]](44.5 * Vv);
            vVn.nM[networkMappings[77]] = vWV.nM[networkMappings[77]];
            vVn.nM[networkMappings[120]] = vWV.nM[networkMappings[120]] + Math[networkMappings[68]](44.5 * Vv);
            nVvmw.nM[networkMappings[77]] = MWn.nM[networkMappings[77]];
            nVvmw.nM[networkMappings[120]] = MWn.nM[networkMappings[120]] + Math[networkMappings[68]](127 * Vv);
            vVW.nM[networkMappings[77]] = ((Vmn - Math[networkMappings[68]](34 * Vv)) + Math[networkMappings[68]](-7 * Vv)) - nMw;
            vVW.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            mwWmw.nM[networkMappings[77]] = vVW.nM[networkMappings[77]];
            mwWmw.nM[networkMappings[120]] = vVW.nM[networkMappings[120]];
            VwNVv[networkMappings[77]] = (Wvm - Math[networkMappings[68]](150 * Vv)) + nMw;
            Nmwvm[networkMappings[209]] = VwNVv[networkMappings[77]] + "px";
            VwNVv[networkMappings[120]] = (Math[networkMappings[4]](0, NMv - 12) + Math[networkMappings[68]](150 * Vv)) + wVW;
            Nmwvm[networkMappings[178]] = VwNVv[networkMappings[120]] + "px";
            var WwVmv = document[networkMappings[61]]("chatInput")[networkMappings[174]];
            var vw = Math[networkMappings[68]](250 * Vv);
            var Vw = Math[networkMappings[68]](20 * Vv);
            var mmv = Math[networkMappings[68]](Wvm - (vw / 2)) + "px";
            var WmV = Math[networkMappings[68]](((NMv - (Vw / 2)) + (Vv * 85)) + wVW) + "px";
            Vw = Vw + "px";
            vw = vw + "px";
            Nmwvm[networkMappings[65]] = vw;
            Nmwvm[networkMappings[12]] = Vw;
            Nmwvm[networkMappings[209]] = mmv;
            Nmwvm[networkMappings[178]] = WmV;
            WwVmv[networkMappings[65]] = vw;
            WwVmv[networkMappings[12]] = Vw;
            WwVmv[networkMappings[239]] = Math[networkMappings[68]](14 * Vv) + "px";
        };;

        function MW() {
            if (NvWVm() === 0) return;
            nWnNw();
            value[networkMappings[113]](0, 0, Vmn, mMn);
            game.mNWMW();
            game.WWvWN();
            VN.Vmmww();
            VN.mnv();
            VN.VvW(wNVNn.nM[networkMappings[77]], wNVNn.nM[networkMappings[120]]);
            VN.NMN(MWn.nM[networkMappings[77]], MWn.nM[networkMappings[120]]);
            VN.mWV(vnn, delta, WMw, mmn);
            wNVNn.MW();
            MWn.MW();
            wMW.MW();
            vnvwW.MW();
            vWV.MW();
            vVn.MW();
            nVvmw.MW();
            VN.MNwnM(wNVNn.nM[networkMappings[77]], wNVNn.nM[networkMappings[120]]);
            if (game.Wvv !== game.vVwwV) {
                if (vVW.nM[networkMappings[40]] === 0) {
                    mvV.MW();
                    VN.mvV(mvV.nM[networkMappings[77]], mvV.nM[networkMappings[120]]);
                    vVW.MW();
                } else mwWmw.MW();
            }
            if (vnW === 1) {
                if (nvN === 1) VN.Mwwmm(wVmvW, secondaryElement);
                else if (NMM === 1) VN.nVVWv(vwmNW, VWnnM, mwmMV, NWnwN, nnMnv, MmnwN, NwmnM, VvnWn, wNmMW, vvnwM, secondaryElement, WmMmM, mWVnn, Vnvvn);
                else if (nnn === 1) VN.WnV(initialize, secondaryElement, primaryCollection, NmmvW, mmmwW, WMMMw, mainCollection, mainElement, vnn, delta, time, WMWVm, wMVvv, VWnWn);
                else if (nMMwM === 1) VN.WVm(mNWnW, secondaryElement, vnn, delta);
                else if (vmvNV === 1) VN.healthStatus(secondaryElement, wWvVN, VwWmw, vnMMv, mnNWN, wNmWv, NNVvM, nvwmV);
            } else if (wVw === 1) {
                if ((((VVW.nVMMM() + VVW.WVNWW()) + VVW.MNMmM()) + VVW.nMNWV()) >= 1) {
                    value[networkMappings[192]] = 0.3;
                    var vn = mWW - (nnNMm * 1.5);
                    var WM = wmVNn + (nnNMm / 4);
                    Wn.vvWNm(value, vn, WM, 60);
                    Wn.VMWmV(value, "#000000");
                    Wn.vvWNm(value, vn + ((Math[networkMappings[218]](MwVmn) * WvmWw) * Vv), WM + ((Math[networkMappings[147]](MwVmn) * WvmWw) * Vv), 30);
                    Wn.VMWmV(value, "#FFFFFF");
                    value[networkMappings[192]] = 1;
                }
                if (MnvmV === 1) {
                    value[networkMappings[192]] = 0.3;
                    var vn = mWW + (nnNMm * 1.5);
                    var WM = wmVNn + (nnNMm / 4);
                    Wn.vvWNm(value, vn, WM, 60);
                    Wn.VMWmV(value, "#000000");
                    Wn.vvWNm(value, vn + ((Math[networkMappings[218]](WNw[networkMappings[142]]) * 25) * Vv), WM + ((Math[networkMappings[147]](WNw[networkMappings[142]]) * 25) * Vv), 30);
                    Wn.VMWmV(value, "#FFFFFF");
                    value[networkMappings[192]] = 1;
                }
            }
            wvW.WNmWW();
        };;

        function NvWVm() {
            if (wwV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    wwV = 0;
                    wMW.NnW(textFormatter.mwv);
                    vnvwW.NnW(textFormatter.mwv);
                    vWV.NnW(textFormatter.mwv);
                    vVn.NnW(textFormatter.mwv);
                    nVvmw.NnW(textFormatter.mwv);
                    vVW.NnW(textFormatter.mwv);
                    mwWmw.NnW(textFormatter.mwv);
                    Nmwvm[networkMappings[162]] = "none";
                    wVM.Wwv();
                    return 0;
                }
                mMV -= WW;
            } else if (WVV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    WVV = 0;
                    game.player.nNnwv = Date[networkMappings[237]]();
                    NMNnV();
                }
                mMV -= WW;
            }
            return 1;
        };;

        function mnN(mV) {
            WNw.extra(mV, WNw.VVwmw);
            var wv = 0;
            if (wMW.nN() === 1) {
                wv = 1;
            }
            if (vnvwW.nN() === 1) {
                wv = 1;
            }
            if (vWV.nN() === 1) {
                wv = 1;
            }
            if (vVn.nN() === 1) {
                wv = 1;
            }
            if (nVvmw.nN() === 1) {
                wv = 1;
            }
            if (vVW.nN() === 1) {
                wv = 1;
            }
            if (mwWmw.nN() === 1) {
                wv = 1;
            }
            if (game.player.wmn !== 0) {
                if ((NWWNN.nN() === 1) || (vwWNm.nN() === 1)) wv = 1;
            }
            if (vnW === 1) {
                secondaryElement.nN();
                if (NMM === 1) {
                    nnMnv.nN();
                    MmnwN.nN();
                    VWnnM.nN();
                    mwmMV.nN();
                    NWnwN.nN();
                    NwmnM.nN();
                    VvnWn.nN();
                    wNmMW.nN();
                    vvnwM.nN();
                    mWVnn.nN();
                    WmMmM.nN();
                    Vnvvn.nN();
                } else if (nnn === 1) {
                    if (game.player.MwV === -1) {
                        if ((game.player.nNmMN === 0) || (game.player.wvw === 1)) NmmvW.nN();
                        else mmmwW.nN();
                        if ((((game.player.NvN === mw.VmM) || (game.player.NvN === mw.mnM)) || (game.player.NvN === mw.MWV)) && (game.player.vN.wWV !== 255)) time.nN();
                        else if ((((game.player.NvN === mw.mnm) || (game.player.NvN === mw.nVm)) || (game.player.NvN === mw.MWw)) && (game.player.vN.wWV !== 255)) WMWVm.nN();
                        else if ((game.player.NvN === mw.nwW) && (game.player.vN.wWV !== 255)) wMVvv.nN();
                    } else WMMMw.nN();
                    for (var vM = 0; vM < primaryCollection[networkMappings[231]]; vM++) primaryCollection[vM].nN();
                    for (vM = 0; vM < mainCollection[networkMappings[231]]; vM++) {
                        if ((game.player.vNnWV === vM) || (vM === 0)) mainCollection[vM].nN();
                    }
                    var tokenIndex = game.player.VNvVW;
                    for (var vM = 0; vM < tokenIndex; vM++) WnV[vM].nN();
                    tokenIndex = game.player.VMmWm;
                    for (vM = 0; vM < tokenIndex; vM++) NMW[vM].nN();
                    if (game.player.wvw === 1) {
                        for (vM = 0; vM < game.player.vN.tokenIndex; vM++) WWN[vM].nN();
                    }
                    tokenIndex = game.player.WWvvw;
                    for (vM = 0; vM < tokenIndex; vM++) vvWvn[vM].nN();
                    mainElement.nN();
                }
            }
            var ww = game.player.mWV;
            var tokenIndex = ww[networkMappings[231]];
            if ((tokenIndex > 10) && (mmn.nN() === 1)) wv = 1;
            for (var vM = 0; vM < tokenIndex; vM++) {
                if ((vM > 9) && (mmn[networkMappings[103]] === 0)) break;
                if (mWV[vM].nN() === 1) {
                    wv = 1;
                    if (ww[vM][0] !== 0) {
                        var vWW = game.player.vWW;
                        if (vWW.wnv === 0) {
                            vWW.wnv = 1;
                            vWW[networkMappings[77]] = WNw[networkMappings[77]];
                            vWW[networkMappings[120]] = WNw[networkMappings[120]];
                            vWW[networkMappings[109]] = vM;
                        }
                    }
                } else if (nMMwM === 1) {
                    var MwWVw = game.player.WVm;
                    for (var MNN = 0; MNN < 4; MNN++) {
                        if (MwWVw[MNN][0] !== 0) WVm[MNN].nN();
                    }
                } else if (vmvNV === 1) {
                    if (game.player.healthStatus === -1) {
                        mnNWN.nN();
                        var wm = 0;
                        for (var vM = 0; vM < NWvVw[networkMappings[231]]; vM++) {
                            if (game.gameData[vM].nNwMv !== 0) {
                                NWvVw[wm].nN();
                                wm++;
                            }
                        }
                    } else if (game.player.WvVnv === 1) {
                        wNmWv.nN();
                        NNVvM.nN();
                        nvwmV.nN();
                        var wm = 0;
                        var healthStatus = game.gameData[game.player.healthStatus];
                        for (var vM = 0; vM < game.playersList[networkMappings[231]]; vM++) {
                            if (vM === game.player[networkMappings[109]]) {
                                wm++;
                                continue;
                            }
                            var player = game.playersList[vM];
                            if ((player.healthStatus === healthStatus[networkMappings[109]]) && (player.NmM === healthStatus.wWW)) {
                                nWMVn[wm].nN();
                                wm++;
                            }
                        }
                    } else vnMMv.nN();
                }
            }
            if ((wv === 0) && (vnW === 0)) {
                NNMmm = 1;
                if (game.player[networkMappings[26]] === -1) game.player[networkMappings[26]] = 0;
            } else {
                if (game.player[networkMappings[26]] === 0) game.player[networkMappings[26]] = -1;
            }
        };;

        function vvW(mV) {
            WNw.extra(mV, WNw.mmNNn);
            var wv = 0;
            if (wMW.nN() === 1) {
                wv = 1;
                if (WMVnN === 0) {
                    WMVnN = 1;
                    Wn.nNwWm();
                    if (game.NMn === 0) nNv[networkMappings[174]][networkMappings[9]] = "#daeae6";
                    else nNv[networkMappings[174]][networkMappings[9]] = "#19435A";
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                } else {
                    WMVnN = 0;
                    Wn.nMNWw();
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                }
            }
            if (vnvwW.nN() === 1) {
                wv = 1;
                if (game.player.health === 0) {
                    if (nnn === 0) {
                        nWV();
                        vnW = 1;
                        nnn = 1;
                        game.wNm(mw.wVn);
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                        return;
                    } else {
                        nWV();
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                        return;
                    }
                }
            }
            if (vWV.nN() === 1) {
                wv = 1;
                if (NMM === 0) {
                    nWV();
                    vnW = 1;
                    NMM = 1;
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                } else {
                    nWV();
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                }
            }
            if (vVn.nN() === 1) {
                wv = 1;
                if (nvN === 0) {
                    nWV();
                    vnW = 1;
                    nvN = 1;
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                } else {
                    nWV();
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                }
            }
            if (nVvmw.nN() === 1) {
                wv = 1;
                if (vmvNV === 0) {
                    nWV();
                    vnW = 1;
                    vmvNV = 1;
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                } else {
                    nWV();
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                }
            }
            if (vVW.nN() === 1) {
                wv = 1;
                vVW.Vwv();
                mwWmw[networkMappings[249]]();
                localStorage[networkMappings[76]]("showLeaderboard", "0");
                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                return;
            }
            if (mwWmw.nN() === 1) {
                wv = 1;
                mwWmw.Vwv();
                vVW[networkMappings[249]]();
                localStorage[networkMappings[76]]("showLeaderboard", "1");
                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                return;
            }
            var vWW = game.player.vWW;
            if (game.player.wmn !== 0) {
                if (NWWNN.nN() === 1) {
                    network.VMw(JSON[networkMappings[185]]([31, game.player.wmn]));
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    game.VNVMn();
                    return;
                }
                if (vwWNm.nN() === 1) {
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    game.VNVMn();
                    return;
                }
            }
            if (vnW === 1) {
                if (secondaryElement.nN() === 1) {
                    nWV();
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                }
                if (NMM === 1) {
                    MmnwN.NnW(textFormatter.mwv);
                    nnMnv.NnW(textFormatter.mwv);
                    VWnnM.NnW(textFormatter.mwv);
                    mwmMV.NnW(textFormatter.mwv);
                    NWnwN.NnW(textFormatter.mwv);
                    NwmnM.NnW(textFormatter.mwv);
                    VvnWn.NnW(textFormatter.mwv);
                    wNmMW.NnW(textFormatter.mwv);
                    vvnwM.NnW(textFormatter.mwv);
                    WmMmM.NnW(textFormatter.mwv);
                    mWVnn.NnW(textFormatter.mwv);
                    Vnvvn.NnW(textFormatter.mwv);
                    if (nnMnv.nN() === 1) {
                        VVW.NvWwV();
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (MmnwN.nN() === 1) {
                        VVW.NwWvW();
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (VWnnM.nN() === 1) {
                        Wn.VnMmM(1);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (mwmMV.nN() === 1) {
                        Wn.VnMmM(2);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (NWnwN.nN() === 1) {
                        Wn.VnMmM(3);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (NwmnM.nN() === 1) {
                        MM.VVWnW(1);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (VvnWn.nN() === 1) {
                        MM.VVWnW(0);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (wNmMW.nN() === 1) {
                        MM.WWMnM(1);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (vvnwM.nN() === 1) {
                        MM.WWMnM(0);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (mWVnn.nN() === 1) {
                        VN.VWNmW(1);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (WmMmM.nN() === 1) {
                        VN.VWNmW(2);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (Vnvvn.nN() === 1) {
                        VN.VWNmW(0);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    }
                    var MvVmV = vwmNW.nM;
                    if ((((WNw.MWM < MvVmV[networkMappings[77]]) || (WNw.MWM > (MvVmV[networkMappings[77]] + (234 * Vv)))) || (WNw.vWN < MvVmV[networkMappings[120]])) || (WNw.vWN > (MvVmV[networkMappings[120]] + (232 * Vv)))) {
                        nWV();
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                        return;
                    }
                } else if (nvN === 1) {
                    var mwmNn = wVmvW.nM;
                    if ((((WNw.MWM < mwmNn[networkMappings[77]]) || (WNw.MWM > (mwmNn[networkMappings[77]] + (412 * Vv)))) || (WNw.vWN < mwmNn[networkMappings[120]])) || (WNw.vWN > (mwmNn[networkMappings[120]] + (412 * Vv)))) {
                        nWV();
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                        return;
                    }
                } else if (nnn === 1) {
                    if (game.player.MwV === -1) {
                        if ((game.player.nNmMN === 0) || (game.player.wvw === 1)) {
                            if ((game.player.Vnm[game.player.MWvwN] === 1) && (NmmvW.nN() === 1)) {
                                if (game.player.wvw === 1) {
                                    if ((game.player.vN.wWV !== 0) && (game.player.vN.tokenIndex < 4)) {
                                        network.VMw(JSON[networkMappings[185]]([18, game.player.wNnWw]));
                                        MM.nmM(MM.Mn.WnV, 0.8, 0);
                                    }
                                } else {
                                    network.VMw(JSON[networkMappings[185]]([22, game.player.wNnWw]));
                                    MM.nmM(MM.Mn.WnV, 0.8, 0);
                                }
                                NmmvW.NnW(textFormatter.mwv);
                            }
                        } else if (mmmwW.nN() === 1) {
                            network.VMw(JSON[networkMappings[185]]([23]));
                            game.player.nNmMN = 0;
                            mmmwW.NnW(textFormatter.mwv);
                            MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        }
                    } else {
                        if (WMMMw.nN() === 1) {
                            if (game.player.Vnm[game.player.MWvwN] === 1) {
                                network.VMw(JSON[networkMappings[185]]([21, game.player.wNnWw]));
                                MM.nmM(MM.Mn.mvNnn, 1, 0);
                            }
                        }
                    }
                    if (primaryCollection[wn.WNvWM].nN() === 1) {
                        game.mVw(wn.WNvWM);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (primaryCollection[wn.MVV].nN() === 1) {
                        game.mVw(wn.MVV);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (primaryCollection[wn.mNV].nN() === 1) {
                        game.mVw(wn.mNV);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (primaryCollection[wn.WNWVW].nN() === 1) {
                        game.mVw(wn.WNWVW);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (primaryCollection[wn.mwMnV].nN() === 1) {
                        game.mVw(wn.mwMnV);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (primaryCollection[wn.MwMMN].nN() === 1) {
                        game.mVw(wn.MwMMN);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (primaryCollection[wn.Wnv].nN() === 1) {
                        game.mVw(wn.Wnv);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (primaryCollection[wn.mNm].nN() === 1) {
                        game.mVw(wn.mNm);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (primaryCollection[wn.VMMNM].nN() === 1) {
                        game.mVw(wn.VMMNM);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (primaryCollection[wn.MMN].nN() === 1) {
                        game.mVw(wn.MMN);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (mainCollection[mw.wVn].nN() === 1) {
                        game.wNm(mw.wVn);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (((mainCollection[mw.VmM].nN() === 1) || (mainCollection[mw.mnM].nN() === 1)) || (mainCollection[mw.MWV].nN() === 1)) {
                        network.VMw(JSON[networkMappings[185]]([game.player.wvv, game.player.MWnvV, game.player.mNwVm]));
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (mainCollection[mw.wVv].nN() === 1) {
                        network.VMw(JSON[networkMappings[185]]([game.player.wvv, game.player.MWnvV, game.player.mNwVm]));
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (mainCollection[mw.Www].nN() === 1) {
                        network.VMw(JSON[networkMappings[185]]([game.player.wvv, game.player.MWnvV, game.player.mNwVm]));
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (mainCollection[mw.VWN].nN() === 1) {
                        network.VMw(JSON[networkMappings[185]]([game.player.wvv, game.player.MWnvV, game.player.mNwVm]));
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (mainCollection[mw.wmW].nN() === 1) {
                        network.VMw(JSON[networkMappings[185]]([game.player.wvv, game.player.MWnvV, game.player.mNwVm]));
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if ((mainCollection[mw.nvw].nN() === 1) || (mainCollection[mw.nwW].nN() === 1)) {
                        network.VMw(JSON[networkMappings[185]]([game.player.wvv, game.player.MWnvV, game.player.mNwVm]));
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else if (((mainCollection[mw.mnm].nN() === 1) || (mainCollection[mw.nVm].nN() === 1)) || (mainCollection[mw.MWw].nN() === 1)) {
                        network.VMw(JSON[networkMappings[185]]([game.player.wvv, game.player.MWnvV, game.player.mNwVm]));
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    } else {
                        var tokenIndex = game.player.VNvVW;
                        for (var vM = 0; vM < tokenIndex; vM++) {
                            if (WnV[vM].nN() === 1) {
                                game.player.MWvwN = vM;
                                game.vVmnw(game.player.mainCollection[vM]);
                                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                                return;
                            }
                        }
                        tokenIndex = game.player.VMmWm;
                        for (vM = 0; vM < tokenIndex; vM++) {
                            if (NMW[vM].nN() === 1) return;
                        }
                        if (game.player.wvw === 1) {
                            for (vM = 0; vM < game.player.vN.tokenIndex; vM++) {
                                if (WWN[vM].nN() === 1) {
                                    network.VMw(JSON[networkMappings[185]]([19, vM]));
                                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                                    return;
                                }
                            }
                            if (((game.player.NvN === mw.VmM) || (game.player.NvN === mw.mnM)) || (game.player.NvN === mw.MWV)) {
                                if ((game.player.vN.wWV !== 255) && (time.nN() === 1)) {
                                    network.VMw(JSON[networkMappings[185]]([24]));
                                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                                    return;
                                }
                            } else if (((game.player.NvN === mw.mnm) || (game.player.NvN === mw.nVm)) || (game.player.NvN === mw.MWw)) {
                                if ((game.player.vN.wWV !== 255) && (WMWVm.nN() === 1)) {
                                    network.VMw(JSON[networkMappings[185]]([24]));
                                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                                    return;
                                }
                            } else if ((game.player.NvN === mw.nvw) || (game.player.NvN === mw.nwW)) {
                                if ((game.player.vN.wWV !== 255) && (wMVvv.nN() === 1)) {
                                    network.VMw(JSON[networkMappings[185]]([24]));
                                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                                    return;
                                }
                            }
                        }
                        var vnVWN = initialize.nM;
                        if (((vWW.wnv !== 1) && !mV[networkMappings[172]]) && ((((WNw.MWM < vnVWN[networkMappings[77]]) || (WNw.MWM > (vnVWN[networkMappings[77]] + (595 * Vv)))) || (WNw.vWN < vnVWN[networkMappings[120]])) || (WNw.vWN > (vnVWN[networkMappings[120]] + (325 * Vv))))) {
                            nWV();
                            MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                            return;
                        }
                    }
                } else if (nMMwM === 1) {
                    var MwWVw = game.player.WVm;
                    for (var MNN = 0; MNN < 4; MNN++) {
                        if ((MwWVw[MNN][0] !== 0) && (WVm[MNN].nN() === 1)) {
                            network.VMw(JSON[networkMappings[185]]([27, MNN]));
                            MM.nmM(MM.Mn.vWW, 1, 0);
                            return;
                        }
                    }
                } else if (vmvNV === 1) {
                    if (game.player.healthStatus === -1) {
                        if (((mnNWN.nN() === 1) && (game.player.wnwwV === 1)) && ((Date[networkMappings[237]]() - game.player.NmVvv) > 30500)) {
                            network.VMw(JSON[networkMappings[185]]([28, gameManager.gameSettings]));
                            MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                            game.player.NmVvv = Date[networkMappings[237]]();
                        }
                        if ((Date[networkMappings[237]]() - game.player.nNmnm) > 10500) {
                            var wm = 0;
                            for (var vM = 0; vM < NWvVw[networkMappings[231]]; vM++) {
                                if (game.gameData[vM].nNwMv !== 0) {
                                    if (NWvVw[wm].nN() === 1) {
                                        network.VMw(JSON[networkMappings[185]]([30, vM]));
                                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                                        game.player.nNmnm = Date[networkMappings[237]]();
                                    }
                                    wm++;
                                }
                            }
                        }
                    } else if (game.player.WvVnv === 1) {
                        if ((wNmWv.nN() === 1) && (game.player.wmMVV === 0)) {
                            network.VMw(JSON[networkMappings[185]]([33]));
                            game.player.wmMVV = 1;
                            MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                            return;
                        }
                        if ((NNVvM.nN() === 1) && (game.player.wmMVV === 1)) {
                            network.VMw(JSON[networkMappings[185]]([34]));
                            game.player.wmMVV = 0;
                            MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                            return;
                        }
                        if (nvwmV.nN() === 1) {
                            network.VMw(JSON[networkMappings[185]]([29]));
                            MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                            return;
                        }
                        var wm = 0;
                        var healthStatus = game.gameData[game.player.healthStatus];
                        for (var vM = 0; vM < game.playersList[networkMappings[231]]; vM++) {
                            if (vM === game.player[networkMappings[109]]) {
                                wm++;
                                continue;
                            }
                            var player = game.playersList[vM];
                            if ((player.healthStatus === healthStatus[networkMappings[109]]) && (player.NmM === healthStatus.wWW)) {
                                if (nWMVn[wm].nN() === 1) {
                                    network.VMw(JSON[networkMappings[185]]([32, player[networkMappings[109]]]));
                                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                                    return;
                                }
                                wm++;
                            }
                        }
                    } else {
                        if (vnMMv.nN() === 1) {
                            network.VMw(JSON[networkMappings[185]]([35, game.player[networkMappings[109]]]));
                            MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                            return;
                        }
                    }
                }
            };
            var ww = game.player.mWV;
            var tokenIndex = ww[networkMappings[231]];
            var NwwWv = 0;
            if ((tokenIndex > 10) && (mmn.nN() === 1)) {
                mmn[networkMappings[103]] = (mmn[networkMappings[103]] + 1) % 2;
                if (mmn[networkMappings[103]] === 1) MM.nmM(MM.Mn.MwWwM, 0.08, 0);
                else MM.nmM(MM.Mn.nnWww, 0.08, 0);
            }
            for (var vM = 0; vM < tokenIndex; vM++) {
                if ((vM > 9) && (mmn[networkMappings[103]] === 0)) break;
                if (mWV[vM].nN() === 1) {
                    NwwWv = 1;
                    var mN = ww[vM][0];
                    var nW = ww[vM][1];
                    var MVM = ww[vM][2];
                    var VNNNW = ww[vM][3];
                    var mv = Mww[mN];
                    if (vWW.wnv === 1) {
                        if (vWW[networkMappings[109]] !== vM) {
                            if (ww[vM][0] === ww[vWW[networkMappings[109]]][0]) {
                                if ((mv[networkMappings[69]] > ww[vM][1]) && (mv[networkMappings[69]] > ww[vWW[networkMappings[109]]][1])) {
                                    network.VMw(JSON[networkMappings[185]]([10, ww[vWW[networkMappings[109]]][0], ww[vWW[networkMappings[109]]][1], ww[vWW[networkMappings[109]]][2], ww[vM][1], ww[vM][2]]));
                                    game.player.vWW.wnv = 0;
                                    MM.nmM(MM.Mn.vWW, 1, 0);
                                    return;
                                }
                            }
                            ww[vM][0] = ww[vWW[networkMappings[109]]][0];
                            ww[vM][1] = ww[vWW[networkMappings[109]]][1];
                            ww[vM][2] = ww[vWW[networkMappings[109]]][2];
                            ww[vM][3] = ww[vWW[networkMappings[109]]][3];
                            ww[vWW[networkMappings[109]]][0] = mN;
                            ww[vWW[networkMappings[109]]][1] = nW;
                            ww[vWW[networkMappings[109]]][2] = MVM;
                            ww[vWW[networkMappings[109]]][3] = VNNNW;
                            if (mN !== 0) gameManager.mWV[vWW[networkMappings[109]]].nNn(Mww[mN].NN[networkMappings[10]], Mww[mN].NN.n);
                            gameManager.mWV[vM].nNn(Mww[ww[vM][0]].NN[networkMappings[10]], Mww[ww[vM][0]].NN.n);
                            game.player.vWW.wnv = 0;
                            MM.nmM(MM.Mn.vWW, 1, 0);
                            return;
                        }
                        game.player.vWW.wnv = 0;
                    }
                    if (mN !== 0) {
                        if ((nMMwM === 1) && (mV[networkMappings[107]] !== 3)) {
                            network.VMw(JSON[networkMappings[185]]([26, mN, nW, MVM, VNNNW]));
                            MM.nmM(MM.Mn.vWW, 1, 0);
                        } else if (mV[networkMappings[107]] === 3) {
                            network.VMw(JSON[networkMappings[185]]([9, mN, nW, MVM, VNNNW]));
                            MM.nmM(MM.Mn.nnvnw, 1, 0);
                        } else {
                            if (mV[networkMappings[172]]) {
                                MM.nmM(MM.Mn.vWW, 0.6, 0);
                                network.VMw(JSON[networkMappings[185]]([11, mN, nW, MVM]));
                            } else network.VMw(JSON[networkMappings[185]]([8, mN, nW, MVM, VNNNW]));
                        }
                    }
                }
            }
            if ((nMMwM === 1) && (NwwWv === 0)) {
                var mwmVW = mNWnW.nM;
                if ((((WNw.MWM < mwmVW[networkMappings[77]]) || (WNw.MWM > (mwmVW[networkMappings[77]] + (161 * Vv)))) || (WNw.vWN < mwmVW[networkMappings[120]])) || (WNw.vWN > (mwmVW[networkMappings[120]] + (165 * Vv)))) {
                    nWV();
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                }
            }
            if (vWW.wnv === 1) {
                var vM = vWW[networkMappings[109]];
                network.VMw(JSON[networkMappings[185]]([9, ww[vM][0], ww[vM][1], ww[vM][2], ww[vM][3]]));
                MM.nmM(MM.Mn.nnvnw, 1, 0);
            }
            vWW.wnv = 0;
        };;

        function mwM(mV) {
            WNw.extra(mV, WNw.MwnMN);
            var wv = 0;
            if (wMW.nN() === 1) {
                wv = 1;
            }
            if (vnvwW.nN() === 1) {
                wv = 1;
            }
            if (vWV.nN() === 1) {
                wv = 1;
            }
            if (vVn.nN() === 1) {
                wv = 1;
            }
            if (nVvmw.nN() === 1) {
                wv = 1;
            }
            if (vVW.nN() === 1) {
                wv = 1;
            }
            if (mwWmw.nN() === 1) {
                wv = 1;
            }
            if (game.player.wmn !== 0) {
                NWWNN.nN();
                vwWNm.nN();
            }
            if (vnW === 1) {
                secondaryElement.nN();
                if (NMM === 1) {
                    nnMnv.nN();
                    MmnwN.nN();
                    VWnnM.nN();
                    mwmMV.nN();
                    NWnwN.nN();
                    NwmnM.nN();
                    VvnWn.nN();
                    wNmMW.nN();
                    vvnwM.nN();
                    mWVnn.nN();
                    WmMmM.nN();
                    Vnvvn.nN();
                } else if (nnn === 1) {
                    if (game.player.MwV === -1) {
                        if ((game.player.nNmMN === 0) || (game.player.wvw === 1)) NmmvW.nN();
                        else mmmwW.nN();
                    } else WMMMw.nN();
                    for (var vM = 0; vM < primaryCollection[networkMappings[231]]; vM++) primaryCollection[vM].nN();
                    for (vM = 0; vM < mainCollection[networkMappings[231]]; vM++) {
                        if ((game.player.vNnWV === vM) || (vM === 0)) mainCollection[vM].nN();
                    }
                    var tokenIndex = game.player.VNvVW;
                    for (var vM = 0; vM < tokenIndex; vM++) WnV[vM].nN();
                    VWnWn = -1;
                    tokenIndex = game.player.VMmWm;
                    for (vM = 0; vM < tokenIndex; vM++) {
                        if (NMW[vM].nN() === 1) VWnWn = vM;
                    }
                    if (game.player.wvw === 1) {
                        for (vM = 0; vM < game.player.vN.tokenIndex; vM++) WWN[vM].nN();
                        if ((((game.player.NvN === mw.VmM) || (game.player.NvN === mw.mnM)) || (game.player.NvN === mw.MWV)) && (game.player.vN.wWV !== 255)) time.nN();
                        else if (((((game.player.NvN === mw.mnm) || (game.player.NvN === mw.nVm)) || (game.player.NvN === mw.MWw)) || (game.player.NvN === mw.nwW)) && (game.player.vN.wWV !== 255)) WMWVm.nN();
                        else if ((game.player.NvN === mw.nwW) && (game.player.vN.wWV !== 255)) wMVvv.nN();
                    }
                    tokenIndex = game.player.WWvvw;
                    for (vM = 0; vM < tokenIndex; vM++) vvWvn[vM].nN();
                    mainElement.nN();
                } else if (nMMwM === 1) {
                    var MwWVw = game.player.WVm;
                    for (var MNN = 0; MNN < 4; MNN++) {
                        if (MwWVw[MNN][0] !== 0) WVm[MNN].nN();
                    }
                } else if (vmvNV === 1) {
                    if (game.player.healthStatus === -1) {
                        mnNWN.nN();
                        var wm = 0;
                        for (var vM = 0; vM < NWvVw[networkMappings[231]]; vM++) {
                            if (game.gameData[vM].nNwMv !== 0) {
                                NWvVw[wm].nN();
                                wm++;
                            }
                        }
                    } else if (game.player.WvVnv === 1) {
                        wNmWv.nN();
                        NNVvM.nN();
                        nvwmV.nN();
                        var wm = 0;
                        var healthStatus = game.gameData[game.player.healthStatus];
                        for (var vM = 0; vM < game.playersList[networkMappings[231]]; vM++) {
                            if (vM === game.player[networkMappings[109]]) {
                                wm++;
                                continue;
                            }
                            var player = game.playersList[vM];
                            if ((player.healthStatus === healthStatus[networkMappings[109]]) && (player.NmM === healthStatus.wWW)) {
                                nWMVn[wm].nN();
                                wm++;
                            }
                        }
                    } else vnMMv.nN();
                }
            }
            var ww = game.player.mWV;
            var tokenIndex = ww[networkMappings[231]];
            WMw = -1;
            if (tokenIndex > 10) mmn.nN();
            for (var vM = 0; vM < tokenIndex; vM++) {
                if ((vM > 9) && (mmn[networkMappings[103]] === 0)) break;
                if (ww[vM][0] !== 0) {
                    if (mWV[vM].nN() === 1) WMw = vM;
                }
            }
        };;

        function Vvw(mV) {
            VVW.mMMwM(mV);
            if ((vmvNV === 1) && (game.player.healthStatus === -1)) {
                if ((mV[networkMappings[106]] === 8) && (gameManager.gameSettings[networkMappings[231]] > 0)) {
                    gameManager.gameSettings = gameManager.gameSettings[networkMappings[151]](0, gameManager.gameSettings[networkMappings[231]] - 1);
                    mV[networkMappings[180]]();
                    return;
                } else if (((mV[networkMappings[106]] >= 65) && (mV[networkMappings[106]] <= 90)) || ((mV[networkMappings[106]] >= 48) && (mV[networkMappings[106]] <= 57))) {
                    if (gameManager.gameSettings[networkMappings[231]] < 5) gameManager.gameSettings += String[networkMappings[176]](mV[networkMappings[106]]);
                }
            } else if ((WnmnN === 1) && (mV[networkMappings[106]] === 27)) {
                WnmnN = 0;
                Nmwvm[networkMappings[162]] = "none";
            } else if (mV[networkMappings[106]] === 13) {
                if (WnmnN === 1) {
                    if (mwMMw[networkMappings[230]][networkMappings[231]] > 0) {
                        if ((game.player.vvMWw === 1) && (mwMMw[networkMappings[230]][0] === '!')) {
                            if (mwMMw[networkMappings[230]] === '!pos') game.playersList[game.player[networkMappings[109]]][networkMappings[81]][networkMappings[140]]((Math[networkMappings[68]](game.player[networkMappings[77]] / 100) + ":") + Math[networkMappings[68]](game.player[networkMappings[120]] / 100));
                            else {
                                var mwWVv = mwMMw[networkMappings[230]][networkMappings[55]]('!');
                                for (var vM = 1; vM < mwWVv[networkMappings[231]]; vM++) {
                                    var mnvMm = "!" + mwWVv[vM];
                                    if (mnvMm[networkMappings[196]]("public") === -1) mnvMm = mnvMm[networkMappings[55]](" ")[networkMappings[164]]("");
                                    network.updateMethod(mnvMm);
                                    if (vM <= 20) game.playersList[game.player[networkMappings[109]]][networkMappings[81]][networkMappings[140]](mnvMm);
                                }
                            }
                        } else {
                            var messageHandler = network.updateMethod(mwMMw[networkMappings[230]]);
                            if (messageHandler !== 0) game.playersList[game.player[networkMappings[109]]][networkMappings[81]][networkMappings[140]](("I am muted during " + Math[networkMappings[68]](messageHandler / 1000)) + " seconds");
                            else game.playersList[game.player[networkMappings[109]]][networkMappings[81]][networkMappings[140]](mwMMw[networkMappings[230]]);
                        }
                    }
                    WnmnN = 0;
                    mwMMw[networkMappings[230]] = "";
                    Nmwvm[networkMappings[162]] = "none";
                } else {
                    WnmnN = 1;
                    Nmwvm[networkMappings[162]] = "inline-block";
                    mwMMw[networkMappings[100]]();
                }
            } else if (WnmnN === 0) {
                if (mV[networkMappings[106]] === 77) {
                    if (nvN === 0) {
                        nWV();
                        vnW = 1;
                        nvN = 1;
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    } else {
                        nWV();
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    }
                } else if ((mV[networkMappings[106]] === 69) || (mV[networkMappings[106]] === 32)) {
                    switch (game.player.mnv) {
                        case 0:
                            network.VMw(JSON[networkMappings[185]]([12, game.player.MVwWV]));
                            break;
                        case 2:
                            network.VMw(JSON[networkMappings[185]]([game.player.wvv, game.player.MWnvV, game.player.mNwVm]));
                            break;
                    }
                } else if (mV[networkMappings[106]] === 70) {
                    if (game.player.mWWWN === 1) network.VMw(JSON[networkMappings[185]]([12, game.player.MVwWV]));
                } else if (mV[networkMappings[106]] === 82) {
                    if (game.player.wMw === 1) game.player.vvVww = (game.player.vvVww + 1) % 4;
                    else network.VMw(JSON[networkMappings[185]]([13]));
                } else if ((mV[networkMappings[106]] >= 49) && (mV[networkMappings[106]] <= 57)) {
                    if (game.player.vWW.wnv !== 1) {
                        var vM = mV[networkMappings[106]] - 49;
                        var ww = game.player.mWV;
                        if (vM < ww[networkMappings[231]]) {
                            var mN = ww[vM][0];
                            var nW = ww[vM][1];
                            var MVM = ww[vM][2];
                            var VNNNW = ww[vM][3];
                            if (mV[networkMappings[21]]) {
                                network.VMw(JSON[networkMappings[185]]([9, mN, nW, MVM, VNNNW]));
                                MM.nmM(MM.Mn.nnvnw, 1, 0);
                            } else {
                                if (mV[networkMappings[172]]) {
                                    MM.nmM(MM.Mn.vWW, 0.6, 0);
                                    network.VMw(JSON[networkMappings[185]]([11, mN, nW, MVM]));
                                } else network.VMw(JSON[networkMappings[185]]([8, mN, nW, MVM, VNNNW]));
                            }
                        }
                    }
                } else if ((mV[networkMappings[106]] === 67) && (game.player.health === 0)) {
                    if (nnn === 0) {
                        nWV();
                        vnW = 1;
                        nnn = 1;
                        game.wNm(mw.wVn);
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    } else {
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                        nWV();
                    }
                } else if ((mV[networkMappings[106]] === 27) && (vnW === 1)) {
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    nWV();
                }
            }
        };;

        function mwn(mV) {
            VVW.nwNNV(mV);
            if ((((mV[networkMappings[106]] === 37) || (mV[networkMappings[106]] === 38)) || (mV[networkMappings[106]] === 39)) || (mV[networkMappings[106]] === 40)) {
                mV[networkMappings[180]]();
                return false;
            }
        };;

        function Vnw(mV) {
            var WMv = 0;
            for (var Wmw = 0; Wmw < mV[networkMappings[207]][networkMappings[231]]; Wmw++) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][Wmw]);
                if (mmn[networkMappings[103]] !== 0) {
                    var VmvNV = WNw[networkMappings[155]];
                    WNw.extra(WNW, WNw.VVwmw);
                    WNw[networkMappings[155]] = VmvNV;
                    var ww = game.player.mWV;
                    var vvnvw = 0;
                    for (var vM = 10; vM < ww[networkMappings[231]]; vM++) {
                        if (ww[vM][0] !== 0) {
                            if (mWV[vM].nN() === 1) {
                                vvnvw = 1;
                                break;
                            }
                        }
                    }
                    if (vvnvw === 1) {
                        mnN(WNW);
                        continue;
                    }
                }
                if ((game.player.vWW.wnv === 0) && (vnW === 0)) {
                    var MWM = Math[networkMappings[68]](WNW[networkMappings[175]] * Wn[networkMappings[139]].vmm);
                    var vWN = Math[networkMappings[68]](WNW[networkMappings[145]] * Wn[networkMappings[139]].NVNnm);
                    switch (game.player.mnv) {
                        case 2:
                            if (((((game.player.mWWWN === 1) && (MWM > gameManager.nwmvm)) && (vWN > gameManager.VwmNV)) && (MWM < (gameManager.nwmvm + gameManager.WnMnV))) && (vWN < (gameManager.VwmNV + gameManager.vnMMw))) {
                                mmvvw = 1;
                                WVN[networkMappings[106]] = 70;
                                WVN[networkMappings[104]] = 70;
                                Vvw(WVN);
                                continue;
                            }
                        case 0:
                            if ((((MWM > gameManager.MmNVw) && (vWN > gameManager.VVMvM)) && (MWM < (gameManager.MmNVw + gameManager.WnMnV))) && (vWN < (gameManager.VVMvM + gameManager.vnMMw))) {
                                mmvvw = 1;
                                WVN[networkMappings[106]] = 69;
                                WVN[networkMappings[104]] = 69;
                                Vvw(WVN);
                                continue;
                            }
                            break;
                    }
                    if (vWN < (mMn - (70 * Vv))) {
                        var mwm = WNmMW * 1.5;
                        var nmW = WNmMW / 4;
                        if (MWM < Wvm) {
                            var mwN = 30 * Vv;
                            MwVmn = MNM[networkMappings[142]](Wvm - mwm, NMv + nmW, MWM, vWN);
                            WvmWw = Math[networkMappings[250]](MNM.VNv(MWM, vWN, Wvm - mwm, NMv + nmW), 25);
                            if (MWM < ((Wvm - mwm) - mwN)) {
                                vVN |= 1;
                                WVN[networkMappings[104]] = 37;
                                WVN[networkMappings[106]] = 37;
                                mwn(WVN);
                            } else if (MWM > ((Wvm - mwm) + mwN)) {
                                vVN |= 2;
                                WVN[networkMappings[104]] = 39;
                                WVN[networkMappings[106]] = 39;
                                mwn(WVN);
                            }
                            if (vWN < ((NMv + nmW) - mwN)) {
                                vVN |= 4;
                                WVN[networkMappings[104]] = 38;
                                WVN[networkMappings[106]] = 38;
                                mwn(WVN);
                            } else if (vWN > ((NMv + nmW) + mwN)) {
                                vVN |= 8;
                                WVN[networkMappings[104]] = 40;
                                WVN[networkMappings[106]] = 40;
                                mwn(WVN);
                            }
                        } else if ((MWM < (Vmn - (40 * Vv))) || (vWN > (40 * Vv))) {
                            WMv = 1;
                            WNW[networkMappings[175]] -= mwm / Wn[networkMappings[139]].vmm;
                            WNW[networkMappings[145]] -= nmW / Wn[networkMappings[139]].vmm;
                            if (game.player.wMw === 1) {
                                var VVwWv = Date[networkMappings[237]]();
                                if ((VVwWv - mwnVn) < 1000) {
                                    MnvmV = 1;
                                    NWvwW = WNW[networkMappings[175]];
                                    VMWWM = WNW[networkMappings[145]];
                                    mnN(WNW);
                                }
                                mwnVn = VVwWv;
                            } else {
                                MnvmV = 1;
                                NWvwW = WNW[networkMappings[175]];
                                VMWWM = WNW[networkMappings[145]];
                                mnN(WNW);
                            }
                        }
                        continue;
                    }
                }
                if ((WMv === 0) && (vVN === 0)) {
                    mnN(WNW);
                    WMv = 1;
                }
            }
        };;

        function Nww(mV) {
            var MWM = Math[networkMappings[68]](mV[networkMappings[229]][0][networkMappings[175]] * Wn[networkMappings[139]].vmm);
            var vWN = Math[networkMappings[68]](mV[networkMappings[229]][0][networkMappings[145]] * Wn[networkMappings[139]].NVNnm);
            if (mmvvw === 1) mmvvw = 0;
            else if (vnW === 1) vvW(WNW);
            else if ((MnvmV === 1) && (MWM >= Wvm)) {
                MnvmV = 0;
                WNW[networkMappings[175]] = NWvwW;
                WNW[networkMappings[145]] = VMWWM;
                vvW(WNW);
                return;
            } else if (((game.player.vWW.wnv === 0) && (MWM < Wvm)) && (vWN < (mMn - (70 * Vv)))) {
                if ((MWM < (240 * Vv)) && (vWN < (160 * Vv))) vvW(WNW);
            } else vvW(WNW);
            if (vVN !== 0) {
                if (vVN & 1) {
                    WVN[networkMappings[104]] = 37;
                    Vvw(WVN);
                }
                if (vVN & 2) {
                    WVN[networkMappings[104]] = 39;
                    Vvw(WVN);
                }
                if (vVN & 4) {
                    WVN[networkMappings[104]] = 38;
                    Vvw(WVN);
                }
                if (vVN & 8) {
                    WVN[networkMappings[104]] = 40;
                    Vvw(WVN);
                }
                vVN = 0;
            }
        };;

        function WNv(mV) {};;

        function vwm(mV) {
            var WMv = 0;
            var nVWVn = 0;
            for (var Wmw = 0; Wmw < mV[networkMappings[207]][networkMappings[231]]; Wmw++) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][Wmw]);
                if (mmn[networkMappings[103]] !== 0) {
                    var ww = game.player.mWV;
                    var vvnvw = 0;
                    for (var vM = 10; vM < ww[networkMappings[231]]; vM++) {
                        if (ww[vM][0] !== 0) {
                            if (mWV[vM].nN() === 1) {
                                vvnvw = 1;
                                break;
                            }
                        }
                    }
                    if (vvnvw === 1) {
                        mwM(WNW);
                        continue;
                    }
                }
                if ((game.player.vWW.wnv === 0) && (vnW === 0)) {
                    var MWM = Math[networkMappings[68]](WNW[networkMappings[175]] * Wn[networkMappings[139]].vmm);
                    var vWN = Math[networkMappings[68]](WNW[networkMappings[145]] * Wn[networkMappings[139]].NVNnm);
                    if (vWN < (mMn - (70 * Vv))) {
                        var mwm = WNmMW * 1.5;
                        var nmW = WNmMW / 4;
                        if (MWM < Wvm) {
                            nVWVn = 1;
                            var mvw = 0;
                            var mwN = 30 * Vv;
                            MwVmn = MNM[networkMappings[142]](Wvm - mwm, NMv + nmW, MWM, vWN);
                            WvmWw = Math[networkMappings[250]](MNM.VNv(MWM, vWN, Wvm - mwm, NMv + nmW), 25);
                            if (MWM < ((Wvm - mwm) - mwN)) mvw |= 1;
                            else if (MWM > ((Wvm - mwm) + mwN)) mvw |= 2;
                            if (vWN < ((NMv + nmW) + -mwN)) mvw |= 4;
                            else if (vWN > ((NMv + nmW) + mwN)) mvw |= 8;
                            if (((mvw & 1) === 1) && ((vVN & 1) !== 1)) {
                                WVN[networkMappings[104]] = 37;
                                mwn(WVN);
                            } else if (((mvw & 1) !== 1) && ((vVN & 1) === 1)) {
                                WVN[networkMappings[104]] = 37;
                                Vvw(WVN);
                            }
                            if (((mvw & 2) === 2) && ((vVN & 2) !== 2)) {
                                WVN[networkMappings[104]] = 39;
                                mwn(WVN);
                            } else if (((mvw & 2) !== 2) && ((vVN & 2) === 2)) {
                                WVN[networkMappings[104]] = 39;
                                Vvw(WVN);
                            }
                            if (((mvw & 4) === 4) && ((vVN & 4) !== 4)) {
                                WVN[networkMappings[104]] = 38;
                                mwn(WVN);
                            } else if (((mvw & 4) !== 4) && ((vVN & 4) === 4)) {
                                WVN[networkMappings[104]] = 38;
                                Vvw(WVN);
                            }
                            if (((mvw & 8) === 8) && ((vVN & 8) !== 8)) {
                                WVN[networkMappings[104]] = 40;
                                mwn(WVN);
                            } else if (((mvw & 8) !== 8) && ((vVN & 8) === 8)) {
                                WVN[networkMappings[104]] = 40;
                                Vvw(WVN);
                            }
                            vVN = mvw;
                            continue;
                        } else if ((MWM < (Vmn - (40 * Vv))) || (vWN > (40 * Vv))) {
                            WMv = 1;
                            WNW[networkMappings[175]] -= mwm / Wn[networkMappings[139]].vmm;
                            WNW[networkMappings[145]] -= nmW / Wn[networkMappings[139]].vmm;
                            NWvwW = WNW[networkMappings[175]];
                            VMWWM = WNW[networkMappings[145]];
                            mwM(WNW);
                        }
                    }
                }
                if ((WMv === 0) && (vVN === 0)) {
                    mwM(WNW);
                    WMv = 1;
                }
            }
            if ((nVWVn === 0) && (vVN !== 0)) {
                if (vVN & 1) {
                    WVN[networkMappings[104]] = 37;
                    Vvw(WVN);
                }
                if (vVN & 2) {
                    WVN[networkMappings[104]] = 39;
                    Vvw(WVN);
                }
                if (vVN & 4) {
                    WVN[networkMappings[104]] = 38;
                    Vvw(WVN);
                }
                if (vVN & 8) {
                    WVN[networkMappings[104]] = 40;
                    Vvw(WVN);
                }
                vVN = 0;
            }
        };;

        function NMNnV() {
            if (wVw === 0) NV[networkMappings[116]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[116]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[116]]('mousemove', mwM, false);
            if (wVw === 0) NV[networkMappings[116]]('keyup', Vvw, false);
            if (wVw === 0) NV[networkMappings[116]]('keydown', mwn, false);
            if (wVw === 1) NV[networkMappings[116]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[116]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[116]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[116]]('touchmove', vwm, false);
        };;

        function wVmnV() {
            if (wVw === 0) NV[networkMappings[205]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[205]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[205]]('mousemove', mwM, false);
            if (wVw === 0) NV[networkMappings[205]]('keyup', Vvw, false);
            if (wVw === 0) NV[networkMappings[205]]('keydown', mwn, false);
            if (wVw === 1) NV[networkMappings[205]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[205]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[205]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[205]]('touchmove', vwm, false);
        };;
        return {
            mnV: mnV,
            nnM: nnM,
            Wwv: Wwv,
            update: verifyConnectionState,
            MW: MW
        };
    })();
    var nNVVV = (function() {
        function mNw(NWn) {};;

        function vwWmV() {
            mnV(gameManager);
        };;

        function mNN() {
            vwWmV();
        };;
        var mmw = 0;
        var NWWWm = {
            src: "img/adblocker-msg.png",
            n: {
                v: 0
            }
        };
        var NnMVV = 0;
        var vWmWM = -1;
        var MmWVn = null;
        var VWMNN = {
            n: null
        };
        var VVvmv = null;
        var nvvWv = {
            n: null
        };
        var NVmNW = -1;
        var mMNwV = {
            n: null
        };
        var nVv = null;
        var WwnNN = -1;
        var mnNNV = null;
        var MnMNn = {
            n: null
        };

        function WMVwv() {
            var vn = WvW.nM[networkMappings[77]];
            var WM = WvW.nM[networkMappings[120]];
            var nNw = vn / Vv;
            var wnM = WM / Vv;
            if ((nVv === null) || (NVmNW !== game.player.playerState)) {
                NVmNW = game.player.playerState;
                nVv = textFormatter.MwM(NVmNW + "", "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                mMNwV.n = nVv;
                mMNwV.n.v = 1;
            }
            Wn.MV(mMNwV, nNw + 280, wnM + 117, 0, 0, 0, 1);
            if ((MmWVn === null) || (vWmWM !== game.player[networkMappings[95]])) {
                vWmWM = game.player[networkMappings[95]];
                MmWVn = textFormatter.MwM(vWmWM + "", "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                VVvmv = textFormatter.MwM(Math[networkMappings[68]](vWmWM / 2), "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                VWMNN.n = MmWVn;
                VWMNN.n.v = 1;
                nvvWv.n = VVvmv;
                nvvWv.n.v = 1;
            }
            Wn.MV(VWMNN, nNw + 108, wnM + 117, 0, 0, 0, 1);
            Wn.MV(nvvWv, nNw + 288, wnM + 147, 0, 0, 0, 1);
            if ((mnNNV === null) || (WwnNN !== game.player.MMwnN)) {
                WwnNN = game.player.MMwnN;
                mnNNV = textFormatter.MwM(WwnNN + "", "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                MnMNn.n = mnNNV;
                MnMNn.n.v = 1;
            }
            Wn.MV(MnMNn, nNw + 453, wnM + 117, 0, 0, 0, 1);
            var mWV = gameManager.mWV;
            var ww = game.player.mWV;
            var tokenIndex = ww[networkMappings[231]];
            var mwN = 50 * Vv;
            var VwW = WM + (182 * Vv);
            var VVN = vn + (80 * Vv);
            var NwVMv = Vv;
            Vv = Vv - (0.3 * Vv);
            for (var vM = 0; vM < tokenIndex; vM++) {
                var NW = mWV[vM];
                if (ww[vM][0] !== 0) VN.nnvnm(NW, ww[vM], VVN, VwW, gameManager.vnn, gameManager.delta);
                VVN += mwN;
            }
            Vv = NwVMv;
            if (adminSettings.WwmWN === 1) {
                var wM = wvm.Mnm.vwW((NnMVV > 500) ? ((1000 - NnMVV) / 500) : (NnMVV / 500));
                value[networkMappings[192]] = 0.7;
                Wn.MV(NWWWm, nNw + 288, wnM + 193, 0, 0, 0, 1 + (0.04 * wM));
                value[networkMappings[192]] = 1;
                NnMVV = (NnMVV + WW) % 1000;
            }
        };;
        var nVN = 0;
        var WvW;
        var VvV;
        var mwV;

        function nnM() {
            WvW = textFormatter.nwn(541, 324, "img/scoreboardnew.png");
            VvV = textFormatter.vMV(123, 35, ["img/play-again-button-out.png", "img/play-again-button-in.png", "img/play-again-button-click.png"]);
            mwV = textFormatter.vMV(198, 35, ["img/back-main-page-button-out.png", "img/back-main-page-button-in.png", "img/back-main-page-button-click.png"]);
        };;
        var wVM;
        var WNW = new WNw.vVmwN;
        var WVN = new VVW.VwWVV;
        var wMm = 500;
        var wwV = 0;
        var Mnwmn = function(VNm) {
            return wvm.Mnm.WVVwM(VNm, wvm.Mnm.WWM, 0.05);
        };
        var Wnm = 500;
        var WVV = 0;
        var WmvwW = function(VNm) {
            return wvm.Mnm.WVVwM(VNm, wvm.Mnm.vNM, 0.05);
        };
        var NnM = 0;
        var mMV = 0;
        var VMv = undefined;

        function Wwv() {
            network.mNw = mNw;
            network.mNN = mNN;
            game.player.wMw = 0;
            game.player[networkMappings[109]] = 0;
            VN.VmMNn(0);
            VN.wWMMW();
            for (var vM = 0; vM < game.player.mWV[networkMappings[231]]; vM++) {
                for (var wm = 0; wm < 4; wm++) game.player.mWV[vM][wm] = 0;
            }
            var wWMnn = Mnv[Math[networkMappings[250]](Mnv[networkMappings[231]] - 1, game.player[networkMappings[95]])];
            for (var vM = 0; vM < wWMnn[networkMappings[231]]; vM++) {
                var mN = wWMnn[vM];
                if (mN[networkMappings[109]] !== 0) gameManager.mWV[vM].nNn(Mww[mN[networkMappings[109]]].NN[networkMappings[10]], Mww[mN[networkMappings[109]]].NN.n);
                var ww = game.player.mWV[vM];
                ww[1] = mN.nW;
                ww[2] = 0;
                ww[3] = mN.life;
                ww[0] = mN[networkMappings[109]];
            }
            nVN = 5000;
            if (nMv.WMW("admin") === null) {
                try {
                    NV["Widget"]["adsRefresh"]();
                } catch (NNV) {};
            }
            Wn.VWwWv(nNVVV);
            mMV = Wnm;
            NnM = Wnm;
            VMv = WmvwW;
            WVV = 1;
            verifyConnectionState();
        };;

        function mnV(nNM) {
            adminSettings.vvWnm[networkMappings[162]] = "none";
            wVM = nNM;
            wVmnV();
            mMV = wMm;
            NnM = wMm;
            VMv = Mnwmn;
            wwV = 1;
        };;

        function verifyConnectionState() {
            var nMw = 0;
            var wVW = 0;
            if (mMV > 0) {
                wVW = mMn;
                var NVM = VMv(1 - (mMV / NnM));
                if (NVM === 1) mMV = 0;
                if (WVV === 1) NVM = 1 - Math[networkMappings[99]](NVM);
                nMw *= NVM;
                wVW *= NVM;
            }
            WvW.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](270 * Vv)) - nMw;
            WvW.nM[networkMappings[120]] = Math[networkMappings[4]](0, (NMv - Math[networkMappings[68]](162 * Vv)) + Math[networkMappings[68]](-135 * Vv)) - wVW;
            VvV.nM[networkMappings[77]] = ((Wvm - Math[networkMappings[68]](61 * Vv)) + Math[networkMappings[68]](-100 * Vv)) - nMw;
            VvV.nM[networkMappings[120]] = Math[networkMappings[4]](0, (NMv - Math[networkMappings[68]](17 * Vv)) + Math[networkMappings[68]](-35 * Vv)) - wVW;
            mwV.nM[networkMappings[77]] = ((Wvm - Math[networkMappings[68]](99 * Vv)) + Math[networkMappings[68]](100 * Vv)) - nMw;
            mwV.nM[networkMappings[120]] = VvV.nM[networkMappings[120]];
            var VNwvW = Math[networkMappings[250]](Vv, 1);
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[178]] = Math[networkMappings[68]]((NMv - 125) + (170 * VNwvW)) + "px";
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[127]] = ("scale(" + VNwvW) + ")";
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[209]] = "0";
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[87]] = "0";
            document[networkMappings[61]]("trevda")[networkMappings[174]].wNMvV = "auto";
        };;

        function MW() {
            if (NvWVm() === 0) return;
            value[networkMappings[113]](0, 0, Vmn, mMn);
            VN.Vmmww();
            if (mMV > 0) {
                mmw = VMv(1 - (mMV / NnM));
                if (WVV === 1) mmw = 1 - Math[networkMappings[99]](mmw);
                mmw = 1 - mmw;
            }
            value[networkMappings[192]] = 0.3 * mmw;
            value[networkMappings[84]] = "#000000";
            value[networkMappings[3]](0, 0, Vmn, mMn);
            value[networkMappings[192]] = 1;
            WvW.MW();
            mwV.MW();
            WMVwv();
            VN.MWMww();
            wvW.WNmWW();
            if (nVN > 0) {
                nVN = Math[networkMappings[4]](0, nVN - WW);
                Wn.MV(vmWwW[Math[networkMappings[68]](nVN / 1000)], (VvV.nM[networkMappings[77]] / Vv) + 61.5, (VvV.nM[networkMappings[120]] / Vv) + 17.75, 0, 0, 0, 1);
            } else VvV.MW();
        };;

        function NvWVm() {
            if (wwV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    wwV = 0;
                    VvV.NnW(textFormatter.mwv);
                    mwV.NnW(textFormatter.mwv);
                    wVM.Wwv();
                    return 0;
                }
                mMV -= WW;
            } else if (WVV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    WVV = 0;
                    if (game.player.vvMWw !== 1) adminSettings.vvWnm[networkMappings[162]] = "inline-block";
                    document[networkMappings[61]]("bod")[networkMappings[174]][networkMappings[9]] = "#daeae6";
                    NMNnV();
                }
                mMV -= WW;
            }
            return 1;
        };;

        function mnN(mV) {
            WNw.extra(mV, WNw.VVwmw);
            var wv = 0;
            if (VvV.nN() === 1) {
                wv = 1;
            }
            if (mwV.nN() === 1) {
                wv = 1;
            }
        };;

        function vvW(mV) {
            WNw.extra(mV, WNw.mmNNn);
            var wv = 0;
            if (VvV.nN() === 1) {
                wv = 1;
                if (nVN <= 0) {
                    adminSettings.mNVvw();
                    MM.nmM(MM.Mn[networkMappings[83]], 1, 0);
                }
                return;
            }
            if (mwV.nN() === 1) {
                wv = 1;
                if (((network[networkMappings[155]] & network.connectionStates.mMMMV) === 0) && ((network[networkMappings[155]] & network.connectionStates.nnMvm) === 0)) {
                    mnV(adminSettings);
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    return;
                }
            }
        };;

        function mwM(mV) {
            WNw.extra(mV, WNw.MwnMN);
            var wv = 0;
            if (VvV.nN() === 1) {
                wv = 1;
            }
            if (mwV.nN() === 1) {
                wv = 1;
            }
        };;

        function Vnw(mV) {
            if (mV[networkMappings[207]][networkMappings[231]] > 0) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][0]);
                mnN(WNW);
            }
        };;

        function Nww(mV) {
            vvW(WNW);
        };;

        function WNv(mV) {
            if (mV[networkMappings[207]][networkMappings[231]] > 0) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][0]);
                vvW(WNW);
            }
        };;

        function vwm(mV) {
            if (mV[networkMappings[207]][networkMappings[231]] > 0) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][0]);
                mwM(WNW);
            }
        };;

        function NMNnV() {
            if (wVw === 0) NV[networkMappings[116]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[116]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[116]]('mousemove', mwM, false);
            if (wVw === 1) NV[networkMappings[116]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[116]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[116]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[116]]('touchmove', vwm, false);
        };;

        function wVmnV() {
            if (wVw === 0) NV[networkMappings[205]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[205]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[205]]('mousemove', mwM, false);
            if (wVw === 1) NV[networkMappings[205]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[205]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[205]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[205]]('touchmove', vwm, false);
        };;
        return {
            mnV: mnV,
            nnM: nnM,
            Wwv: Wwv,
            update: verifyConnectionState,
            MW: MW
        };
    })();
    var WWWnm = (function() {
        function mNw(NWn) {};;

        function vwWmV() {
            mnV(gameManager);
        };;

        function mNN() {
            vwWmV();
        };;
        var mmw = 0;
        var wmMwN = -1;
        var NnMVn = null;
        var NmWnv = {
            n: null
        };
        var NvnMw = -1;
        var VNwnw = {
            n: null
        };
        var wMWmn = null;
        var WwnNN = -1;
        var mnNNV = null;
        var MnMNn = {
            n: null
        };

        function WMVwv() {
            var vn = WvW.nM[networkMappings[77]];
            var WM = WvW.nM[networkMappings[120]];
            var nNw = vn / Vv;
            var wnM = WM / Vv;
            if ((wMWmn === null) || (NvnMw !== game.Wnw)) {
                NvnMw = game.Wnw;
                wMWmn = textFormatter.MwM("#" + Math[networkMappings[4]](NvnMw, 1), "'Viga', sans-serif", "#FFFFFF", 60, 140, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                VNwnw.n = wMWmn;
                VNwnw.n.v = 1;
            }
            Wn.MV(VNwnw, nNw + 207, wnM + 93, 0, 0, 0, 1);
            if ((NnMVn === null) || (wmMwN !== game.player.nNnwv)) {
                wmMwN = game.player.nNnwv;
                var nVnWW = Math[networkMappings[68]]((Date[networkMappings[237]]() - game.player.nNnwv) / 1000);
                var vwvnV = Math[networkMappings[68]](nVnWW / 60);
                var MVNWV = nVnWW % 60;
                NnMVn = textFormatter.MwM((((((vwvnV < 10) ? "0" : "") + vwvnV) + ":") + ((MVNWV < 10) ? "0" : "")) + MVNWV, "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                NmWnv.n = NnMVn;
                NmWnv.n.v = 1;
            }
            Wn.MV(NmWnv, nNw + 110, wnM + 100, 0, 0, 0, 1);
            if ((mnNNV === null) || (WwnNN !== game.player.MMwnN)) {
                WwnNN = game.player.MMwnN;
                mnNNV = textFormatter.MwM(WwnNN + "", "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                MnMNn.n = mnNNV;
                MnMNn.n.v = 1;
            }
            Wn.MV(MnMNn, nNw + 309, wnM + 100, 0, 0, 0, 1);
        };;
        var nVN = 0;
        var WvW;
        var VvV;
        var mwV;

        function nnM() {
            WvW = textFormatter.nwn(414, 207, "img/scoreboard-br.png");
            VvV = textFormatter.vMV(123, 35, ["img/play-again-button-out.png", "img/play-again-button-in.png", "img/play-again-button-click.png"]);
            mwV = textFormatter.vMV(198, 35, ["img/back-main-page-button-out.png", "img/back-main-page-button-in.png", "img/back-main-page-button-click.png"]);
        };;
        var wVM;
        var WNW = new WNw.vVmwN;
        var WVN = new VVW.VwWVV;
        var wMm = 500;
        var wwV = 0;
        var Mnwmn = function(VNm) {
            return wvm.Mnm.WVVwM(VNm, wvm.Mnm.WWM, 0.05);
        };
        var Wnm = 500;
        var WVV = 0;
        var WmvwW = function(VNm) {
            return wvm.Mnm.WVVwM(VNm, wvm.Mnm.vNM, 0.05);
        };
        var NnM = 0;
        var mMV = 0;
        var VMv = undefined;

        function Wwv() {
            network.mNw = mNw;
            network.mNN = mNN;
            game.player.wMw = 0;
            game.player[networkMappings[109]] = 0;
            VN.VmMNn(0);
            VN.wWMMW();
            nVN = 5000;
            try {
                NV["Widget"]["adsRefresh"]();
            } catch (NNV) {};
            Wn.VWwWv(WWWnm);
            mMV = Wnm;
            NnM = Wnm;
            VMv = WmvwW;
            WVV = 1;
            verifyConnectionState();
        };;

        function mnV(nNM) {
            adminSettings.vvWnm[networkMappings[162]] = "none";
            wVM = nNM;
            wVmnV();
            mMV = wMm;
            NnM = wMm;
            VMv = Mnwmn;
            wwV = 1;
        };;

        function verifyConnectionState() {
            var nMw = 0;
            var wVW = 0;
            if (mMV > 0) {
                wVW = mMn;
                var NVM = VMv(1 - (mMV / NnM));
                if (NVM === 1) mMV = 0;
                if (WVV === 1) NVM = 1 - Math[networkMappings[99]](NVM);
                nMw *= NVM;
                wVW *= NVM;
            }
            WvW.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](207 * Vv)) - nMw;
            WvW.nM[networkMappings[120]] = Math[networkMappings[4]](0, (NMv - Math[networkMappings[68]](103 * Vv)) + Math[networkMappings[68]](-135 * Vv)) - wVW;
            VvV.nM[networkMappings[77]] = ((Wvm - Math[networkMappings[68]](61 * Vv)) + Math[networkMappings[68]](-100 * Vv)) - nMw;
            VvV.nM[networkMappings[120]] = Math[networkMappings[4]](0, (NMv - Math[networkMappings[68]](17 * Vv)) + Math[networkMappings[68]](-70 * Vv)) - wVW;
            mwV.nM[networkMappings[77]] = ((Wvm - Math[networkMappings[68]](99 * Vv)) + Math[networkMappings[68]](70 * Vv)) - nMw;
            mwV.nM[networkMappings[120]] = VvV.nM[networkMappings[120]];
            var VNwvW = Vv;
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[178]] = Math[networkMappings[68]]((NMv - 125) + (130 * VNwvW)) + "px";
            document[networkMappings[61]]("trevda")[networkMappings[174]][networkMappings[127]] = ("scale(" + VNwvW) + ")";
        };;

        function MW() {
            if (NvWVm() === 0) return;
            value[networkMappings[113]](0, 0, Vmn, mMn);
            VN.Vmmww();
            if (mMV > 0) {
                mmw = VMv(1 - (mMV / NnM));
                if (WVV === 1) mmw = 1 - Math[networkMappings[99]](mmw);
                mmw = 1 - mmw;
            }
            value[networkMappings[192]] = 0.3 * mmw;
            value[networkMappings[84]] = "#000000";
            value[networkMappings[3]](0, 0, Vmn, mMn);
            value[networkMappings[192]] = 1;
            WvW.MW();
            mwV.MW();
            WMVwv();
            VN.MWMww();
            wvW.WNmWW();
            if (nVN > 0) {
                nVN = Math[networkMappings[4]](0, nVN - WW);
                Wn.MV(vmWwW[Math[networkMappings[68]](nVN / 1000)], (VvV.nM[networkMappings[77]] / Vv) + 61.5, (VvV.nM[networkMappings[120]] / Vv) + 17.75, 0, 0, 0, 1);
            } else VvV.MW();
        };;

        function NvWVm() {
            if (wwV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    wwV = 0;
                    VvV.NnW(textFormatter.mwv);
                    mwV.NnW(textFormatter.mwv);
                    wVM.Wwv();
                    return 0;
                }
                mMV -= WW;
            } else if (WVV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    WVV = 0;
                    adminSettings.vvWnm[networkMappings[162]] = "inline-block";
                    document[networkMappings[61]]("bod")[networkMappings[174]][networkMappings[9]] = "#daeae6";
                    NMNnV();
                }
                mMV -= WW;
            }
            return 1;
        };;

        function mnN(mV) {
            WNw.extra(mV, WNw.VVwmw);
            var wv = 0;
            if (VvV.nN() === 1) {
                wv = 1;
            }
            if (mwV.nN() === 1) {
                wv = 1;
            }
        };;

        function vvW(mV) {
            WNw.extra(mV, WNw.mmNNn);
            var wv = 0;
            if (VvV.nN() === 1) {
                wv = 1;
                if (nVN <= 0) {
                    adminSettings.mNVvw();
                    MM.nmM(MM.Mn[networkMappings[83]], 1, 0);
                }
                return;
            }
            if (mwV.nN() === 1) {
                wv = 1;
                if (((network[networkMappings[155]] & network.connectionStates.mMMMV) === 0) && ((network[networkMappings[155]] & network.connectionStates.nnMvm) === 0)) {
                    mnV(adminSettings);
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    return;
                }
            }
        };;

        function mwM(mV) {
            WNw.extra(mV, WNw.MwnMN);
            var wv = 0;
            if (VvV.nN() === 1) {
                wv = 1;
            }
            if (mwV.nN() === 1) {
                wv = 1;
            }
        };;

        function Vnw(mV) {
            if (mV[networkMappings[207]][networkMappings[231]] > 0) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][0]);
                mnN(WNW);
            }
        };;

        function Nww(mV) {
            vvW(WNW);
        };;

        function WNv(mV) {
            if (mV[networkMappings[207]][networkMappings[231]] > 0) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][0]);
                vvW(WNW);
            }
        };;

        function vwm(mV) {
            if (mV[networkMappings[207]][networkMappings[231]] > 0) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][0]);
                mwM(WNW);
            }
        };;

        function NMNnV() {
            if (wVw === 0) NV[networkMappings[116]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[116]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[116]]('mousemove', mwM, false);
            if (wVw === 1) NV[networkMappings[116]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[116]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[116]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[116]]('touchmove', vwm, false);
        };;

        function wVmnV() {
            if (wVw === 0) NV[networkMappings[205]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[205]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[205]]('mousemove', mwM, false);
            if (wVw === 1) NV[networkMappings[205]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[205]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[205]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[205]]('touchmove', vwm, false);
        };;
        return {
            mnV: mnV,
            nnM: nnM,
            Wwv: Wwv,
            update: verifyConnectionState,
            MW: MW
        };
    })();
    var Mwmnn = (function() {
        var vnW = 0;
        var nvN = 0;
        var NMM = 0;
        var WMVnN = 0;
        var VWNMM = Wn.Nvw("img/inv-empty.png");
        var vWMVW = [VWNMM, VWNMM, VWNMM];
        var vnN = [];
        var MnM = 0;

        function wWMnW() {
            wnV[networkMappings[249]]();
            nNnVn[networkMappings[249]]();
            game.player[networkMappings[109]] = 1;
            game.nnVNM = 2;
            game.Wvv = 0;
            game.player.NVV = 0;
            game.player.WMn[vM] = 0;
            game.player.wMw = 1;
            game.player.wmn = 0;
            game.player.WVMmN = [
                [-1, -1],
                [-1, -1],
                [-1, -1],
                [-1, -1],
                [-1, -1],
                [-1, -1],
                [-1, -1],
                [-1, -1],
                [-1, -1],
                [-1, -1],
                [-1, -1],
                [-1, -1]
            ];
            game.VvW.WwV[networkMappings[230]] = game.VvW.WwV.WmW;
            game.VvW.WwV.VVv = -1;
            game.VnVNN([0, document[networkMappings[61]]("nicknameInput")[networkMappings[230]]]);
            game.MVwWM(0, 0);
            VN[networkMappings[203]](undefined, 0, 0.07);
            VN[networkMappings[56]] = 0;
            mNv.MVmWv();
            game.player.vvVww = 0;
            game.player.vvv = 0;
            MmW = 0;
            wnMwV(1, vMM, 550, 550, 21 << 8, 0);
        };;

        function WVMvn(nnvVm) {
            nWV();
            vnW = 1;
            if (nnvVm === 1) nnn = 1;
            else if (nnvVm === 2) nMMwM = 1;
        };;

        function nWV() {
            vnW = 0;
            secondaryElement.NnW(textFormatter.mwv);
            nvN = 0;
            NMM = 0;
            nnn = 0;
            nMMwM = 0;
            vmvNV = 0;
            game.VnnWM();
        };;
        var NNMmm = 0;
        var secondaryElement = textFormatter.vMV(43, 43, ["img/close-box-out.png", "img/close-box-in.png", "img/close-box-click.png"]);
        var MnmnM = [Wn.Nvw("img/high-particules-out.png"), Wn.Nvw("img/high-particules-in.png"), Wn.Nvw("img/high-particules-click.png")];
        var WmMmM = textFormatter.vMV(54, 42, null, MnmnM);
        var nWWvw = [Wn.Nvw("img/low-particules-out.png"), Wn.Nvw("img/low-particules-in.png"), Wn.Nvw("img/low-particules-click.png")];
        var mWVnn = textFormatter.vMV(54, 42, null, nWWvw);
        var mvWVW = [Wn.Nvw("img/no-particules-out.png"), Wn.Nvw("img/no-particules-in.png"), Wn.Nvw("img/no-particules-click.png")];
        var Vnvvn = textFormatter.vMV(54, 42, null, mvWVW);
        var vWmMv = [Wn.Nvw("img/high-resolution-out.png"), Wn.Nvw("img/high-resolution-in.png"), Wn.Nvw("img/high-resolution-click.png")];
        var VWnnM = textFormatter.vMV(54, 42, null, vWmMv);
        var vWnMn = [Wn.Nvw("img/medium-resolution-out.png"), Wn.Nvw("img/medium-resolution-in.png"), Wn.Nvw("img/medium-resolution-click.png")];
        var mwmMV = textFormatter.vMV(54, 42, null, vWnMn);
        var mWMwM = [Wn.Nvw("img/low-resolution-out.png"), Wn.Nvw("img/low-resolution-in.png"), Wn.Nvw("img/low-resolution-click.png")];
        var NWnwN = textFormatter.vMV(54, 42, null, mWMwM);
        var mVNwV = [Wn.Nvw("img/azerty-button-out.png"), Wn.Nvw("img/azerty-button-in.png"), Wn.Nvw("img/azerty-button-click.png")];
        var nnMnv = textFormatter.vMV(81, 33, null, mVNwV);
        var wVwMm = [Wn.Nvw("img/qwerty-button-out.png"), Wn.Nvw("img/qwerty-button-in.png"), Wn.Nvw("img/qwerty-button-click.png")];
        var MmnwN = textFormatter.vMV(87, 33, null, wVwMm);
        var Nnvwm = [Wn.Nvw("img/sound-on-out.png"), Wn.Nvw("img/sound-on-in.png"), Wn.Nvw("img/sound-on-click.png")];
        var mvnnV = [Wn.Nvw("img/sound-off-out.png"), Wn.Nvw("img/sound-off-in.png"), Wn.Nvw("img/sound-off-click.png")];
        var NwmnM = textFormatter.vMV(51, 36, null, Nnvwm);
        var VvnWn = textFormatter.vMV(51, 36, null, mvnnV);
        var wNmMW = textFormatter.vMV(51, 36, null, Nnvwm);
        var vvnwM = textFormatter.vMV(51, 36, null, mvnnV);
        var vVN = 0;
        var MwVmn = 0;
        var WvmWw = 0;
        var mwnVn = 0;
        var MnvmV = 0;
        var NWvwW = 0;
        var VMWWM = 0;
        var mmvvw = 0;
        var MmW = 0;

        function wnMwV(nvW, mv, vn, WM, Nvm, NWn) {
            var wW = mNv[networkMappings[57]](nvW, MmW, MmW, mv);
            VMNWV(wW, nvW, MmW, MmW, mv, vn, WM, vn, WM, Nvm, 0, NWn);
            MmW++;
        };;

        function WNvNN(WVmvM) {
            wWMnW();
            WVmvM = WVmvM[networkMappings[55]]("!b=");
            WVmvM[networkMappings[89]]();
            for (var vM = 0; vM < WVmvM[networkMappings[231]]; vM++) {
                var vN = WVmvM[vM][networkMappings[55]](":");
                if (vN[networkMappings[231]] > 4) WwnNw(vN[0], vN[1], vN[3], vN[2], vN[4]);
                else WwnNw(vN[0], 0, vN[2], vN[1], vN[3]);
            }
        };;

        function WwnNw(MNNWv, wVm, vM, wm, Wv) {
            MNNWv = Number(MNNWv) >>> 0;
            wVm = Number(wVm) >>> 0;
            vM = Number(vM) >>> 0;
            wm = Number(wm) >>> 0;
            Wv = Number(Wv) >>> 0;
            if (((Wv > 3) || (vM >= MvN[networkMappings[12]])) || (wm >= MvN[networkMappings[12]])) return;
            var vN = Mww[MNNWv];
            if (((vN === undefined) || (vN.wVm === undefined)) || ((vN.wVm > 0) && (vN.vN[networkMappings[231]] <= wVm))) return;
            var Wv = (vN.mmV === 1) ? 0 : Wv;
            var vn = (vN.Mmw[Wv] + 50) + (100 * wm);
            var WM = (vN.NVn[Wv] + 50) + (100 * vM);
            var mv = 0;
            switch ((vN.wVm === 0) ? vN.WWn : vN.wVm[wVm].WWn) {
                case 0:
                    mv = MMwVM;
                    break;
                case 1:
                    mv = mwmmw;
                    break;
                case 2:
                    mv = MNVvm;
                    break;
                default:
                    mv = WwvNn;
                    break;
            }
            mVnmn(1, mv, vn, WM, Wv, 1 + ((vN.wVm === 0) ? 0 : (wVm << 5)), vN[networkMappings[109]]);
        };;

        function mVnmn(nvW, mv, vn, WM, Wv, NWn, wVm) {
            var wW = mNv[networkMappings[57]](nvW, MmW, MmW, mv);
            VMNWV(wW, nvW, MmW, MmW, mv, vn, WM, vn, WM, (wVm << 7) + (Wv << 5), 0, NWn);
            var verifyConnectionState = mnW[mv][networkMappings[170]];
            if (verifyConnectionState !== undefined) verifyConnectionState(wW, vn, WM);
            MmW++;
        };;

        function mWnMW(mv) {
            var status = "";
            var VwM = mNv.VNV[mv];
            var vvV = mNv[networkMappings[188]][mv];
            var wWw = vvV[networkMappings[188]];
            for (vM = 0; vM < wWw; vM++) {
                var VM = VwM[vvV.vwV[vM]];
                var mN = Mww[VM.Nvm >> 7];
                status += ("!b=" + mN[networkMappings[109]]) + ":";
                if (mN.wVm !== 0) status += VM.wVm + ":";
                status += (((VM.wm + ":") + VM.vM) + ":") + ((VM.Nvm >> 5) & 3);
            }
            return status;
        };;

        function MWnVm(mv, vn, WM) {
            var VwM = mNv.VNV[mv];
            var vvV = mNv[networkMappings[188]][mv];
            var wWw = vvV[networkMappings[188]];
            for (vM = 0; vM < wWw; vM++) {
                var vN = VwM[vvV.vwV[vM]];
                if ((((vN[networkMappings[77]] >= vn) && (vN[networkMappings[77]] <= (vn + 100))) && (vN[networkMappings[120]] >= WM)) && (vN[networkMappings[120]] <= (WM + 100))) {
                    mNv[networkMappings[54]](vN.nvW, vN[networkMappings[109]], vN.wWW, mv, vN.Nvm);
                    return;
                }
            }
        };;

        function NWwWM() {
            if ((WNw[networkMappings[155]] === WNw.VVwmw) && (game.player[networkMappings[26]] === 0)) {
                if (game.player.wMw === 1) {
                    game.player[networkMappings[26]] = -1;
                    if (game.player.NvvwM === 1) {
                        if ((((game.player.Nmm !== -1) && (game.player.Vwm !== -1)) && (game.player.Nmm !== MvN[networkMappings[65]])) && (game.player.Vwm !== MvN[networkMappings[12]])) WwnNw(game.player.vvv, game.player.WwnMn, game.player.Vwm, game.player.Nmm, game.player.vvVww);
                    } else {
                        var vn = 100 * game.player.Nmm;
                        var WM = 100 * game.player.Vwm;
                        MWnVm(MMwVM, vn, WM);
                        MWnVm(mwmmw, vn, WM);
                        MWnVm(MNVvm, vn, WM);
                        MWnVm(WwvNn, vn, WM);
                    }
                }
            } else if (WNw[networkMappings[155]] === WNw.mmNNn) {
                if (game.player.wMw === 1) {
                    NNMmm = 0;
                    game.player[networkMappings[26]] = 0;
                }
            }
        };;
        var VNMmw = Math[networkMappings[29]](2) / 2;

        function vVWMw() {
            var Vm = 0;
            if (VVW.nVMMM() === 1) Vm |= 1;
            if (VVW.WVNWW() === 1) Vm |= 2;
            if (VVW.nMNWV() === 1) Vm |= 4;
            if (VVW.MNMmM() === 1) Vm |= 8;
            if (Vm > 0) {
                var nvW = game.playersList[1].nNMMN;
                if (nvW === -1) return;
                var player = mNv.VNV[vMM][nvW];
                nwNMn = (((Vm & 3) && (Vm & 12)) ? VNMmw : 1) * ((VVW.vvNMm() === 0) ? (WW * 1.5) : (WW * 11));
                if (Vm & 1) player[networkMappings[158]] = player[networkMappings[77]] - nwNMn;
                else if (Vm & 2) player[networkMappings[158]] = player[networkMappings[77]] + nwNMn;
                if (Vm & 8) player[networkMappings[41]] = player[networkMappings[120]] - nwNMn;
                else if (Vm & 4) player[networkMappings[41]] = player[networkMappings[120]] + nwNMn;
                player[networkMappings[158]] = Math[networkMappings[4]](0, Math[networkMappings[250]](player[networkMappings[158]], MvN[networkMappings[65]] * 100));
                player[networkMappings[41]] = Math[networkMappings[4]](0, Math[networkMappings[250]](player[networkMappings[41]], MvN[networkMappings[12]] * 100));
                player.nwV = player[networkMappings[158]];
                player.nWv = player[networkMappings[41]];
            }
        };;

        function VNnnW() {
            var vn = vNwWW.nM[networkMappings[77]] - (5 * Vv);
            var WM = vNwWW.nM[networkMappings[120]] + (74 * Vv);
            var mwN = 45 * Vv;
            for (var vM = 0; vM < MnM; vM++) {
                var NW = vnN[vM];
                NW.nM[networkMappings[77]] = vn + ((vM % 8) * mwN);
                NW.nM[networkMappings[120]] = WM + (Math[networkMappings[68]](vM / 8) * mwN);
                NW.MW();
            }
        };;

        function vNVNn() {
            if (VVM <= 0) VVM = 3000;
            else if (VVM <= 500) VVM = 3000 - VVM;
            else if (VVM <= 2500) VVM = 2500;
            var status = "";
            status += mWnMW(MMwVM);
            status += mWnMW(mwmmw);
            status += mWnMW(MNVvm);
            status += mWnMW(WwvNn);
            var WWm = document[networkMappings[253]]('textarea');
            WWm["value"] = status;
            document["body"]["appendChild"](WWm);
            WWm["select"]();
            document["execCommand"]('copy');
            document["body"]["removeChild"](WWm);
        };;

        function wNWwN() {
            if (VVM > 0) {
                VVM -= WW;
                if (VVM > 2500) value[networkMappings[192]] = wvm.Mnm.vwW((3000 - VVM) / 500);
                else if (VVM < 500) value[networkMappings[192]] = wvm.Mnm.vwW(VVM / 500);
                value[networkMappings[114]](MmNwW, wMwNw.nM[networkMappings[77]] - (85 * Vv), wMwNw.nM[networkMappings[120]] - (40 * Vv), MmNwW.vww * Vv, MmNwW.mnn * Vv);
                value[networkMappings[192]] = 1;
            }
            if (wVnvM[game.player.Nnn] === undefined) wVnvM[game.player.Nnn] = [];
            if (wVnvM[game.player.Nnn][game.player.vWn] === undefined) wVnvM[game.player.Nnn][game.player.vWn] = textFormatter.MwM(((("(" + game.player.Nnn) + ",") + game.player.vWn) + ")", "'Viga', sans-serif", "#FFFFFF", 52, 455, "#000000", 22, 22, undefined, undefined, 0.4, undefined, "#000000", 15.6);
            var n = wVnvM[game.player.Nnn][game.player.vWn];
            value[networkMappings[114]](n, 5 * Vv, wnV.nM[networkMappings[120]] - (42 * Vv), n.vww * Vv, n.mnn * Vv);
        };
        var MmNwW = null;
        var VVM = 0;
        var wVnvM = [];
        var WwVMV = 0;
        var vwmNW;
        var wVmvW;
        var MWn;
        var wMW;
        var vWV;
        var vVn;
        var Wvnnm;
        var wmwMM;
        var WmMvm;
        var mNwWW;
        var vNwWW;
        var wnV;
        var nNnVn;
        var mVNwM;
        var nmVnn;
        var wMwNw;
        var WNMvn;

        function nnM() {
            MmNwW = textFormatter.MwM("Copied to clipboard", "'Viga', sans-serif", "#FFFFFF", 40, 350, "#000000", 18, 18, undefined, undefined, 0.6);
            for (vM = 0; vM < 64; vM++) vnN[networkMappings[140]](textFormatter.vMV(40, 40, null, vWMVW));
            vwmNW = textFormatter.nwn(269, 267, "img/settings-box.png");
            wVmvW = textFormatter.nwn(412, 412, "img/borderBigMinimap2.png");
            MWn = textFormatter.nwn(128, 128, "img/minimap.png");
            wMW = textFormatter.vMV(40, 40, ["img/full-screen-out.png", "img/full-screen-in.png", "img/full-screen-click.png"]);
            vWV = textFormatter.vMV(40, 40, ["img/settings-out.png", "img/settings-in.png", "img/settings-click.png"]);
            vVn = textFormatter.vMV(40, 40, ["img/minimap-button-out.png", "img/minimap-button-in.png", "img/minimap-button-click.png"]);
            Wvnnm = textFormatter.vMV(67, 67, ["img/logic-button-out.png", "img/logic-button-in.png", "img/logic-button-click.png"]);
            wmwMM = textFormatter.vMV(67, 67, ["img/map-explosive-button-out.png", "img/map-explosive-button-in.png", "img/map-explosive-button-click.png"]);
            WmMvm = textFormatter.vMV(67, 67, ["img/map-road-button-out.png", "img/map-road-button-in.png", "img/map-road-button-click.png"]);
            mNwWW = textFormatter.vMV(67, 67, ["img/map-furniture-button-out.png", "img/map-furniture-button-in.png", "img/map-furniture-button-click.png"]);
            vNwWW = textFormatter.vMV(67, 67, ["img/map-building-button-out.png", "img/map-building-button-in.png", "img/map-building-button-click.png"]);
            wnV = textFormatter.vMV(46.5, 46.5, ["img/zoom-button-out.png", "img/zoom-button-in.png", "img/zoom-button-click.png"]);
            nNnVn = textFormatter.vMV(46.5, 46.5, ["img/unzoom-button-out.png", "img/unzoom-button-in.png", "img/unzoom-button-click.png"]);
            mVNwM = textFormatter.vMV(40, 40, ["img/map-delete-button-out.png", "img/map-delete-button-in.png", "img/map-delete-button-click.png"]);
            nmVnn = textFormatter.vMV(46.5, 46.5, ["img/import-button-out.png", "img/import-button-in.png", "img/import-button-click.png"]);
            wMwNw = textFormatter.vMV(46.5, 46.5, ["img/copy-paste-button-out.png", "img/copy-paste-button-in.png", "img/copy-paste-button-click.png"]);
            WNMvn = textFormatter.vMV(60, 60, ["img/home-button-out.png", "img/home-button-in.png", "img/home-button-click.png"]);
        };;
        var wVM;
        var WNW = new WNw.vVmwN;
        var WVN = new VVW.VwWVV;
        var wMm = 1000;
        var wwV = 0;
        var Mnwmn = wvm.Mnm.WWM;
        var Wnm = 1000;
        var WVV = 0;
        var WmvwW = wvm.Mnm.vNM;
        var NnM = 0;
        var mMV = 0;
        var VMv = undefined;

        function Wwv() {
            document[networkMappings[61]]("bod")[networkMappings[174]][networkMappings[9]] = "#daeae6";
            NNMmm = 0;
            wvW.NnnwW();
            if (WwVMV === 0) {
                WwVMV = 1;
                var wwnvM = Mww[Mv.NWnWM].wVm;
                for (var vM = 0; vM < wwnvM[networkMappings[231]]; vM++) {
                    var mN = wwnvM[vM];
                    mN.NN = {
                        src: [mN.vN[networkMappings[10]], "img/useless.png", "img/useless.png"],
                        n: [{
                            v: 0
                        }, {
                            v: 0
                        }, {
                            v: 0
                        }]
                    };
                }
                var wwnvM = Mww[Mv.MVnnm].wVm;
                for (var vM = 0; vM < wwnvM[networkMappings[231]]; vM++) {
                    var mN = wwnvM[vM];
                    mN.NN = {
                        src: [mN.vN[networkMappings[10]], "img/useless.png", "img/useless.png"],
                        n: [{
                            v: 0
                        }, {
                            v: 0
                        }, {
                            v: 0
                        }]
                    };
                }
            }
            wWMnW();
            Wn.VWwWv(Mwmnn);
            mMV = Wnm;
            NnM = Wnm;
            VMv = WmvwW;
            WVV = 1;
            verifyConnectionState();
        };;

        function mnV(nNM) {
            nWV();
            wvW.vwWmV();
            wVM = nNM;
            wVmnV();
            mMV = wMm;
            NnM = wMm;
            VMv = Mnwmn;
            wwV = 1;
        };;

        function verifyConnectionState() {
            var nMw = 0;
            var wVW = 0;
            if (mMV > 0) {
                wVW = mMn;
                var NVM = VMv(1 - (mMV / NnM));
                if (NVM === 1) mMV = 0;
                if (WVV === 1) NVM = 1 - Math[networkMappings[99]](NVM);
                nMw *= NVM;
                wVW *= NVM;
            }
            vwmNW.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](134 * Vv)) + nMw;
            vwmNW.nM[networkMappings[120]] = Math[networkMappings[4]](0, NMv - Math[networkMappings[68]](133 * Vv)) + wVW;
            wVmvW.nM[networkMappings[77]] = (Wvm - Math[networkMappings[68]](206 * Vv)) + nMw;
            wVmvW.nM[networkMappings[120]] = Math[networkMappings[4]](0, NMv - Math[networkMappings[68]](206 * Vv)) + wVW;
            MWn.nM[networkMappings[77]] = Math[networkMappings[68]](5 * Vv) - nMw;
            MWn.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            wMW.nM[networkMappings[77]] = MWn.nM[networkMappings[77]] + Math[networkMappings[68]](126 * Vv);
            wMW.nM[networkMappings[120]] = MWn.nM[networkMappings[120]];
            vWV.nM[networkMappings[77]] = wMW.nM[networkMappings[77]];
            vWV.nM[networkMappings[120]] = wMW.nM[networkMappings[120]] + Math[networkMappings[68]](44.5 * Vv);
            vVn.nM[networkMappings[77]] = vWV.nM[networkMappings[77]];
            vVn.nM[networkMappings[120]] = vWV.nM[networkMappings[120]] + Math[networkMappings[68]](44.5 * Vv);
            Wvnnm.nM[networkMappings[77]] = ((Vmn - Math[networkMappings[68]](67 * Vv)) + Math[networkMappings[68]](-5 * Vv)) - nMw;
            Wvnnm.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            wmwMM.nM[networkMappings[77]] = Wvnnm.nM[networkMappings[77]] + Math[networkMappings[68]](-70 * Vv);
            wmwMM.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            WmMvm.nM[networkMappings[77]] = wmwMM.nM[networkMappings[77]] + Math[networkMappings[68]](-70 * Vv);
            WmMvm.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            mNwWW.nM[networkMappings[77]] = WmMvm.nM[networkMappings[77]] + Math[networkMappings[68]](-70 * Vv);
            mNwWW.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            vNwWW.nM[networkMappings[77]] = mNwWW.nM[networkMappings[77]] + Math[networkMappings[68]](-70 * Vv);
            vNwWW.nM[networkMappings[120]] = Math[networkMappings[68]](5 * Vv) - wVW;
            wnV.nM[networkMappings[77]] = Math[networkMappings[68]](5 * Vv);
            wnV.nM[networkMappings[120]] = (mMn - Math[networkMappings[68]](46.5 * Vv)) + Math[networkMappings[68]](-5 * Vv);
            nNnVn.nM[networkMappings[77]] = wnV.nM[networkMappings[77]] + Math[networkMappings[68]](50 * Vv);
            nNnVn.nM[networkMappings[120]] = (mMn - Math[networkMappings[68]](46.5 * Vv)) + Math[networkMappings[68]](-5 * Vv);
            mVNwM.nM[networkMappings[77]] = MWn.nM[networkMappings[77]] + Math[networkMappings[68]](89 * Vv);
            mVNwM.nM[networkMappings[120]] = MWn.nM[networkMappings[120]] + Math[networkMappings[68]](126 * Vv);
            nmVnn.nM[networkMappings[77]] = (Vmn - Math[networkMappings[68]](46.5 * Vv)) + Math[networkMappings[68]](-5 * Vv);
            nmVnn.nM[networkMappings[120]] = (mMn - Math[networkMappings[68]](46.5 * Vv)) + Math[networkMappings[68]](-5 * Vv);
            wMwNw.nM[networkMappings[77]] = nmVnn.nM[networkMappings[77]] + Math[networkMappings[68]](-50 * Vv);
            wMwNw.nM[networkMappings[120]] = (mMn - Math[networkMappings[68]](46.5 * Vv)) + Math[networkMappings[68]](-5 * Vv);
            WNMvn.nM[networkMappings[77]] = MWn.nM[networkMappings[77]];
            WNMvn.nM[networkMappings[120]] = MWn.nM[networkMappings[120]] + Math[networkMappings[68]](126 * Vv);
        };;

        function MW() {
            if (NvWVm() === 0) return;
            NWwWM();
            vVWMw();
            value[networkMappings[113]](0, 0, Vmn, mMn);
            game.mNWMW();
            VN.Vmmww();
            VN.NMN(MWn.nM[networkMappings[77]], MWn.nM[networkMappings[120]]);
            MWn.MW();
            wMW.MW();
            vWV.MW();
            vVn.MW();
            Wvnnm.MW();
            wmwMM.MW();
            WmMvm.MW();
            mNwWW.MW();
            vNwWW.MW();
            wnV.MW();
            nNnVn.MW();
            mVNwM.MW();
            nmVnn.MW();
            wMwNw.MW();
            WNMvn.MW();
            wNWwN();
            VNnnW();
            if (vnW === 1) {
                if (nvN === 1) VN.Mwwmm(wVmvW, secondaryElement);
                else if (NMM === 1) VN.nVVWv(vwmNW, VWnnM, mwmMV, NWnwN, nnMnv, MmnwN, NwmnM, VvnWn, wNmMW, vvnwM, secondaryElement, WmMmM, mWVnn, Vnvvn);
            } else if (wVw === 1) {
                if ((((VVW.nVMMM() + VVW.WVNWW()) + VVW.MNMmM()) + VVW.nMNWV()) >= 1) {
                    value[networkMappings[192]] = 0.3;
                    var vn = mWW - (nnNMm * 1.5);
                    var WM = wmVNn + (nnNMm / 4);
                    Wn.vvWNm(value, vn, WM, 60);
                    Wn.VMWmV(value, "#000000");
                    Wn.vvWNm(value, vn + ((Math[networkMappings[218]](MwVmn) * WvmWw) * Vv), WM + ((Math[networkMappings[147]](MwVmn) * WvmWw) * Vv), 30);
                    Wn.VMWmV(value, "#FFFFFF");
                    value[networkMappings[192]] = 1;
                }
                if (MnvmV === 1) {
                    value[networkMappings[192]] = 0.3;
                    var vn = mWW + (nnNMm * 1.5);
                    var WM = wmVNn + (nnNMm / 4);
                    Wn.vvWNm(value, vn, WM, 60);
                    Wn.VMWmV(value, "#000000");
                    Wn.vvWNm(value, vn + ((Math[networkMappings[218]](WNw[networkMappings[142]]) * 25) * Vv), WM + ((Math[networkMappings[147]](WNw[networkMappings[142]]) * 25) * Vv), 30);
                    Wn.VMWmV(value, "#FFFFFF");
                    value[networkMappings[192]] = 1;
                }
            }
            wvW.WNmWW();
        };;

        function NvWVm() {
            if (wwV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    wwV = 0;
                    wMW.NnW(textFormatter.mwv);
                    vWV.NnW(textFormatter.mwv);
                    vVn.NnW(textFormatter.mwv);
                    Wvnnm.NnW(textFormatter.mwv);
                    wmwMM.NnW(textFormatter.mwv);
                    WmMvm.NnW(textFormatter.mwv);
                    mNwWW.NnW(textFormatter.mwv);
                    vNwWW.NnW(textFormatter.mwv);
                    wnV.NnW(textFormatter.mwv);
                    nNnVn.NnW(textFormatter.mwv);
                    mVNwM.NnW(textFormatter.mwv);
                    nmVnn.NnW(textFormatter.mwv);
                    wMwNw.NnW(textFormatter.mwv);
                    WNMvn.NnW(textFormatter.mwv);
                    wVM.Wwv();
                    return 0;
                }
                mMV -= WW;
            } else if (WVV === 1) {
                verifyConnectionState();
                if (mMV < 0) {
                    WVV = 0;
                    NMNnV();
                }
                mMV -= WW;
            }
            return 1;
        };;

        function mnN(mV) {
            WNw.extra(mV, WNw.VVwmw);
            var wv = 0;
            if (wMW.nN() === 1) {
                wv = 1;
            }
            if (vWV.nN() === 1) {
                wv = 1;
            }
            if (vVn.nN() === 1) {
                wv = 1;
            }
            if (Wvnnm.nN() === 1) {
                wv = 1;
            }
            if (wmwMM.nN() === 1) {
                wv = 1;
            }
            if (WmMvm.nN() === 1) {
                wv = 1;
            }
            if (mNwWW.nN() === 1) {
                wv = 1;
            }
            if (vNwWW.nN() === 1) {
                wv = 1;
            }
            if (wnV.nN() === 1) {
                wv = 1;
            }
            if (nNnVn.nN() === 1) {
                wv = 1;
            }
            if (mVNwM.nN() === 1) {
                wv = 1;
            }
            if (nmVnn.nN() === 1) {
                wv = 1;
            }
            if (wMwNw.nN() === 1) {
                wv = 1;
            }
            if (WNMvn.nN() === 1) {
                wv = 1;
            }
            if (vnW === 1) {
                secondaryElement.nN();
                if (NMM === 1) {
                    nnMnv.nN();
                    MmnwN.nN();
                    VWnnM.nN();
                    mwmMV.nN();
                    NWnwN.nN();
                    NwmnM.nN();
                    VvnWn.nN();
                    wNmMW.nN();
                    vvnwM.nN();
                    mWVnn.nN();
                    WmMmM.nN();
                    Vnvvn.nN();
                }
            } else {
                for (var vM = 0; vM < MnM; vM++) {
                    if (vnN[vM].nN() === 1) wv = 1;
                }
            }
            if ((wv === 0) && (vnW === 0)) {
                NNMmm = 1;
                if (game.player[networkMappings[26]] === -1) game.player[networkMappings[26]] = 0;
            } else {
                if (game.player[networkMappings[26]] === 0) game.player[networkMappings[26]] = -1;
            }
        };;

        function vvW(mV) {
            WNw.extra(mV, WNw.mmNNn);
            var wv = 0;
            if (wMW.nN() === 1) {
                wv = 1;
                if (WMVnN === 0) {
                    WMVnN = 1;
                    Wn.nNwWm();
                    if (game.NMn === 0) nNv[networkMappings[174]][networkMappings[9]] = "#daeae6";
                    else nNv[networkMappings[174]][networkMappings[9]] = "#19435A";
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                } else {
                    WMVnN = 0;
                    Wn.nMNWw();
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                }
            }
            if (vWV.nN() === 1) {
                wv = 1;
                if (NMM === 0) {
                    nWV();
                    vnW = 1;
                    NMM = 1;
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                } else {
                    nWV();
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                }
            }
            if (vVn.nN() === 1) {
                wv = 1;
                if (nvN === 0) {
                    nWV();
                    vnW = 1;
                    nvN = 1;
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                } else {
                    nWV();
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                }
            }
            if (Wvnnm.nN() === 1) {
                wv = 1;
                MnM = 0;
                for (var vM = 1; vM < Mww[networkMappings[231]]; vM++) {
                    var mN = Mww[vM];
                    if (mN[networkMappings[212]] === Nwv.Wnv) {
                        vnN[MnM].nNn(mN.NN[networkMappings[10]], mN.NN.n);
                        vnN[MnM].MVM = mN[networkMappings[109]];
                        MnM++;
                    }
                }
                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
            }
            if (wmwMM.nN() === 1) {
                wv = 1;
                MnM = 0;
                for (var vM = 1; vM < Mww[networkMappings[231]]; vM++) {
                    var mN = Mww[vM];
                    if ((((mN[networkMappings[109]] === Mv.NMWww) || (mN[networkMappings[109]] === Mv.vMnWn)) || (mN[networkMappings[109]] === Mv.NNNWv)) || (mN[networkMappings[109]] === Mv.mVmVm)) {
                        vnN[MnM].nNn(mN.NN[networkMappings[10]], mN.NN.n);
                        vnN[MnM].MVM = mN[networkMappings[109]];
                        MnM++;
                    }
                }
                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
            }
            if (WmMvm.nN() === 1) {
                wv = 1;
                MnM = 0;
                var wwnvM = Mww[Mv.NWnWM].wVm;
                for (var vM = 0; vM < wwnvM[networkMappings[231]]; vM++) {
                    var mN = wwnvM[vM];
                    vnN[MnM].nNn(mN.NN[networkMappings[10]], mN.NN.n);
                    vnN[MnM].MVM = Mv.NWnWM;
                    vnN[MnM].nmWnw = vM;
                    MnM++;
                }
                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
            }
            if (mNwWW.nN() === 1) {
                wv = 1;
                MnM = 0;
                var wwnvM = Mww[Mv.MVnnm].wVm;
                for (var vM = 0; vM < wwnvM[networkMappings[231]]; vM++) {
                    var mN = wwnvM[vM];
                    vnN[MnM].nNn(mN.NN[networkMappings[10]], mN.NN.n);
                    vnN[MnM].MVM = Mv.MVnnm;
                    vnN[MnM].nmWnw = vM;
                    MnM++;
                }
                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
            }
            if (vNwWW.nN() === 1) {
                wv = 1;
                MnM = 0;
                for (var vM = 1; vM < Mww[networkMappings[231]]; vM++) {
                    var mN = Mww[vM];
                    if (((((mN.mmV === 1) || (mN.wmM === 1)) || (mN.NvM === 1)) || (mN.WVm === 1)) || (mN.MVNNM === 1)) {
                        vnN[MnM].nNn(mN.NN[networkMappings[10]], mN.NN.n);
                        vnN[MnM].MVM = mN[networkMappings[109]];
                        MnM++;
                    }
                }
                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
            }
            if (wnV.nN() === 1) {
                wv = 1;
                if (VN[networkMappings[56]] < 1.5) {
                    VN[networkMappings[56]] += 0.1;
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    nNnVn[networkMappings[249]]();
                    if (VN[networkMappings[56]] >= 1.5) wnV.Vwv();
                }
            }
            if (nNnVn.nN() === 1) {
                wv = 1;
                if (VN[networkMappings[56]] > -0.95) {
                    if (VN[networkMappings[56]] < 0) VN[networkMappings[56]] -= 0.05;
                    else VN[networkMappings[56]] -= 0.1;
                    MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                    wnV[networkMappings[249]]();
                    if (VN[networkMappings[56]] <= -0.95) nNnVn.Vwv();
                }
            }
            if (mVNwM.nN() === 1) {
                wv = 1;
                wWMnW();
                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
            }
            if (nmVnn.nN() === 1) {
                wv = 1;
                MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                var WVmvM = NV["prompt"]("Please enter your code here", "");
                MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                if ((WVmvM != null) && (WVmvM != "")) WNvNN(WVmvM);
            }
            if (wMwNw.nN() === 1) {
                wv = 1;
                MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                vNVNn();
            }
            if (WNMvn.nN() === 1) {
                wv = 1;
                Mwmnn.mnV(adminSettings);
                MM.nmM(MM.Mn[networkMappings[83]], 1, 0);
            }
            if (vnW === 1) {
                if (secondaryElement.nN() === 1) {
                    nWV();
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                    return;
                }
                if (NMM === 1) {
                    MmnwN.NnW(textFormatter.mwv);
                    nnMnv.NnW(textFormatter.mwv);
                    VWnnM.NnW(textFormatter.mwv);
                    mwmMV.NnW(textFormatter.mwv);
                    NWnwN.NnW(textFormatter.mwv);
                    NwmnM.NnW(textFormatter.mwv);
                    VvnWn.NnW(textFormatter.mwv);
                    wNmMW.NnW(textFormatter.mwv);
                    vvnwM.NnW(textFormatter.mwv);
                    WmMmM.NnW(textFormatter.mwv);
                    mWVnn.NnW(textFormatter.mwv);
                    Vnvvn.NnW(textFormatter.mwv);
                    if (nnMnv.nN() === 1) {
                        VVW.NvWwV();
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (MmnwN.nN() === 1) {
                        VVW.NwWvW();
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (VWnnM.nN() === 1) {
                        Wn.VnMmM(1);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (mwmMV.nN() === 1) {
                        Wn.VnMmM(2);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (NWnwN.nN() === 1) {
                        Wn.VnMmM(3);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (NwmnM.nN() === 1) {
                        MM.VVWnW(1);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (VvnWn.nN() === 1) {
                        MM.VVWnW(0);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (wNmMW.nN() === 1) {
                        MM.WWMnM(1);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (vvnwM.nN() === 1) {
                        MM.WWMnM(0);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (mWVnn.nN() === 1) {
                        VN.VWNmW(1);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (WmMmM.nN() === 1) {
                        VN.VWNmW(2);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    } else if (Vnvvn.nN() === 1) {
                        VN.VWNmW(0);
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        return;
                    }
                    var MvVmV = vwmNW.nM;
                    if ((((WNw.MWM < MvVmV[networkMappings[77]]) || (WNw.MWM > (MvVmV[networkMappings[77]] + (234 * Vv)))) || (WNw.vWN < MvVmV[networkMappings[120]])) || (WNw.vWN > (MvVmV[networkMappings[120]] + (232 * Vv)))) {
                        nWV();
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                        return;
                    }
                } else if (nvN === 1) {
                    var mwmNn = wVmvW.nM;
                    if ((((WNw.MWM < mwmNn[networkMappings[77]]) || (WNw.MWM > (mwmNn[networkMappings[77]] + (412 * Vv)))) || (WNw.vWN < mwmNn[networkMappings[120]])) || (WNw.vWN > (mwmNn[networkMappings[120]] + (412 * Vv)))) {
                        nWV();
                        MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                        return;
                    }
                }
            } else {
                for (var vM = 0; vM < MnM; vM++) {
                    if (vnN[vM].nN() === 1) {
                        MM.nmM(MM.Mn[networkMappings[33]], 1, 0);
                        game.player.vvv = vnN[vM].MVM;
                        game.player.WwnMn = vnN[vM].nmWnw;
                        if (game.player.vvv === Mv.NWnWM) game.player.vvVww = 0;
                    }
                }
            }
        };;

        function mwM(mV) {
            WNw.extra(mV, WNw.MwnMN);
            var wv = 0;
            if (wMW.nN() === 1) {
                wv = 1;
            }
            if (vWV.nN() === 1) {
                wv = 1;
            }
            if (vVn.nN() === 1) {
                wv = 1;
            }
            if (Wvnnm.nN() === 1) {
                wv = 1;
            }
            if (wmwMM.nN() === 1) {
                wv = 1;
            }
            if (WmMvm.nN() === 1) {
                wv = 1;
            }
            if (mNwWW.nN() === 1) {
                wv = 1;
            }
            if (vNwWW.nN() === 1) {
                wv = 1;
            }
            if (wnV.nN() === 1) {
                wv = 1;
            }
            if (nNnVn.nN() === 1) {
                wv = 1;
            }
            if (mVNwM.nN() === 1) {
                wv = 1;
            }
            if (nmVnn.nN() === 1) {
                wv = 1;
            }
            if (wMwNw.nN() === 1) {
                wv = 1;
            }
            if (WNMvn.nN() === 1) {
                wv = 1;
            }
            if (vnW === 1) {
                secondaryElement.nN();
                if (NMM === 1) {
                    nnMnv.nN();
                    MmnwN.nN();
                    VWnnM.nN();
                    mwmMV.nN();
                    NWnwN.nN();
                    NwmnM.nN();
                    VvnWn.nN();
                    wNmMW.nN();
                    vvnwM.nN();
                    mWVnn.nN();
                    WmMmM.nN();
                    Vnvvn.nN();
                }
            } else {
                for (var vM = 0; vM < MnM; vM++) vnN[vM].nN();
            }
        };;

        function Vvw(mV) {
            VVW.mMMwM(mV);
            if (mV[networkMappings[106]] === 77) {
                if (nvN === 0) {
                    nWV();
                    vnW = 1;
                    nvN = 1;
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                } else {
                    nWV();
                    MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                }
            } else if ((mV[networkMappings[106]] === 27) && (vnW === 1)) {
                MM.nmM(MM.Mn[networkMappings[103]], 1, 0);
                nWV();
            } else if (mV[networkMappings[106]] === 82) {
                if ((game.player.wMw === 1) && (game.player.vvv !== Mv.NWnWM)) game.player.vvVww = (game.player.vvVww + 1) % 4;
            }
        };;

        function mwn(mV) {
            VVW.nwNNV(mV);
            if ((((mV[networkMappings[106]] === 37) || (mV[networkMappings[106]] === 38)) || (mV[networkMappings[106]] === 39)) || (mV[networkMappings[106]] === 40)) {
                mV[networkMappings[180]]();
                return false;
            }
        };;

        function Vnw(mV) {
            var WMv = 0;
            for (var Wmw = 0; Wmw < mV[networkMappings[207]][networkMappings[231]]; Wmw++) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][Wmw]);
                if (vnW === 0) {
                    var MWM = Math[networkMappings[68]](WNW[networkMappings[175]] * Wn[networkMappings[139]].vmm);
                    var vWN = Math[networkMappings[68]](WNW[networkMappings[145]] * Wn[networkMappings[139]].NVNnm);
                    if (vWN < (mMn - (70 * Vv))) {
                        var mwm = WNmMW * 1.5;
                        var nmW = WNmMW / 4;
                        if (MWM < Wvm) {
                            var mwN = 30 * Vv;
                            MwVmn = MNM[networkMappings[142]](Wvm - mwm, NMv + nmW, MWM, vWN);
                            WvmWw = Math[networkMappings[250]](MNM.VNv(MWM, vWN, Wvm - mwm, NMv + nmW), 25);
                            if (MWM < ((Wvm - mwm) - mwN)) {
                                vVN |= 1;
                                WVN[networkMappings[104]] = 37;
                                WVN[networkMappings[106]] = 37;
                                mwn(WVN);
                            } else if (MWM > ((Wvm - mwm) + mwN)) {
                                vVN |= 2;
                                WVN[networkMappings[104]] = 39;
                                WVN[networkMappings[106]] = 39;
                                mwn(WVN);
                            }
                            if (vWN < ((NMv + nmW) - mwN)) {
                                vVN |= 4;
                                WVN[networkMappings[104]] = 38;
                                WVN[networkMappings[106]] = 38;
                                mwn(WVN);
                            } else if (vWN > ((NMv + nmW) + mwN)) {
                                vVN |= 8;
                                WVN[networkMappings[104]] = 40;
                                WVN[networkMappings[106]] = 40;
                                mwn(WVN);
                            }
                        } else if ((MWM < (Vmn - (40 * Vv))) || (vWN > (40 * Vv))) {
                            WMv = 1;
                            WNW[networkMappings[175]] -= mwm / Wn[networkMappings[139]].vmm;
                            WNW[networkMappings[145]] -= nmW / Wn[networkMappings[139]].vmm;
                            if (game.player.wMw === 1) {
                                var VVwWv = Date[networkMappings[237]]();
                                if ((VVwWv - mwnVn) < 1000) {
                                    MnvmV = 1;
                                    NWvwW = WNW[networkMappings[175]];
                                    VMWWM = WNW[networkMappings[145]];
                                    mnN(WNW);
                                }
                                mwnVn = VVwWv;
                            } else {
                                MnvmV = 1;
                                NWvwW = WNW[networkMappings[175]];
                                VMWWM = WNW[networkMappings[145]];
                                mnN(WNW);
                            }
                        }
                        continue;
                    }
                }
                if ((WMv === 0) && (vVN === 0)) {
                    mnN(WNW);
                    WMv = 1;
                }
            }
        };;

        function Nww(mV) {};;

        function WNv(mV) {
            var MWM = Math[networkMappings[68]](mV[networkMappings[229]][0][networkMappings[175]] * Wn[networkMappings[139]].vmm);
            var vWN = Math[networkMappings[68]](mV[networkMappings[229]][0][networkMappings[145]] * Wn[networkMappings[139]].NVNnm);
            if (mmvvw === 1) mmvvw = 0;
            else if (vnW === 1) vvW(WNW);
            else if ((MnvmV === 1) && (MWM >= Wvm)) {
                MnvmV = 0;
                WNW[networkMappings[175]] = NWvwW;
                WNW[networkMappings[145]] = VMWWM;
                vvW(WNW);
                return;
            } else if (((game.player.vWW.wnv === 0) && (MWM < Wvm)) && (vWN < (mMn - (70 * Vv)))) {
                if ((MWM < (240 * Vv)) && (vWN < (160 * Vv))) vvW(WNW);
            } else vvW(WNW);
            if (vVN !== 0) {
                if (vVN & 1) {
                    WVN[networkMappings[104]] = 37;
                    Vvw(WVN);
                }
                if (vVN & 2) {
                    WVN[networkMappings[104]] = 39;
                    Vvw(WVN);
                }
                if (vVN & 4) {
                    WVN[networkMappings[104]] = 38;
                    Vvw(WVN);
                }
                if (vVN & 8) {
                    WVN[networkMappings[104]] = 40;
                    Vvw(WVN);
                }
                vVN = 0;
            }
        };;

        function vwm(mV) {
            var WMv = 0;
            var nVWVn = 0;
            for (var Wmw = 0; Wmw < mV[networkMappings[207]][networkMappings[231]]; Wmw++) {
                WNw.currentPlayer(WNW, mV, mV[networkMappings[207]][Wmw]);
                if ((game.player.vWW.wnv === 0) && (vnW === 0)) {
                    var MWM = Math[networkMappings[68]](WNW[networkMappings[175]] * Wn[networkMappings[139]].vmm);
                    var vWN = Math[networkMappings[68]](WNW[networkMappings[145]] * Wn[networkMappings[139]].NVNnm);
                    if (vWN < (mMn - (70 * Vv))) {
                        var mwm = WNmMW * 1.5;
                        var nmW = WNmMW / 4;
                        if (MWM < Wvm) {
                            nVWVn = 1;
                            var mvw = 0;
                            var mwN = 30 * Vv;
                            MwVmn = MNM[networkMappings[142]](Wvm - mwm, NMv + nmW, MWM, vWN);
                            WvmWw = Math[networkMappings[250]](MNM.VNv(MWM, vWN, Wvm - mwm, NMv + nmW), 25);
                            if (MWM < ((Wvm - mwm) - mwN)) mvw |= 1;
                            else if (MWM > ((Wvm - mwm) + mwN)) mvw |= 2;
                            if (vWN < ((NMv + nmW) + -mwN)) mvw |= 4;
                            else if (vWN > ((NMv + nmW) + mwN)) mvw |= 8;
                            if (((mvw & 1) === 1) && ((vVN & 1) !== 1)) {
                                WVN[networkMappings[104]] = 37;
                                mwn(WVN);
                            } else if (((mvw & 1) !== 1) && ((vVN & 1) === 1)) {
                                WVN[networkMappings[104]] = 37;
                                Vvw(WVN);
                            }
                            if (((mvw & 2) === 2) && ((vVN & 2) !== 2)) {
                                WVN[networkMappings[104]] = 39;
                                mwn(WVN);
                            } else if (((mvw & 2) !== 2) && ((vVN & 2) === 2)) {
                                WVN[networkMappings[104]] = 39;
                                Vvw(WVN);
                            }
                            if (((mvw & 4) === 4) && ((vVN & 4) !== 4)) {
                                WVN[networkMappings[104]] = 38;
                                mwn(WVN);
                            } else if (((mvw & 4) !== 4) && ((vVN & 4) === 4)) {
                                WVN[networkMappings[104]] = 38;
                                Vvw(WVN);
                            }
                            if (((mvw & 8) === 8) && ((vVN & 8) !== 8)) {
                                WVN[networkMappings[104]] = 40;
                                mwn(WVN);
                            } else if (((mvw & 8) !== 8) && ((vVN & 8) === 8)) {
                                WVN[networkMappings[104]] = 40;
                                Vvw(WVN);
                            }
                            vVN = mvw;
                            continue;
                        } else if ((MWM < (Vmn - (40 * Vv))) || (vWN > (40 * Vv))) {
                            WMv = 1;
                            WNW[networkMappings[175]] -= mwm / Wn[networkMappings[139]].vmm;
                            WNW[networkMappings[145]] -= nmW / Wn[networkMappings[139]].vmm;
                            NWvwW = WNW[networkMappings[175]];
                            VMWWM = WNW[networkMappings[145]];
                            mwM(WNW);
                        }
                    }
                }
                if ((WMv === 0) && (vVN === 0)) {
                    mwM(WNW);
                    WMv = 1;
                }
            }
            if ((nVWVn === 0) && (vVN !== 0)) {
                if (vVN & 1) {
                    WVN[networkMappings[104]] = 37;
                    Vvw(WVN);
                }
                if (vVN & 2) {
                    WVN[networkMappings[104]] = 39;
                    Vvw(WVN);
                }
                if (vVN & 4) {
                    WVN[networkMappings[104]] = 38;
                    Vvw(WVN);
                }
                if (vVN & 8) {
                    WVN[networkMappings[104]] = 40;
                    Vvw(WVN);
                }
                vVN = 0;
            }
        };;

        function NMNnV() {
            if (wVw === 0) NV[networkMappings[116]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[116]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[116]]('mousemove', mwM, false);
            if (wVw === 0) NV[networkMappings[116]]('keyup', Vvw, false);
            if (wVw === 0) NV[networkMappings[116]]('keydown', mwn, false);
            if (wVw === 1) NV[networkMappings[116]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[116]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[116]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[116]]('touchmove', vwm, false);
        };;

        function wVmnV() {
            if (wVw === 0) NV[networkMappings[205]]('mousedown', mnN, false);
            if (wVw === 0) NV[networkMappings[205]]('mouseup', vvW, false);
            if (wVw === 0) NV[networkMappings[205]]('mousemove', mwM, false);
            if (wVw === 0) NV[networkMappings[205]]('keyup', Vvw, false);
            if (wVw === 0) NV[networkMappings[205]]('keydown', mwn, false);
            if (wVw === 1) NV[networkMappings[205]]('touchstart', Vnw, false);
            if (wVw === 1) NV[networkMappings[205]]('touchend', Nww, false);
            if (wVw === 1) NV[networkMappings[205]]('touchcancel', WNv, false);
            if (wVw === 1) NV[networkMappings[205]]('touchmove', vwm, false);
        };;
        return {
            mnV: mnV,
            nnM: nnM,
            Wwv: Wwv,
            update: verifyConnectionState,
            MW: MW
        };
    })();
    var nvV = 1;
    var vMn = {};
    vMn.vMmVv = nvV++;
    vMn.vVMMm = nvV++;
    vMn.VvMMN = nvV++;
    vMn.VwnNw = nvV++;
    vMn.MvMNn = nvV++;
    vMn.WNvmv = nvV++;
    vMn.VWVVv = nvV++;
    vMn.WvwMv = nvV++;
    vMn.wNMWM = nvV++;
    vMn.VnWwn = nvV++;
    vMn.NmnVM = nvV++;
    vMn.NvMWv = nvV++;
    vMn.NnvMm = nvV++;
    vMn.vVVnv = nvV++;
    vMn.WwWvv = nvV++;
    var mwmmW = [{}, {
        id: vMn.vMmVv,
        src: "img/road-T0B0L0R1.png",
        n: {
            v: 0
        },
        NMN: {
            x: 0,
            y: 0,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        alt: [vMn.vMmVv]
    }, {
        id: vMn.vVMMm,
        src: "img/road-T0B0L1R0.png",
        n: {
            v: 0
        },
        NMN: {
            x: 28,
            y: 0,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        alt: [vMn.nMnNw, vMn.mvmVV]
    }, {
        id: vMn.VvMMN,
        src: "img/road-T0B0L1R1.png",
        n: {
            v: 0
        },
        NMN: {
            x: 56,
            y: 0,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        alt: [vMn.vMmnw, vMn.wVvNW, vMn.nvnMm, vMn.nnmvN, vMn.VvMvW, vMn.NWmnvnW, vMn.NnVvmmN, vMn.WwwwmmM]
    }, {
        id: vMn.VwnNw,
        src: "img/road-T0B1L0R0.png",
        n: {
            v: 0
        },
        NMN: {
            x: 84,
            y: 0,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        alt: [vMn.mvVWvVM, vMn.nWvWnWV]
    }, {
        id: vMn.MvMNn,
        src: "img/road-T0B1L0R1.png",
        n: {
            v: 0
        },
        NMN: {
            x: 56,
            y: 28,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.WNvmv,
        src: "img/road-T0B1L1R0.png",
        n: {
            v: 0
        },
        NMN: {
            x: 0,
            y: 56,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.VWVVv,
        src: "img/road-T0B1L1R1.png",
        n: {
            v: 0
        },
        NMN: {
            x: 112,
            y: 0,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.WvwMv,
        src: "img/road-T1B0L0R0.png",
        n: {
            v: 0
        },
        NMN: {
            x: 28,
            y: 28,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.wNMWM,
        src: "img/road-T1B0L0R1.png",
        n: {
            v: 0
        },
        NMN: {
            x: 56,
            y: 56,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.VnWwn,
        src: "img/road-T1B0L1R0.png",
        n: {
            v: 0
        },
        NMN: {
            x: 84,
            y: 56,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.NmnVM,
        src: "img/road-T1B0L1R1.png",
        n: {
            v: 0
        },
        NMN: {
            x: 84,
            y: 28,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.NvMWv,
        src: "img/road-T1B1L0R0.png",
        n: {
            v: 0
        },
        NMN: {
            x: 112,
            y: 56,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.NnvMm,
        src: "img/road-T1B1L0R1.png",
        n: {
            v: 0
        },
        NMN: {
            x: 112,
            y: 28,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.vVVnv,
        src: "img/road-T1B1L1R0.png",
        n: {
            v: 0
        },
        NMN: {
            x: 0,
            y: 28,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ]
    }, {
        id: vMn.WwWvv,
        src: "img/road-T1B1L1R1.png",
        n: {
            v: 0
        },
        NMN: {
            x: 28,
            y: 56,
            mVn: 28,
            w: 28
        },
        Vvm: [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ],
        alt: [vMn.NNwVwMn, vMn.MNWVnmM]
    }];
    try {
        if (WnM !== undefined) {
            WnM.vMn = vMn;
            WnM.mwmmW = mwmmW;
        }
    } catch (NNV) {}
    var VN = (function() {
        var mVV = 100;
        var nMm = mVV / 2;
        var MwMmm = 1;
        var nvwWV = 13;
        var vvnVM = 9;
        var vnWNn = 100;
        var WmMvv = 0.025;
        var MwNMm = 0.12;
        var vvvvn = 0.01;
        var wMvMNnW = 0.008;
        var wMn = 0;
        var WWmnv = 0;
        var VvMNV = 0;
        var MNn = 0;
        var nNNNvww = 3;
        var MwMNV = 0;
        var MwnVwWV = 0;
        var mMnmW = 0;
        var wnWMV = 0;
        var MwwVNWw = 450;
        var NVm = 410;
        var mnNmn = NVm;
        var mVwWm = 412 / 8;
        var nMNmn = 0;
        var MmMNN = "img/borderBigMinimap2.png";
        var nNwnm = "img/arrow-minimap.png";
        var vvWnv = "img/arrow-minimap2.png";
        var nnvMM = "img/house-icon.png";
        var wVvWW = "img/city-icon.png";
        var vmwwW = "img/inv-empty.png";
        var mnvNM = "img/loot.png";
        var WNWVV = "img/loot-mobile.png";
        var Vwwwv = "img/loot2.png";
        var wWnwn = "img/timer.png";
        var vmmNw = "img/craft-grid.png";
        var VVmWv = "img/timer-arrow.png";
        var VmmmV = "img/timer-lights.png";
        var MvwmV = "img/hint-rotate.png";
        var VWWWm = "img/day-unusable.png";
        var vvMMWWN = "img/day-unusable.png";
        var NnNmV = "img/day-clock.png";
        var wmvvM = "img/night-clock.png";
        var vmmMv = "img/clock-hand.png";
        var VmwNM = "img/clock-hand-radiation.png";
        var wwWWW = "img/day-clock-hand.png";
        var WMvMW = "img/craft-gauge.png";
        var NvnNn = "img/stroke-bonus.png";
        var NWWNV = "img/wrong-tool.png";
        var NMNwm = "img/hand-tool.png";
        var mwmvW = "img/arrow-craft.png";
        var mNvWm = "img/unlock-skills.png";
        var vMmvN = "img/server-full.png";
        var WWmnn = "img/server-old.png";
        var wvNMN = "img/client-old.png";
        var WNNMm = "img/server-wrong.png";
        var vmvNN = "img/invitation-box.png";
        var VMWNn = "img/time-box.png";
        var vmvvn = "img/rank-box.png";
        var WmNvm = "img/toxic-alert.png";
        var NwvMW = "img/radiation-alert.png";
        var wmnmV = 500;
        var MmMVN = 256;
        var NvmmNnv = MmMVN * 2;
        var nWNMN = 500;
        var wmm = Math[networkMappings[68]](MmMVN / 2);
        var wWVMm = Math[networkMappings[68]](wmm / 2);
        var VMVwn = "img/alert";
        var wmWvm = 699;
        var WVNvW = 738;
        var WVnnV = "#70BD56";
        var vnNWM = "#e58833";
        var vWNVn = "#55B7BC";
        var wNwWW = "#d7c83a";
        var NNwMV = "#FFFFFF";
        var MmVvw = 3000;
        var vwNVW = 500;
        var MvnnW = 2500;
        var Nnmvw = Math[networkMappings[179]] * 2;
        var MMWmwww = 165 * (Math[networkMappings[179]] / 180);
        var Vnn = Math[networkMappings[179]] / 2;
        var VNnnV = Math[networkMappings[179]] / game.NMnNw;
        var MMn = 1;
        var Wmv = 2;
        var NVW = 4;
        var wnw = 8;
        var vmn = 16;
        var VVV = 32;
        var mMm = 64;
        var nMV = 128;
        var wwWNV = 0;
        var vnm = 1;
        var MMw = 2;
        var vmv = 4;
        var VmN = 8;
        var wVVNM = 0;
        var VwmvN = 1;
        var WMNVw = 2;
        var NvmVV = 3;
        var wWm = [
            [],
            [],
            [],
            []
        ];
        wWm[wVVNM][wwWNV] = 0;
        wWm[wVVNM][vnm] = 3;
        wWm[wVVNM][MMw] = 6;
        wWm[wVVNM][vmv | VmN] = 9;
        wWm[wVVNM][vmv] = 4;
        wWm[wVVNM][VmN] = 5;
        wWm[wVVNM][vnm | vmv] = 27;
        wWm[wVVNM][vnm | VmN] = 20;
        wWm[wVVNM][MMw | vmv] = 7;
        wWm[wVVNM][MMw | VmN] = 28;
        wWm[wVVNM][(vnm | vmv) | VmN] = 24;
        wWm[wVVNM][(MMw | vmv) | VmN] = 29;
        wWm[WMNVw][wwWNV] = 0;
        wWm[WMNVw][vnm] = 3;
        wWm[WMNVw][MMw] = 6;
        wWm[WMNVw][vmv | VmN] = 9;
        wWm[WMNVw][vmv] = 4;
        wWm[WMNVw][VmN] = 5;
        wWm[WMNVw][vnm | vmv] = 27;
        wWm[WMNVw][vnm | VmN] = 20;
        wWm[WMNVw][MMw | vmv] = 7;
        wWm[WMNVw][MMw | VmN] = 28;
        wWm[WMNVw][(vnm | vmv) | VmN] = 24;
        wWm[WMNVw][(MMw | vmv) | VmN] = 29;
        wWm[VwmvN][wwWNV] = 11;
        wWm[VwmvN][vnm] = 12;
        wWm[VwmvN][MMw] = 17;
        wWm[VwmvN][vmv | VmN] = 10;
        wWm[VwmvN][vmv] = 19;
        wWm[VwmvN][VmN] = 18;
        wWm[VwmvN][vnm | vmv] = 34;
        wWm[VwmvN][vnm | VmN] = 22;
        wWm[VwmvN][MMw | vmv] = 23;
        wWm[VwmvN][MMw | VmN] = 33;
        wWm[VwmvN][(vnm | vmv) | VmN] = 35;
        wWm[VwmvN][(MMw | vmv) | VmN] = 32;
        wWm[NvmVV][wwWNV] = 11;
        wWm[NvmVV][vnm] = 15;
        wWm[NvmVV][MMw] = 14;
        wWm[NvmVV][vmv | VmN] = 10;
        wWm[NvmVV][vmv] = 19;
        wWm[NvmVV][VmN] = 18;
        wWm[NvmVV][vnm | vmv] = 37;
        wWm[NvmVV][vnm | VmN] = 16;
        wWm[NvmVV][MMw | vmv] = 23;
        wWm[NvmVV][MMw | VmN] = 38;
        wWm[NvmVV][(vnm | vmv) | VmN] = 36;
        wWm[NvmVV][(MMw | vmv) | VmN] = 39;
        var nnm = [];
        nnm[0] = 0;
        nnm[MMn] = 3;
        nnm[Wmv] = 4;
        nnm[NVW] = 2;
        nnm[wnw] = 1;
        nnm[MMn | NVW] = 17;
        nnm[MMn | Wmv] = 5;
        nnm[MMn | wnw] = 18;
        nnm[Wmv | NVW] = 16;
        nnm[Wmv | wnw] = 19;
        nnm[NVW | wnw] = 6;
        nnm[(MMn | NVW) | wnw] = 10;
        nnm[(MMn | NVW) | Wmv] = 9;
        nnm[(wnw | NVW) | Wmv] = 11;
        nnm[(MMn | wnw) | Wmv] = 8;
        nnm[((MMn | NVW) | Wmv) | wnw] = 7;
        nnm[(wnw | Wmv) | vmn] = 12;
        nnm[(wnw | MMn) | VVV] = 13;
        nnm[(NVW | MMn) | nMV] = 14;
        nnm[(NVW | Wmv) | mMm] = 15;
        nnm[((NVW | wnw) | Wmv) | vmn] = 20;
        nnm[(((NVW | wnw) | Wmv) | MMn) | vmn] = 21;
        nnm[((MMn | wnw) | Wmv) | vmn] = 22;
        nnm[(((NVW | wnw) | Wmv) | MMn) | mMm] = 23;
        nnm[((MMn | NVW) | Wmv) | mMm] = 24;
        nnm[((NVW | wnw) | Wmv) | mMm] = 25;
        nnm[((NVW | wnw) | MMn) | nMV] = 26;
        nnm[(((NVW | wnw) | Wmv) | MMn) | nMV] = 27;
        nnm[((NVW | Wmv) | MMn) | nMV] = 28;
        nnm[((wnw | Wmv) | MMn) | VVV] = 29;
        nnm[(((NVW | wnw) | Wmv) | MMn) | VVV] = 30;
        nnm[((NVW | wnw) | MMn) | VVV] = 31;
        nnm[((((((NVW | wnw) | Wmv) | MMn) | VVV) | vmn) | nMV) | mMm] = 32;
        nnm[((((NVW | wnw) | Wmv) | MMn) | VVV) | nMV] = 33;
        nnm[((((NVW | wnw) | Wmv) | MMn) | VVV) | vmn] = 34;
        nnm[((((NVW | wnw) | Wmv) | MMn) | VVV) | mMm] = 35;
        nnm[((((NVW | wnw) | Wmv) | MMn) | vmn) | nMV] = 36;
        nnm[((((NVW | wnw) | Wmv) | MMn) | mMm) | vmn] = 37;
        nnm[((((NVW | wnw) | Wmv) | MMn) | mMm) | nMV] = 38;
        nnm[(((NVW | wnw) | Wmv) | mMm) | vmn] = 39;
        nnm[(((NVW | wnw) | MMn) | nMV) | VVV] = 40;
        nnm[(((Wmv | wnw) | MMn) | vmn) | VVV] = 41;
        nnm[(((Wmv | NVW) | MMn) | mMm) | nMV] = 42;
        nnm[(((((NVW | wnw) | Wmv) | MMn) | VVV) | nMV) | mMm] = 43;
        nnm[(((((NVW | wnw) | Wmv) | MMn) | vmn) | nMV) | mMm] = 44;
        nnm[(((((NVW | wnw) | Wmv) | MMn) | VVV) | vmn) | mMm] = 45;
        nnm[(((((NVW | wnw) | Wmv) | MMn) | VVV) | vmn) | nMV] = 46;
        var NmVwW = 0;
        var mMWMnNw = 1;
        var nwWwn = 2;
        var nmmmV = 600;
        var vM, wm;
        var VwN = 0;
        var Mnw = 0;
        var NnN = 0;
        var wNM = 0;
        var Mmwvw = 0;
        var WVwvV = 0;
        var nvVwM = 0;
        var NNVnv = 0;
        var nNMvN = vvvvn;
        var vMwVw = 0;
        var wWMmM = 0;
        var NWWNw = [];
        for (vM = 0; vM < 20; vM++) NWWNw[vM] = {
            v: 0
        };
        var VMNnW = nwWwn;
        var nvWwm = [];
        var nvm = [];
        var vMvnm = nvwWV;
        var WwNMw = vvnVM;
        var mwvNMMV = nvwWV * mVV;
        var nnmwvvm = vvnVM * mVV;
        var VvMVN = [];
        var nmmNv = {
            v: 0
        };
        var WnvWN = {
            v: 0
        };
        var mww = {
            Vm: 0,
            mWw: 0,
            src: mwmvW,
            n: {
                v: 0
            }
        };
        var WwN = {
            Vm: 0,
            mWw: 0,
            src: mNvWm,
            n: {
                v: 0
            }
        };
        var wMnWv = {
            src: VMWNn,
            n: {
                v: 0
            }
        };
        var NvwVn = {
            src: vmvvn,
            n: {
                v: 0
            }
        };
        var vvvWV = {
            src: WmNvm,
            n: {
                v: 0
            }
        };
        var MWmvv = 0;
        var wMwVN = {
            src: NwvMW,
            n: {
                v: 0
            }
        };
        var WMmwv = 0;
        var vVmnn = {
            src: "img/e-furniture.png",
            n: {
                v: 0
            }
        };
        var mMnWv = Wn.Nvw("img/toxic-area2.png");
        var VVwmM = Wn.Nvw("img/toxic-area3.png");
        var wNMVn = [];
        var Wnw = [];
        var WwvvmNm = {
            v: 0
        };
        var vNwMw = {
            v: 0
        };
        var vwmNV = {
            v: 0
        };
        var vvwWN = {
            v: 0
        };
        var WvNnw = [0, 0, 0, 0];
        var Nmnmm = MwNMm;
        var NWmNV = [];
        var WMmNv = 0;
        var vMMWW = {
            v: 0
        };
        var NVnNV = {
            v: 0
        };
        var nwmVn = {
            v: 0
        };
        var VvMMw = nWNMN;
        var WVwvn = {
            v: 0
        };
        var Mvwnm = {
            v: 0
        };
        var MwvMM = {
            src: NvnNn,
            n: {
                v: 0
            }
        };
        var VwmnW = 0;
        var WwNwm = {
            src: NWWNV,
            n: {
                v: 0
            }
        };
        var MvMNW = {
            src: NMNwm,
            n: {
                v: 0
            }
        };
        var VnVWM = 12000;
        var VVVnN = 12000;
        var mnVVN = [];
        for (vM = 0; vM < 10; vM++) {
            mnVVN[vM] = [];
            for (wm = 0; wm < 3; wm++) mnVVN[vM][wm] = {
                v: 0
            };
        };
        var mWw = [];
        for (vM = 0; vM < 8; vM++) {
            mWw[vM] = [];
            for (wm = 0; wm < 2; wm++) mWw[vM][wm] = {
                v: 0
            };
        }
        var wnWwW = {
            src: nNwnm,
            n: {
                v: 0
            }
        };
        var vMmWW = {
            src: vvWnv,
            n: {
                v: 0
            }
        };
        var NMN = {
            v: 0
        };
        var WnWvW = {
            src: nnvMM,
            n: {
                v: 0
            }
        };
        var vmvnN = {
            src: wVvWW,
            n: {
                v: 0
            }
        };
        var nVnvM = {
            src: wmvvM,
            n: {
                v: 0
            }
        };
        var nnMWM = {
            src: NnNmV,
            n: {
                v: 0
            }
        };
        var mNMVn = {
            src: vmmMv,
            n: {
                v: 0
            }
        };
        var mNVvm = {
            src: wwWWW,
            n: {
                v: 0
            }
        };
        var nNMNN = {
            src: VmwNM,
            n: {
                v: 0
            }
        };
        var VMVwN = {
            src: vMmvN,
            n: {
                v: 0
            }
        };
        var NVmvM = {
            src: WWmnn,
            n: {
                v: 0
            }
        };
        var nmVvN = {
            src: wvNMN,
            n: {
                v: 0
            }
        };
        var NvwMN = {
            src: WNNMm,
            n: {
                v: 0
            }
        };
        var wWvVN = {
            v: 0
        };
        var vvnnW = [];
        for (vM = 0; vM < 20; vM++) vvnnW[networkMappings[140]]({
            v: 0
        });
        var MVm = document[networkMappings[253]]('canvas');
        var VmnMM = MVm[networkMappings[187]]('2d');
        MVm[networkMappings[65]] = NVm;
        MVm[networkMappings[12]] = mnNmn;
        MVm.v = 1;
        MVm.vww = MVm[networkMappings[65]] / 2;
        MVm.mnn = MVm[networkMappings[12]] / 2;
        var wWvmW = {
            n: MVm
        };
        var NVnwM = document[networkMappings[253]]('canvas');
        var MvNVN = NVnwM[networkMappings[187]]('2d');
        NVnwM[networkMappings[65]] = NVm;
        NVnwM[networkMappings[12]] = mnNmn;
        NVnwM.v = 1;
        NVnwM.vww = MVm[networkMappings[65]] / 2;
        NVnwM.mnn = MVm[networkMappings[12]] / 2;
        var wmnwW = {
            n: NVnwM
        };
        var vmNNV = 0;

        function NMwMm() {
            if (game.player.vnWWv === 8) {
                VmnMM[networkMappings[113]](0, 0, NVm, mnNmn);
                MvNVN[networkMappings[113]](0, 0, NVm, mnNmn);
                for (var vM = 0; vM < 8; vM++) {
                    for (var wm = 0; wm < 8; wm++) {
                        var vVmmW = game.player.NVwNm[vM][wm];
                        if (vVmmW === 7) VmnMM[networkMappings[114]](mMnWv, 2 + (wm * mVwWm), (vM * mVwWm) + 1, mMnWv.vww, mMnWv.mnn);
                        else VmnMM[networkMappings[114]](VVwmM, 2 + (wm * mVwWm), (vM * mVwWm) + 1, mMnWv.vww, mMnWv.mnn);
                    }
                }
            } else {
                VmnMM[networkMappings[114]](NVnwM, 0, 0);
                MvNVN[networkMappings[113]](0, 0, NVm, mnNmn);
                for (var MNN = 0; MNN < 12; MNN++) {
                    var wvn = game.player.WVMmN[MNN];
                    var vM = wvn[0];
                    var wm = wvn[1];
                    if (vM === -1) continue;
                    MvNVN[networkMappings[114]](mMnWv, 2 + (wm * mVwWm), (vM * mVwWm) + 1, mMnWv.vww, mMnWv.mnn);
                }
            };
        };;
        var MwVwN = document[networkMappings[253]]('canvas');
        var nVvNn = MwVwN[networkMappings[187]]('2d');
        MwVwN[networkMappings[65]] = wmWvm;
        MwVwN[networkMappings[12]] = WVNvW;
        wmMNn = [];
        for (var vM = 0; vM < 9; vM++) wmMNn[vM] = 0;
        var MNV = 0;
        for (vM = 0; vM < vvnVM; vM++) {
            nvWwm[vM] = [];
            for (var wm = 0; wm < nvwWV; wm++) nvWwm[vM][wm] = 0;
        }
        var MmNvM = document[networkMappings[253]]("canvas");
        var mnnvw = MmNvM[networkMappings[187]]("2d");
        MmNvM[networkMappings[65]] = 280;
        MmNvM[networkMappings[12]] = 148;
        var mNMwV = -1;
        var canvas = [];
        var NMnmm = [];
        var NVV = document[networkMappings[253]]("canvas");
        var mNnmw = NVV[networkMappings[187]]("2d");
        NVV[networkMappings[65]] = 280;
        NVV[networkMappings[12]] = 50;
        var mVMVn = -1;
        var mvMNn = document[networkMappings[253]]("canvas");
        var NnMnv = mvMNn[networkMappings[187]]("2d");
        mvMNn[networkMappings[65]] = 420;
        mvMNn[networkMappings[12]] = 148;
        var wVMnn = -1;

        function WNvVM() {
            this.vNW = 0;
            this.MWnMN = 0;
            this.VmMnV = 0;
            this.mmm = 0;
            this.mmV = 0;
            this.MNV = 0;
            this.vwVVn = 0;
            this.nvW = 0;
            this.nnw = 0;
            this.WnN = 0;
            this.vM = 0;
            this[networkMappings[157]] = [];
            this[networkMappings[197]] = 0;
            for (var vM = 0; vM < 3; vM++) this[networkMappings[157]][networkMappings[140]]({
                type: 0,
                vwV: 0
            });
        };;

        function vWnVv(VM, Wv) {
            if ((VM.Mvw > 0) || (VM.MnN !== 0)) return 0;
            var vM = VM.vM;
            var wm = VM.wm;
            var mv = VM.Nvm >> 7;
            var index = 0;
            switch (Wv) {
                case 0:
                    if ((vM + 1) < MNn) {
                        var WWw = nvm[vM + 1][wm];
                        if ((WWw.vNW === MNV) && (WWw.mmV === mv)) {
                            if (WWw[networkMappings[197]] === 1) index += vnm;
                            else if (WWw[networkMappings[197]] === 3) index += MMw;
                        }
                    }
                    if ((wm - 1) >= 0) {
                        var WWw = nvm[vM][wm - 1];
                        if (((WWw.vNW === MNV) && (WWw.mmV === mv)) && ((WWw[networkMappings[197]] === 3) || (WWw[networkMappings[197]] === 0))) index += vmv;
                    }
                    if ((wm + 1) < wMn) {
                        var WWw = nvm[vM][wm + 1];
                        if (((WWw.vNW === MNV) && (WWw.mmV === mv)) && ((WWw[networkMappings[197]] === 1) || (WWw[networkMappings[197]] === 0))) index += VmN;
                    }
                    break;
                case 1:
                    if ((wm - 1) >= 0) {
                        var WWw = nvm[vM][wm - 1];
                        if ((WWw.vNW === MNV) && (WWw.mmV === mv)) {
                            if (WWw[networkMappings[197]] === 0) index += MMw;
                            else if (WWw[networkMappings[197]] === 2) index += vnm;
                        }
                    }
                    if ((vM - 1) >= 0) {
                        var WWw = nvm[vM - 1][wm];
                        if (((WWw.vNW === MNV) && (WWw.mmV === mv)) && ((WWw[networkMappings[197]] === 0) || (WWw[networkMappings[197]] === 1))) index += vmv;
                    }
                    if ((vM + 1) < MNn) {
                        var WWw = nvm[vM + 1][wm];
                        if (((WWw.vNW === MNV) && (WWw.mmV === mv)) && ((WWw[networkMappings[197]] === 2) || (WWw[networkMappings[197]] === 1))) index += VmN;
                    }
                    break;
                case 2:
                    if ((vM - 1) >= 0) {
                        var WWw = nvm[vM - 1][wm];
                        if ((WWw.vNW === MNV) && (WWw.mmV === mv)) {
                            if (WWw[networkMappings[197]] === 1) index += MMw;
                            else if (WWw[networkMappings[197]] === 3) index += vnm;
                        }
                    }
                    if ((wm - 1) >= 0) {
                        var WWw = nvm[vM][wm - 1];
                        if (((WWw.vNW === MNV) && (WWw.mmV === mv)) && ((WWw[networkMappings[197]] === 3) || (WWw[networkMappings[197]] === 2))) index += VmN;
                    }
                    if ((wm + 1) < wMn) {
                        var WWw = nvm[vM][wm + 1];
                        if (((WWw.vNW === MNV) && (WWw.mmV === mv)) && ((WWw[networkMappings[197]] === 1) || (WWw[networkMappings[197]] === 2))) index += vmv;
                    }
                    break;
                case 3:
                    if ((wm + 1) < wMn) {
                        var WWw = nvm[vM][wm + 1];
                        if ((WWw.vNW === MNV) && (WWw.mmV === mv)) {
                            if (WWw[networkMappings[197]] === 0) index += vnm;
                            else if (WWw[networkMappings[197]] === 2) index += MMw;
                        }
                    }
                    if ((vM - 1) >= 0) {
                        var WWw = nvm[vM - 1][wm];
                        if (((WWw.vNW === MNV) && (WWw.mmV === mv)) && ((WWw[networkMappings[197]] === 0) || (WWw[networkMappings[197]] === 3))) index += VmN;
                    }
                    if ((vM + 1) < MNn) {
                        var WWw = nvm[vM + 1][wm];
                        if (((WWw.vNW === MNV) && (WWw.mmV === mv)) && ((WWw[networkMappings[197]] === 2) || (WWw[networkMappings[197]] === 3))) index += vmv;
                    }
                    break;
            }
            return wWm[Wv][index];
        };;

        function WwnVW(VM) {
            if ((VM.Mvw > 0) || (VM.MnN !== 0)) return 0;
            var vM = VM.vM;
            var wm = VM.wm;
            var mv = VM.Nvm >> 7;
            var index = 0;
            var N = 0,
                VNm = 0,
                m = 0,
                wWWnW = 0;
            if ((vM - 1) >= 0) {
                var WWw = nvm[vM - 1][wm];
                if (WWw.MWnMN === MNV) {
                    VNm = 1;
                    index += NVW;
                }
            }
            if ((vM + 1) < MNn) {
                var WWw = nvm[vM + 1][wm];
                if (WWw.MWnMN === MNV) {
                    index += wnw;
                    m = 1;
                }
            }
            if ((wm - 1) >= 0) {
                var WWw = nvm[vM][wm - 1];
                if (WWw.MWnMN === MNV) {
                    index += MMn;
                    wWWnW = 1;
                }
            }
            if ((wm + 1) < wMn) {
                var WWw = nvm[vM][wm + 1];
                if (WWw.MWnMN === MNV) {
                    index += Wmv;
                    N = 1;
                }
            }
            if ((N + VNm) === 2) {
                var WWw = nvm[vM - 1][wm + 1];
                if (WWw.MWnMN === MNV) index += mMm;
            }
            if ((wWWnW + VNm) === 2) {
                var WWw = nvm[vM - 1][wm - 1];
                if (WWw.MWnMN === MNV) index += nMV;
            }
            if ((m + N) === 2) {
                var WWw = nvm[vM + 1][wm + 1];
                if (WWw.MWnMN === MNV) index += vmn;
            }
            if ((m + wWWnW) === 2) {
                var WWw = nvm[vM + 1][wm - 1];
                if (WWw.MWnMN === MNV) index += VVV;
            }
            return nnm[index];
        };;

        function NvMNm(VM) {
            if ((VM.Mvw > 0) || (VM.MnN !== 0)) return 0;
            var vM = VM.vM;
            var wm = VM.wm;
            var mmV = Mww[VM.Nvm >> 7];
            var mv = mmV.nMnmN;
            var index = 0;
            var N = 0,
                VNm = 0,
                m = 0,
                wWWnW = 0;
            if ((vM - 1) >= 0) {
                var WWw = nvm[vM - 1][wm];
                if ((WWw.vNW === MNV) && (WWw.mmV === mv)) {
                    VNm = 1;
                    index += NVW;
                }
            }
            if ((vM + 1) < MNn) {
                var WWw = nvm[vM + 1][wm];
                if ((WWw.vNW === MNV) && (WWw.mmV === mv)) {
                    index += wnw;
                    m = 1;
                }
            }
            if ((wm - 1) >= 0) {
                var WWw = nvm[vM][wm - 1];
                if ((WWw.vNW === MNV) && (WWw.mmV === mv)) {
                    index += MMn;
                    wWWnW = 1;
                }
            }
            if ((wm + 1) < wMn) {
                var WWw = nvm[vM][wm + 1];
                if ((WWw.vNW === MNV) && (WWw.mmV === mv)) {
                    index += Wmv;
                    N = 1;
                }
            }
            if ((N + VNm) === 2) {
                var WWw = nvm[vM - 1][wm + 1];
                if ((WWw.vNW === MNV) && (WWw.mmV === mv)) index += mMm;
            }
            if ((wWWnW + VNm) === 2) {
                var WWw = nvm[vM - 1][wm - 1];
                if ((WWw.vNW === MNV) && (WWw.mmV === mv)) index += nMV;
            }
            if ((m + N) === 2) {
                var WWw = nvm[vM + 1][wm + 1];
                if ((WWw.vNW === MNV) && (WWw.mmV === mv)) index += vmn;
            }
            if ((m + wWWnW) === 2) {
                var WWw = nvm[vM + 1][wm - 1];
                if ((WWw.vNW === MNV) && (WWw.mmV === mv)) index += VVV;
            }
            var index = nnm[index];
            nvm[vM][wm].VmMnV = mmV.VmMnV[index];
            return index;
        };;

        function vwWVm(VM) {
            var mv = VM.Nvm >> 7;
            if (((Mww[mv].wmM !== 1) || (VM.Mvw > 0)) || (VM.mmN > 0)) return;
            var WWw = nvm[VM.vM][VM.wm];
            WWw.vNW = MNV;
            WWw.mmV = mv;
            WWw[networkMappings[197]] = (VM.Nvm >> 5) & 3;
        };;

        function MMnVv(VM) {
            var mv = VM.Nvm >> 7;
            if (((Mww[mv].mmV !== 1) || (VM.Mvw > 0)) || (VM.mmN > 0)) return;
            var WWw = nvm[VM.vM][VM.wm];
            WWw.vNW = MNV;
            WWw.mmV = Mww[mv].nMnmN;
            if (game.player.Nnn === VM.wm) {
                var VNv = Math[networkMappings[4]](1, Math[networkMappings[99]](game.player.vWn - VM.vM));
                if (game.player.vWn < VM.vM) WvNnw[0] = Nmnmm / VNv;
                else WvNnw[1] = Nmnmm / VNv;
            } else if (game.player.vWn === VM.vM) {
                var VNv = Math[networkMappings[4]](1, Math[networkMappings[99]](game.player.Nnn - VM.wm));
                if (game.player.Nnn < VM.wm) WvNnw[2] = Nmnmm / VNv;
                else WvNnw[3] = Nmnmm / VNv;
            }
        };;

        function NwNVv(VM) {
            var mv = VM.Nvm >> 7;
            if (((Mww[mv].mmV !== 1) || (VM.Mvw > 0)) || (VM.mmN > 0)) return;
            var WWw = nvm[VM.vM][VM.wm];
            WWw.MWnMN = MNV;
        };;

        function VmMMV(VM, vwV) {
            var vM = VM.vM;
            var wm = VM.wm;
            var WWw = nvm[vM][wm];
            if (WWw.MNV === MNV) {
                if (WWw.vM < 3) {
                    var m = WWw[networkMappings[157]][WWw.vM];
                    WWw.vM += 1;
                    m[networkMappings[217]] = VM[networkMappings[217]];
                    m.vwV = vwV;
                }
            } else {
                WWw.MNV = MNV;
                var m = WWw[networkMappings[157]][0];
                WWw.vM = 1;
                m[networkMappings[217]] = VM[networkMappings[217]];
                m.vwV = vwV;
            }
        };;

        function mnwvv(WnMwm, WWwMW, nNMNW) {
            NMNww = document[networkMappings[61]]("bod")[networkMappings[186]];
            if (game.Wvv === game.vVwwV) {
                VmnMM[networkMappings[113]](0, 0, NVm, NVm);
                MvNVN[networkMappings[113]](0, 0, NVm, NVm);
                MWmvv = 0;
            }
            WMmwv = 0;
            VN.wnNWn = 0;
            VN.wnMnv = 0;
            if (WnMwm !== undefined) VvMMw = 0;
            else VvMMw = nWNMN;
            if (nNMNW !== undefined) nNMvN = nNMNW;
            else nNMvN = vvvvn;
            if (WWwMW !== undefined) Nmnmm = WWwMW;
            else Nmnmm = MwNMm;
            NnN = 0;
            wNM = 0;
            game.player[networkMappings[77]] = 0;
            game.player[networkMappings[120]] = 0;
            game.player.vWn = 0;
            game.player.Nnn = 0;
            mww.mWw = 0;
            mww.Vm = 0;
            WwN.mWw = 0;
            WwN.Vm = 0;
            nMNvM[networkMappings[109]] = -1;
            nMNvM.wWW = -1;
            var Vn = localStorage[networkMappings[88]]("particles");
            if (Vn !== null) VMNnW = Number(Vn);
            gameSettings = "";
            vnmNw = null;
            MvN[networkMappings[65]] = 150;
            MvN[networkMappings[12]] = 150;
            VN.wnnmV = (MvN[networkMappings[65]] * 100) / 255;
            wMn = MvN[networkMappings[65]];
            MNn = MvN[networkMappings[12]];
            WWmnv = mVV * wMn;
            VvMNV = mVV * MNn;
            MwMNV = 824 / WWmnv;
            mMnmW = 824 - MmMVN;
            wnWMV = mMnmW + wmm;
            nMNmn = WWmnv / 8;
            game.VVnNN(wMn, MNn);
            for (var vM = 0; vM < MNn; vM++) {
                nvm[vM] = [];
                for (var wm = 0; wm < wMn; wm++) nvm[vM][wm] = new WNvVM;
            }
            var tokenIndex = mNv.VNV[0][networkMappings[231]];
            for (vM = 0; vM < tokenIndex; vM++) NWmNV[vM] = null;
        };;

        function NnnvV(NW, ww, vn, WM, vnn, delta) {
            NW.nM[networkMappings[77]] = vn;
            NW.nM[networkMappings[120]] = WM;
            NW.MW();
            var mN = Mww[ww[0]];
            var nW = ww[1];
            if (nW > 1) {
                if (vnn[nW] === undefined) {
                    vnn[nW] = {
                        n: textFormatter.MwM("x" + nW, "'Black Han Sans', sans-serif", "#ffffff", 30, 250, undefined, 15, 12, undefined, undefined, undefined, undefined, "#000000", 12)
                    };
                    vnn[nW].n.v = 1;
                }
                Wn.MV(vnn[nW], (vn / Vv) + 53, (WM / Vv) + 55, -0.5, 0, 0, 1);
            }
            if ((mN.Wvn !== undefined) && (mN.NnnWn === undefined)) {
                var nW = ww[3];
                if (delta[nW] === undefined) {
                    delta[nW] = {
                        n: textFormatter.MwM("x" + nW, "'Black Han Sans', sans-serif", "#FFFF00", 30, 250, undefined, 15, 12, undefined, undefined, undefined, undefined, "#000000", 12)
                    };
                    delta[nW].n.v = 1;
                }
                Wn.MV(delta[nW], (vn / Vv) + 53, (WM / Vv) + 55, -0.5, 0, 0, 1);
            }
            if (mN.Mmnmn !== undefined) {
                var NmVvn = Math[networkMappings[68]](ww[3] / 12.8);
                var n = vvnnW[NmVvn];
                if (n.v !== 1) {
                    vvnnW[NmVvn] = Wn.Nvw(("img/rotten" + NmVvn) + ".png", n);
                } else value[networkMappings[114]](n, vn + (0.5 * Vv), WM, (Vv * n[networkMappings[65]]) / 2, (Vv * n[networkMappings[12]]) / 2);
            }
        };;

        function VnvwV(index, vn, WM) {
            if (canvas[index] === undefined) {
                canvas[index] = document[networkMappings[253]]("canvas");
                NMnmm[index] = canvas[index][networkMappings[187]]("2d");
                var mnnwN = canvas[index];
                var VvWvV = NMnmm[index];
                mnnwN[networkMappings[65]] = 400;
                mnnwN[networkMappings[12]] = 148;
                VvWvV[networkMappings[113]](0, 0, 400, 148);
                Wn.VMvwW(VvWvV, 0, 0, 400, 148, 10);
                VvWvV[networkMappings[84]] = "#000000";
                VvWvV[networkMappings[192]] = 0.5;
                VvWvV[networkMappings[202]]();
                VvWvV[networkMappings[192]] = 1;
                drawText(NMnmm[index], index);
            }
            var Vw = Vv * 74;
            value[networkMappings[114]](canvas[index], vn, WM, Vv * 190, Vw);
        };;

        function VvnVn(vnn, delta, WMw, mmn) {
            if (game.player.health !== 0) return;
            var mWV = gameManager.mWV;
            if (nmmNv.v !== 1) {
                nmmNv = Wn.Nvw(vmwwW, nmmNv);
                return;
            }
            var ww = game.player.mWV;
            var tokenIndex = ww[networkMappings[231]];
            var vw = (nmmNv[networkMappings[65]] * Vv) / 2;
            var Vw = (nmmNv[networkMappings[12]] * Vv) / 2;
            var VVN = Math[networkMappings[4]](300 * Vv, (Vmn - (vw * tokenIndex)) / 2);
            var VwW = (mMn - Vw) - (5 * Vv);
            var vn = VVN;
            var WM = VwW;
            var mwN = (5 * Vv) + vw;
            if (tokenIndex > 10) {
                mmn.nM[networkMappings[77]] = Vmn - (69 * Vv);
                mmn.nM[networkMappings[120]] = mMn - (68 * Vv);
                mmn.MW();
                if (mmn[networkMappings[103]] === 0) tokenIndex = 10;
            }
            for (var vM = 0; vM < tokenIndex; vM++) {
                var NW = mWV[vM];
                if (ww[vM][0] === 0) {
                    NW.nM[networkMappings[77]] = vn;
                    NW.nM[networkMappings[120]] = WM;
                    value[networkMappings[114]](nmmNv, vn, WM, vw, Vw);
                } else NnnvV(NW, ww[vM], vn, WM, vnn, delta);
                if (vM === 9) {
                    vn = mmn.nM[networkMappings[77]] - (5 * Vv);
                    WM = mmn.nM[networkMappings[120]] - mwN;
                } else if (vM === 12) {
                    vn -= mwN;
                    WM = mmn.nM[networkMappings[120]] - mwN;
                } else if (vM > 9) WM -= mwN;
                else vn += mwN;
            }
            var vWW = game.player.vWW;
            if (((vWW.wnv === 1) && (WNw[networkMappings[155]] === WNw.VVwmw)) && (MNM.VNv(vWW[networkMappings[77]], vWW[networkMappings[120]], WNw[networkMappings[77]], WNw[networkMappings[120]]) > (4 * Vv))) {
                var mN = ww[vWW[networkMappings[109]]][0];
                if (mN > 0) {
                    var n = Mww[mN].NN.n[0];
                    if (n.v === 0) n = WVMwv[mN].NN.n[0];
                    value[networkMappings[192]] = 0.7;
                    var vw = 68 * Vv;
                    value[networkMappings[114]](n, (WNw[networkMappings[77]] * Vv) - (vw / 2), (WNw[networkMappings[120]] * Vv) - (vw / 2), vw, vw);
                    value[networkMappings[192]] = 1;
                }
            } else if ((WMw !== -1) && (ww[WMw][0] !== 0)) {
                if (WMw < 10) VnvwV(ww[WMw][0], VVN + (mwN * WMw), VwW - (79 * Vv));
                else if (WMw < 13) VnvwV(ww[WMw][0], mmn.nM[networkMappings[77]] - (200 * Vv), mmn.nM[networkMappings[120]] + (mwN * (-1 + ((10 - WMw) % 3))));
                else VnvwV(ww[WMw][0], (mmn.nM[networkMappings[77]] - (200 * Vv)) - mwN, mmn.nM[networkMappings[120]] + (mwN * (-1 + ((10 - WMw) % 3))));
            }
        };;

        function vwMMv(vn, WM) {
            var MvM = game.player[networkMappings[95]];
            if (VvMVN[MvM] === undefined) {
                VvMVN[MvM] = {
                    n: textFormatter.MwM("" + MvM, "'Black Han Sans', sans-serif", "#ffffff", 44, 250, undefined, 18, 15, undefined, undefined, undefined, undefined, "#000000", 15)
                };
                VvMVN[MvM].n.v = 1;
            }
            Wn.MV(VvMVN[MvM], (vn / Vv) + 234, (WM / Vv) + 79, 0, 0, 0, 1);
            var WwV = game.VvW.WwV;
            var Vn = 1 - (WwV.NVv / WwV.WmW);
            Wn.MV(nNMNN, 38 + (vn / Vv), 37 + (WM / Vv), Math[networkMappings[179]] * Vn, 0, 0, 1);
        };;

        function WnnVm(vn, WM) {
            var life = game.VvW.life;
            var Vn = life.NVv / life.WmW;
            Wn[networkMappings[3]](value, (vn / Vv) + 14, (WM / Vv) + 71, Vn * 189, 16, WVnnV);
            var NWV = game.VvW.NWV;
            var Vn = NWV.NVv / NWV.WmW;
            Wn[networkMappings[3]](value, (vn / Vv) + 13, (WM / Vv) + 162, 54, -Vn * 63, vnNWM);
            var Nmn = game.VvW.Nmn;
            var Vn = Nmn.NVv / Nmn.WmW;
            Wn[networkMappings[3]](value, (vn / Vv) + 81, (WM / Vv) + 162, 54, -Vn * 63, vWNVn);
            var Nvv = game.VvW.Nvv;
            var Vn = Nvv.NVv / Nvv.WmW;
            Wn[networkMappings[3]](value, (vn / Vv) + 150, (WM / Vv) + 162, 54, -Vn * 63, wNwWW);
            var VMM = game.VvW.VMM;
            var Vn = VMM.NVv / VMM.WmW;
            Wn[networkMappings[3]](value, (vn / Vv) + 226, (WM / Vv) + 172, 16, -Vn * 77, NNwMV);
            var wnVvW = game.NWMVm();
            var n;
            var VWMNn;
            if (wnVvW >= 10000000) {
                if (nVnvM.v !== 1) {
                    nVnvM = Wn.Nvw(wmvvM, nVnvM);
                    return;
                }
                wnVvW -= 10000000;
                n = nVnvM;
                VWMNn = mNMVn;
            } else {
                if (nnMWM.v !== 1) {
                    nnMWM = Wn.Nvw(NnNmV, nnMWM);
                    return;
                }
                n = nnMWM;
                VWMNn = mNVvm;
            }
            var vw = (Vv * n[networkMappings[65]]) / 2;
            var Vw = (Vv * n[networkMappings[12]]) / 2;
            value[networkMappings[114]](n, vn + (100 * Vv), WM + (14 * Vv), vw, Vw);
            Wn.MV(VWMNn, 144.5 + (vn / Vv), (WM / Vv) + 56, wnVvW * VNnnV, 0, 0, 1);
        };;

        function VNMMW(vn, WM) {
            var mvV = game.mvV;
            var playersList = game.playersList;
            var VVnMn = -1;
            if (game.MvmVm === 1) {
                VVnMn = 1;
                game.MvmVm = 0;
                nVvNn[networkMappings[113]](0, 0, wmWvm, WVNvW);
                for (var vM = 0;
                    (vM < mvV[networkMappings[231]]) && (mvV[vM] !== 0); vM++) {
                    var player = playersList[mvV[vM]];
                    if (game.player[networkMappings[109]] === mvV[vM]) VVnMn = 0;
                    if (player.nickname === 0) break;
                    if (player.mNmvM === null) {
                        if (player[networkMappings[109]] === game.player[networkMappings[109]]) player.mNmvM = textFormatter.MwM(player.nickname, "'Viga', sans-serif", "#D6C823", 40, 350, undefined, 0, 12);
                        else player.mNmvM = textFormatter.MwM(player.nickname, "'Viga', sans-serif", "#ffffff", 40, 350, undefined, 0, 12);
                    }
                    if (player.nVv === null) {
                        if (player[networkMappings[109]] === game.player[networkMappings[109]]) player.nVv = textFormatter.MwM(player.nvVVM, "'Viga', sans-serif", "#D6C823", 40, 150, undefined, 5, 12);
                        else player.nVv = textFormatter.MwM(player.nvVVM, "'Viga', sans-serif", "#ffffff", 40, 150, undefined, 5, 12);
                    }
                    if ((player.mNmvM[networkMappings[65]] !== 0) && (player.mNmvM[networkMappings[12]] !== 0)) nVvNn[networkMappings[114]](player.mNmvM, 90, 114 + (vM * 50), player.mNmvM[networkMappings[65]], player.mNmvM[networkMappings[12]]);
                    nVvNn[networkMappings[114]](player.nVv, 484, 114 + (vM * 50), player.nVv[networkMappings[65]], player.nVv[networkMappings[12]]);
                    var n = nmVVN[player.WVNvV].n;
                    if (n.v === 1) nVvNn[networkMappings[114]](n, 612, 114 + (vM * 50), n[networkMappings[65]], n[networkMappings[12]]);
                }
                game.player.mWMNn = VVnMn;
                if (VVnMn === 1) {
                    var n = nmVVN[game.player.WVNvV].n;
                    if (n.v === 1) nVvNn[networkMappings[114]](n, 375, 645, n[networkMappings[65]] * 1.5, n[networkMappings[12]] * 1.5);
                }
            }
            var playerState = game.player.playerState;
            if ((VVnMn === 1) || ((game.player.mWMNn === 1) && (playerState !== game.player.NVmNW))) {
                var player = playersList[game.player[networkMappings[109]]];
                nVvNn[networkMappings[113]](480, 657, 112, 60);
                if (playerState !== game.player.NVmNW) {
                    game.player.NVmNW = playerState;
                    player.nVv = textFormatter.MwM(wvm.VMnMn(playerState), "'Viga', sans-serif", "#ffffff", 40, 150, undefined, 5, 12);
                }
                nVvNn[networkMappings[114]](player.nVv, 484, 662, player.nVv[networkMappings[65]], player.nVv[networkMappings[12]]);
            }
            value[networkMappings[114]](MwVwN, vn, WM, (wmWvm / 3) * Vv, (WVNvW / 3) * Vv);
        };;

        function MMVVW(WMmnW, secondaryElement) {
            var vw = NVm * Vv;
            var Vw = mnNmn * Vv;
            var vn = Wvm - (vw / 2);
            var WM = Math[networkMappings[4]](NMv - (Vw / 2), 0);
            var nNw = vn / Vv;
            var wnM = WM / Vv;
            var mMVMm = NVm / WWmnv;
            var mVnMN = mnNmn / VvMNV;
            secondaryElement.nM[networkMappings[77]] = Math[networkMappings[68]]((vn + vw) + (0 * Vv));
            secondaryElement.nM[networkMappings[120]] = Math[networkMappings[68]](WM + (0 * Vv));
            WMmnW.MW();
            var vwmWM = game.player.vwmWM;
            var tokenIndex = vwmWM[networkMappings[231]] / 2;
            if (tokenIndex > 0) {
                VwW = Math[networkMappings[68]]((WM / Vv) + Math[networkMappings[250]](Math[networkMappings[4]](10, vwmWM[0] * mVnMN), 400));
                VVN = Math[networkMappings[68]]((vn / Vv) + Math[networkMappings[250]](Math[networkMappings[4]](10, vwmWM[1] * mMVMm), 400));
                Wn.MV(vmvnN, VVN, VwW, 0, 0, 0, 1);
                for (var vM = 1; vM < tokenIndex; vM++) {
                    VwW = Math[networkMappings[68]]((WM / Vv) + Math[networkMappings[250]](Math[networkMappings[4]](10, vwmWM[vM * 2] * mVnMN), 400));
                    VVN = Math[networkMappings[68]]((vn / Vv) + Math[networkMappings[250]](Math[networkMappings[4]](10, vwmWM[1 + (vM * 2)] * mMVMm), 400));
                    Wn.MV(WnWvW, VVN, VwW, 0, 0, 0, 1);
                }
            }
            if (game.Wvv === game.vVwwV) {
                var VvMmv = nNw + (NVm / 2);
                var mNvmV = wnM + (mnNmn / 2);
                Wn.MV(wWvmW, VvMmv, mNvmV, 0, 0, 0, 2);
                value[networkMappings[192]] = (vmNNV > 600) ? wvm.Mnm.vwW((1200 - vmNNV) / 600) : wvm.Mnm.vwW(vmNNV / 600);
                Wn.MV(wmnwW, VvMmv, mNvmV, 0, 0, 0, 2);
                value[networkMappings[192]] = 1;
            }
            secondaryElement.MW();
            if ((game.player.healthStatus !== -1) || ((game.player.health !== 0) && (game.Wnw < 6))) {
                var playersList = mNv.VNV[vMM];
                for (var vM = 0; vM < game.player.Wwwnv; vM++) {
                    var Wvwmm = game.player.wVVwv[vM];
                    if (Wvwmm.MMVmM < 0) continue;
                    var player = game.playersList[Wvwmm[networkMappings[109]]];
                    var VVN = Math[networkMappings[68]](nNw + Math[networkMappings[250]](Math[networkMappings[4]](10, player[networkMappings[158]] * mMVMm), 400));
                    var VwW = Math[networkMappings[68]](wnM + Math[networkMappings[250]](Math[networkMappings[4]](10, player[networkMappings[41]] * mMVMm), 400));
                    var MN;
                    if (MNV === (player.MNV + 1)) MN = playersList[player.nNMMN][networkMappings[142]];
                    else MN = player[networkMappings[77]] % Nnmvw;
                    Wn.MV(vMmWW, VVN, VwW, MN, 0, 0, 1);
                }
            }
            var VVN = Math[networkMappings[68]]((vn / Vv) + Math[networkMappings[250]](Math[networkMappings[4]](10, NnN * mMVMm), 400));
            var VwW = Math[networkMappings[68]]((WM / Vv) + Math[networkMappings[250]](Math[networkMappings[4]](10, wNM * mVnMN), 400));
            Wn.MV(wnWwW, VVN, VwW, WNw[networkMappings[142]], 0, 0, 1);
            if (game.player.nMWvn > 0) {
                var player = game.playersList[game.player.MnNwW];
                Wn.MV(nmVVN[player.WVNvV], Math[networkMappings[68]](nNw + Math[networkMappings[250]](Math[networkMappings[4]](10, player[networkMappings[158]] * mMVMm), 400)), Math[networkMappings[68]](wnM + Math[networkMappings[250]](Math[networkMappings[4]](10, player[networkMappings[41]] * mMVMm), 400)), 0, 0, 0, 1.25);
            }
        };;

        function vWnMv() {
            if (adminSettings.vMMMN > 0) {
                if (adminSettings.vMMMN > 2500) value[networkMappings[192]] = wvm.Mnm.vwW((3000 - adminSettings.vMMMN) / 500);
                else if (adminSettings.vMMMN > 500) value[networkMappings[192]] = 1;
                else value[networkMappings[192]] = wvm.Mnm.vwW(adminSettings.vMMMN / 500);
                if (adminSettings.mVVmv === 0) Wn.MV(nmVvN, mWW, nmVvN.n.mnn / 2, 0, 0, 0, 1);
                else if (adminSettings.mVVmv === 1) Wn.MV(NVmvM, mWW, NVmvM.n.mnn / 2, 0, 0, 0, 1);
                else if (adminSettings.mVVmv === 2) Wn.MV(VMVwN, mWW, VMVwN.n.mnn / 2, 0, 0, 0, 1);
                else if (adminSettings.mVVmv === 3) Wn.MV(NvwMN, mWW, NvwMN.n.mnn / 2, 0, 0, 0, 1);
                value[networkMappings[192]] = 1;
                adminSettings.vMMMN -= WW;
            }
        };;

        function WVVww(vn, WM) {
            if (wWvVN.v !== 1) {
                wWvVN = Wn.Nvw(vmvNN, wWvVN);
                return;
            }
            gameManager.WvvNm.nM[networkMappings[77]] = vn + (241 * Vv);
            gameManager.WvvNm.nM[networkMappings[120]] = WM + (6 * Vv);
            gameManager.wwVnn.nM[networkMappings[77]] = vn + (290 * Vv);
            gameManager.wwVnn.nM[networkMappings[120]] = WM + (6 * Vv);
            if ((game.player.wmn !== 0) || (game.player.vWvvm > 0)) {
                if (game.player.wmn !== 0) {
                    if (game.player.vWvvm < 333) {
                        value[networkMappings[192]] = game.player.vWvvm / 333;
                        game.player.vWvvm += WW;
                    }
                } else {
                    value[networkMappings[192]] = game.player.vWvvm / 333;
                    game.player.vWvvm = Math[networkMappings[4]](0, game.player.vWvvm - WW);
                }
                var player = game.playersList[game.player.wmn];
                if (player.mvM === null) player.mvM = textFormatter.MwM(player.nickname, "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                value[networkMappings[114]](wWvVN, vn, WM, Vv * wWvVN.vww, Vv * wWvVN.mnn);
                if ((player.mvM[networkMappings[65]] !== 0) && (player.mvM[networkMappings[12]] !== 0)) value[networkMappings[114]](player.mvM, vn + (20 * Vv), WM + (6 * Vv), player.mvM.vww * Vv, player.mvM.mnn * Vv);
                gameManager.WvvNm.MW();
                gameManager.wwVnn.MW();
                if (game.player.vWvvm < 333) value[networkMappings[192]] = 1;
            }
        };;

        function wwmNw(vn, WM, MnnnW) {
            game.player.vvWVw -= WW;
            var vNN = Math[networkMappings[4]](0, Math[networkMappings[68]](game.player.vvWVw / 1000));
            if (vNN < 3000) {
                Wn.MV(wMnWv, (vn / Vv) + 51, (WM / Vv) + 145, 0, 0, 0, 1);
                if (wNMVn[vNN] === undefined) {
                    if ((MnnnW === 1) && (wNMVn[vNN + 1] !== undefined)) wNMVn[vNN + 1] = undefined;
                    var vwvnV = Math[networkMappings[68]](vNN / 60);
                    var MVNWV = vNN % 60;
                    wNMVn[vNN] = {
                        n: textFormatter.MwM((((((vwvnV < 10) ? "0" : "") + vwvnV) + ":") + ((MVNWV < 10) ? "0" : "")) + MVNWV, "'Viga', sans-serif", "#FF0000", 38, 100, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12)
                    };
                    wNMVn[vNN].n.v = 1;
                }
                Wn.MV(wNMVn[vNN], (vn / Vv) + 60, (WM / Vv) + 145, 0, 0, 0, 1);
            }
        };;

        function VmWwV(vn, WM) {
            Wn.MV(NvwVn, ((vn / Vv) + NMMvm) - 63, 25 + (WM / Vv), 0, 0, 0, 1);
            if (Wnw[game.Wnw] === undefined) {
                Wnw[game.Wnw] = {
                    n: textFormatter.MwM("#" + game.Wnw, "'Viga', sans-serif", "#FFFFFF", 60, 140)
                };
                Wnw[game.Wnw].n.v = 1;
            }
            Wn.MV(Wnw[game.Wnw], ((vn / Vv) + NMMvm) - 50, 25 + (WM / Vv), 0, 0, 0, 1);
        };;

        function nnNvN(vn, WM) {
            WVVww(vn + (250 * Vv), WM);
            if (NMN.v !== 1) {
                NMN = Wn.Nvw(MmMNN, NMN);
                return;
            }
            var VvNWW = MwMNV * NnN;
            var mmmvm = MwMNV * wNM;
            var MWM = Math[networkMappings[250]](Math[networkMappings[4]](0, VvNWW - wmm), mMnmW);
            var vWN = Math[networkMappings[250]](Math[networkMappings[4]](0, mmmvm - wmm), mMnmW);
            var vw = wmm * Vv;
            value[networkMappings[114]](NMN, MWM, vWN, MmMVN, MmMVN, vn, WM, vw, vw);
            if (game.Wvv === game.mvVVw) {
                if (game.player.health !== 0) VmWwV(-255, WM);
                else wwmNw(vn + 50, WM, 1);
            }
            if (game.Wvv === game.vVwwV) {
                var vVmmW = game.player.NVwNm[Math[networkMappings[68]](wNM / nMNmn)][Math[networkMappings[68]](NnN / nMNmn)];
                if (((vVmmW !== 0) && (vVmmW < game.player.vnWWv)) && (game.player.vnWWv !== 8)) {
                    MWmvv = Math[networkMappings[250]](1000, MWmvv + WW);
                    value[networkMappings[192]] = wvm.Mnm.WWM(MWmvv / 500);
                    Wn.MV(vvvWV, mWW, 58, 0, 0, 0, 1);
                    value[networkMappings[192]] = 1;
                } else if (MWmvv > 0) {
                    MWmvv = Math[networkMappings[4]](0, MWmvv - WW);
                    value[networkMappings[192]] = wvm.Mnm.WWM(MWmvv / 500);
                    Wn.MV(vvvWV, mWW, 58, 0, 0, 0, 1);
                    value[networkMappings[192]] = 1;
                }
                value[networkMappings[114]](wWvmW.n, MWM / 2, vWN / 2, wmm, wmm, vn, WM, vw, vw);
                value[networkMappings[192]] = (vmNNV > 600) ? wvm.Mnm.vwW((1200 - vmNNV) / 600) : wvm.Mnm.vwW(vmNNV / 600);
                vmNNV = (vmNNV + WW) % 1200;
                value[networkMappings[114]](wmnwW.n, MWM / 2, vWN / 2, wmm, wmm, vn, WM, vw, vw);
                value[networkMappings[192]] = 1;
                VmWwV(0, WM);
                wwmNw(vn, WM, 0);
            } else if (game.player.health === 0) {
                if (game.VvW.WwV.VVv === 1) {
                    WMmwv = Math[networkMappings[250]](1000, WMmwv + WW);
                    value[networkMappings[192]] = wvm.Mnm.WWM(WMmwv / 500);
                    Wn.MV(wMwVN, mWW, 58, 0, 0, 0, 1);
                    value[networkMappings[192]] = 1;
                } else if (WMmwv > 0) {
                    WMmwv = Math[networkMappings[4]](0, WMmwv - WW);
                    value[networkMappings[192]] = wvm.Mnm.WWM(WMmwv / 500);
                    Wn.MV(wMwVN, mWW, 58, 0, 0, 0, 1);
                    value[networkMappings[192]] = 1;
                }
            }
            if (MWM >= mMnmW) VvNWW = Math[networkMappings[250]](((VvNWW - wnWMV) / 2) + wWVMm, wmm - 8);
            else if (VvNWW < wmm) VvNWW = Math[networkMappings[4]](15, VvNWW / 2);
            else VvNWW = wWVMm;
            if (vWN >= mMnmW) mmmvm = Math[networkMappings[250]](((mmmvm - wnWMV) / 2) + wWVMm, wmm - 8);
            else if (mmmvm < wmm) mmmvm = Math[networkMappings[4]](15, mmmvm / 2);
            else mmmvm = wWVMm;
            var nNw = vn / Vv;
            var wnM = WM / Vv;
            if ((game.player.healthStatus !== -1) || ((game.player.health !== 0) && (game.Wnw < 6))) {
                var playersList = mNv.VNV[vMM];
                for (var vM = 0; vM < game.player.Wwwnv; vM++) {
                    var Wvwmm = game.player.wVVwv[vM];
                    if (Wvwmm.MMVmM < 0) continue;
                    var player = game.playersList[Wvwmm[networkMappings[109]]];
                    var MN;
                    if (MNV === (player.MNV + 1)) {
                        var vWm = playersList[player.nNMMN];
                        if (MNM.VnN(player[networkMappings[158]], player[networkMappings[41]], vWm[networkMappings[77]], vWm[networkMappings[120]]) < 1000) {
                            player[networkMappings[158]] = vWm[networkMappings[77]];
                            player[networkMappings[41]] = vWm[networkMappings[120]];
                        }
                        player[networkMappings[77]] = vWm[networkMappings[77]];
                        player[networkMappings[120]] = vWm[networkMappings[120]];
                        MN = vWm[networkMappings[142]];
                    } else var MN = player[networkMappings[77]] % Nnmvw;
                    var VVN = nNw + Math[networkMappings[4]](15, Math[networkMappings[250]](wmm - 15, (VvNWW - 3) + ((player[networkMappings[158]] - NnN) * MwMNV)));
                    var VwW = wnM + Math[networkMappings[4]](15, Math[networkMappings[250]](wmm - 15, (mmmvm - 3) + ((player[networkMappings[41]] - wNM) * MwMNV)));
                    Wn.MV(vMmWW, VVN, VwW, MN, 0, 0, 1);
                }
            }
            if (game.player.nMWvn > 0) {
                var player = game.playersList[game.player.MnNwW];
                if (MNV === (player.MNV + 1)) {
                    var playersList = mNv.VNV[vMM];
                    var vWm = playersList[player.nNMMN];
                    if (MNM.VnN(player[networkMappings[158]], player[networkMappings[41]], vWm[networkMappings[77]], vWm[networkMappings[120]]) < 1000) {
                        player[networkMappings[158]] = vWm[networkMappings[77]];
                        player[networkMappings[41]] = vWm[networkMappings[120]];
                    }
                    player[networkMappings[77]] = vWm[networkMappings[77]];
                    player[networkMappings[120]] = vWm[networkMappings[120]];
                }
                Wn.MV(nmVVN[player.WVNvV], nNw + Math[networkMappings[4]](15, Math[networkMappings[250]](wmm - 15, (VvNWW - 3) + ((player[networkMappings[158]] - NnN) * MwMNV))), wnM + Math[networkMappings[4]](15, Math[networkMappings[250]](wmm - 15, (mmmvm - 3) + ((player[networkMappings[41]] - wNM) * MwMNV))), 0, 0, 0, 1.25);
            }
            var VVN = nNw + (VvNWW - 3);
            var VwW = wnM + (mmmvm - 3);
            Wn.MV(wnWwW, VVN, VwW, WNw[networkMappings[142]], 0, 0, 1);
            if ((game.player.health === 0) && ((game.player.NVV > 0) || (mww.mWw > 0))) {
                var Vm = (mww.Vm + WW) % 1000;
                mww.Vm = Vm;
                if (mww.Vm < 500) vn += 260 + (15 * wvm.Mnm.vwW(Vm / 500));
                else vn += 260 + (15 * wvm.Mnm.vwW((1000 - Vm) / 500));
                value[networkMappings[192]] = wvm.Mnm.WWM(mww.mWw);
                Wn.MV(mww, vn, WM + 31, 0, 0, 0, 1);
                value[networkMappings[192]] = 1;
                if ((game.player.NVV <= 0) || (gameManager.NWW() === 1)) mww.mWw = Math[networkMappings[4]](0, mww.mWw - (WW / 500));
                else if (mww.mWw < 1) mww.mWw = Math[networkMappings[250]](1, mww.mWw + (WW / 500));
            }
        };;
        var gameSettings = "";
        var vnmNw = null;

        function mMvVW(secondaryElement, NnMwN, wVnNm, NWVvV, WvvvW, mmnNn, vmMNW, WwWVM) {
            var vn = 0;
            var WM = 0;
            if (game.player.healthStatus === -1) {
                var wnwwV = 1;
                if (gameManager.gameSettings[networkMappings[231]] === 0) wnwwV = 0;
                else {
                    for (var vM = 0; vM < game.gameData[networkMappings[231]]; vM++) {
                        if (game.gameData[vM][networkMappings[227]] === gameManager.gameSettings) {
                            wnwwV = 0;
                            break;
                        }
                    }
                }
                game.player.wnwwV = wnwwV;
                vn = NnMwN.nM[networkMappings[77]];
                WM = NnMwN.nM[networkMappings[120]];
                NnMwN.MW();
                secondaryElement.nM[networkMappings[77]] = vn + (513 * Vv);
                secondaryElement.nM[networkMappings[120]] = WM + (2 * Vv);
                if (gameSettings !== gameManager.gameSettings) {
                    gameSettings = gameManager.gameSettings;
                    vnmNw = textFormatter.MwM(gameSettings, "'Viga', sans-serif", "#FFFFFF", 30, 400);
                }
                if ((vnmNw !== null) && (gameSettings[networkMappings[231]] !== 0)) {
                    Wn[networkMappings[3]](value, (vn / Vv) + 39, (WM / Vv) + 14, 122, 16.5, "#000000");
                    value[networkMappings[114]](vnmNw, vn + (35 * Vv), WM + (14.5 * Vv), vnmNw.vww * Vv, vnmNw.mnn * Vv);
                }
                WvvvW.nM[networkMappings[77]] = vn + (172 * Vv);
                WvvvW.nM[networkMappings[120]] = WM + (6 * Vv);
                if ((wnwwV === 0) || ((Date[networkMappings[237]]() - game.player.NmVvv) < 30500)) {
                    WvvvW.NnW(textFormatter.mwv);
                    value[networkMappings[192]] = 0.5;
                    WvvvW.MW();
                    value[networkMappings[192]] = 1;
                } else WvvvW.MW();
                var wm = 0;
                for (var vM = 0; vM < 18; vM++) {
                    var healthStatus = game.gameData[vM];
                    if (healthStatus.nNwMv === 0) continue;
                    if (healthStatus[networkMappings[236]] === null) healthStatus[networkMappings[236]] = textFormatter.MwM(healthStatus[networkMappings[227]], "'Viga', sans-serif", "#FFFFFF", 30, 400);
                    value[networkMappings[114]](healthStatus[networkMappings[236]], vn + ((20 + ((wm % 3) * 163)) * Vv), WM + ((58.5 + (Math[networkMappings[68]](wm / 3) * 36)) * Vv), healthStatus[networkMappings[236]].vww * Vv, healthStatus[networkMappings[236]].mnn * Vv);
                    var NW = gameManager[networkMappings[164]][wm];
                    NW.nM[networkMappings[77]] = vn + ((84 + ((wm % 3) * 163)) * Vv);
                    NW.nM[networkMappings[120]] = WM + ((48 + (Math[networkMappings[68]](wm / 3) * 36)) * Vv);
                    if ((Date[networkMappings[237]]() - game.player.nNmnm) < 10500) {
                        NW.NnW(textFormatter.mwv);
                        value[networkMappings[192]] = 0.5;
                        NW.MW();
                        value[networkMappings[192]] = 1;
                    } else NW.MW();
                    wm++;
                }
            } else {
                vn = wVnNm.nM[networkMappings[77]];
                WM = wVnNm.nM[networkMappings[120]];
                var healthStatus = game.gameData[game.player.healthStatus];
                if (healthStatus[networkMappings[236]] === null) healthStatus[networkMappings[236]] = textFormatter.MwM(healthStatus[networkMappings[227]], "'Viga', sans-serif", "#FFFFFF", 30, 400);
                value[networkMappings[114]](healthStatus[networkMappings[236]], vn + (144 * Vv), WM + (13 * Vv), healthStatus[networkMappings[236]].vww * Vv, healthStatus[networkMappings[236]].mnn * Vv);
                wVnNm.MW();
                secondaryElement.nM[networkMappings[77]] = vn + (512 * Vv);
                secondaryElement.nM[networkMappings[120]] = WM + (34.5 * Vv);
                if (game.player.WvVnv === 1) {
                    if (game.player.wmMVV === 0) {
                        mmnNn.nM[networkMappings[77]] = vn + (259 * Vv);
                        mmnNn.nM[networkMappings[120]] = WM + (5 * Vv);
                        mmnNn.MW();
                    } else {
                        vmMNW.nM[networkMappings[77]] = vn + (259 * Vv);
                        vmMNW.nM[networkMappings[120]] = WM + (5 * Vv);
                        vmMNW.MW();
                    }
                    WwWVM.nM[networkMappings[77]] = vn + (311.5 * Vv);
                    WwWVM.nM[networkMappings[120]] = WM + (5 * Vv);
                    WwWVM.MW();
                    var wm = 0;
                    for (var vM = 0; vM < game.playersList[networkMappings[231]]; vM++) {
                        var player = game.playersList[vM];
                        if ((healthStatus.wWW !== player.NmM) || (player.healthStatus !== healthStatus[networkMappings[109]])) continue;
                        if (player.mvM === null) player.mvM = textFormatter.MwM(player.nickname, "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                        if ((player.mvM[networkMappings[65]] !== 0) && (player.mvM[networkMappings[12]] !== 0)) value[networkMappings[114]](player.mvM, vn + ((26 + ((wm % 3) * 166.5)) * Vv), WM + ((53 + (Math[networkMappings[68]](wm / 3) * 29.5)) * Vv), (player.mvM.vww * Vv) / 2.2, (player.mvM.mnn * Vv) / 2.2);
                        var NW = gameManager.nWMVn[wm];
                        NW.nM[networkMappings[77]] = vn + ((132 + ((wm % 3) * 166.5)) * Vv);
                        NW.nM[networkMappings[120]] = WM + ((48.5 + (Math[networkMappings[68]](wm / 3) * 29.5)) * Vv);
                        if (((Date[networkMappings[237]]() - game.player.nNmnm) < 10500) || (player[networkMappings[109]] === game.player[networkMappings[109]])) {
                            NW.NnW(textFormatter.mwv);
                            value[networkMappings[192]] = 0.5;
                            NW.MW();
                            value[networkMappings[192]] = 1;
                        } else NW.MW();
                        wm++;
                    }
                } else {
                    NWVvV.nM[networkMappings[77]] = vn + (311.5 * Vv);
                    NWVvV.nM[networkMappings[120]] = WM + (5 * Vv);
                    NWVvV.MW();
                    var wm = 0;
                    for (var vM = 0; vM < game.playersList[networkMappings[231]]; vM++) {
                        var player = game.playersList[vM];
                        if ((healthStatus.wWW !== player.NmM) || (player.healthStatus !== healthStatus[networkMappings[109]])) continue;
                        if (player.mvM === null) player.mvM = textFormatter.MwM(player.nickname, "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                        if ((player.mvM[networkMappings[65]] !== 0) && (player.mvM[networkMappings[12]] !== 0)) value[networkMappings[114]](player.mvM, vn + ((26 + ((wm % 3) * 166.5)) * Vv), WM + ((53 + (Math[networkMappings[68]](wm / 3) * 29.5)) * Vv), (player.mvM.vww * Vv) / 2.2, (player.mvM.mnn * Vv) / 2.2);
                        wm++;
                    }
                }
            }
            secondaryElement.MW();
        };;

        function mWVvW(mNWnW, secondaryElement, vnn, delta) {
            mNWnW.MW();
            var vn = mNWnW.nM[networkMappings[77]];
            var WM = mNWnW.nM[networkMappings[120]];
            secondaryElement.nM[networkMappings[77]] = vn + (161 * Vv);
            secondaryElement.nM[networkMappings[120]] = WM + (0 * Vv);
            secondaryElement.MW();
            var WVm = game.player.WVm;
            var VVN;
            var VwW = WM + (14 * Vv);
            var NW = gameManager.WVm;
            for (var vM = 0; vM < 4; vM++) {
                if ((vM % 2) === 0) {
                    VVN = vn + (12.5 * Vv);
                    if (vM === 2) VwW += 71 * Vv;
                } else VVN += 72 * Vv;
                if (WVm[vM][0] === 0) continue;
                NnnvV(NW[vM], WVm[vM], VVN, VwW, vnn, delta);
            }
        };;

        function nmvNv() {
            var MvvNM = VwN;
            if (MvvNM > 0) Wn[networkMappings[3]](value, 0, 0, MvvNM, wVVMm, vVwmN);
            else MvvNM = 0;
            var nnNnw = Mnw;
            if (nnNnw > 0) Wn[networkMappings[3]](value, MvvNM, 0, NMMvm - MvvNM, nnNnw, vVwmN);
            else nnNnw = 0;
            var mVNmW = (-VwN + NMMvm) - WWmnv;
            if (mVNmW > 0) Wn[networkMappings[3]](value, NMMvm - mVNmW, nnNnw, mVNmW, wVVMm - nnNnw, vVwmN);
            else mVNmW = 0;
            var NmNWm = (-Mnw + wVVMm) - VvMNV;
            if (NmNWm > 0) Wn[networkMappings[3]](value, MvvNM, wVVMm - NmNWm, (NMMvm - MvvNM) - mVNmW, NmNWm, vVwmN);
        };;

        function drawText(canvas, index) {
            var element = Mww[index];
            var text = element[networkMappings[79]];
            var formattedText = textFormatter.MwM(text[networkMappings[227]], "'Viga', sans-serif", "#D3BB43", 30, 400);
            canvas[networkMappings[114]](formattedText, 20, 20);
            formattedText = textFormatter.MwM(text[networkMappings[130]], "'Viga', sans-serif", "#FFFFFF", 16, 400);
            canvas[networkMappings[114]](formattedText, 20, 68);
            if (element.state === 21) {
                if (element.maxDamage > 0) {
                    formattedText = textFormatter.MwM((("Damage: " + element.currentDamage) + "/") + element.maxDamage, "'Viga', sans-serif", "#D3BB43", 24, 400);
                    canvas[networkMappings[114]](formattedText, 20, 101);
                } else {
                    formattedText = textFormatter.MwM("Life: " + element.life, "'Viga', sans-serif", "#D3BB43", 24, 400);
                    canvas[networkMappings[114]](formattedText, 20, 101);
                }
            } else if ((element.state !== undefined) && (element.state !== 0)) {
                var status = "";
                var statusEffect = mnW[vMM].Mmwnn[element.state];
                if (statusEffect.currentDamage !== undefined) {
                    status = "Damage: " + ((statusEffect.mwMVv === undefined) ? statusEffect.currentDamage : statusEffect.mwMVv);
                } else {
                    if (statusEffect.NWV !== 0) status += ("Food: " + statusEffect.NWV) + " ";
                    if (statusEffect.wWN < 0) status += ("Damage: " + statusEffect.wWN) + " ";
                    else if (statusEffect.wWN > 0) status += ("Heal: " + statusEffect.wWN) + " ";
                    if (statusEffect.VWw !== 0) status += "Energy: " + statusEffect.VWw;
                }
                formattedText = textFormatter.MwM(status, "'Viga', sans-serif", "#D3BB43", 24, 400);
                canvas[networkMappings[114]](formattedText, 20, 101);
            } else if (element.attributes !== undefined) {} else {
                formattedText = textFormatter.MwM("Cannot be equipped", "'Viga', sans-serif", "#FFFFFF", 17, 400);
                canvas[networkMappings[114]](formattedText, 20, 108);
            }
        };;

        function mNvMM(initialize, secondaryElement, primaryCollection, secondaryCollection, alternateElement, conditionalElement, mainCollection, mainElement, vnn, delta, time, WMWVm, wMVvv, VWnWn) {
            initialize.MW();
            var vn = initialize.nM[networkMappings[77]];
            var WM = initialize.nM[networkMappings[120]];
            var nNw = vn / Vv;
            var wnM = WM / Vv;
            secondaryElement.nM[networkMappings[77]] = vn + (594 * Vv);
            secondaryElement.nM[networkMappings[120]] = WM + (0 * Vv);
            secondaryElement.MW();
            var Vnm = game.player.Vnm;
            var NwNvn = game.player.NwNvn;
            var WnN = game.player.MwV;
            var wvn = game.player.NvN;
            for (var vM = 0; vM < primaryCollection[networkMappings[231]]; vM++) {
                var NW = primaryCollection[vM];
                if (vM === WnN) NW.NnW(textFormatter.mmM);
                NW.nM[networkMappings[77]] = ((10 * Vv) + vn) + ((vM * 47) * Vv);
                NW.nM[networkMappings[120]] = WM - (40 * Vv);
                NW.MW();
            }
            var wm = 0;
            for (vM = 0; vM < mainCollection[networkMappings[231]]; vM++) {
                if ((vM === wvn) && (game.player.wvw === 1)) {} else if ((vM !== game.player.vNnWV) && (vM !== 0)) continue;
                var NW = mainCollection[vM];
                if (vM === wvn) NW.NnW(textFormatter.mmM);
                NW.nM[networkMappings[77]] = vn - (40 * Vv);
                NW.nM[networkMappings[120]] = ((10 * Vv) + WM) + ((wm * 43) * Vv);
                NW.MW();
                wm++;
            }
            mainElement.nM[networkMappings[77]] = vn + (364 * Vv);
            mainElement.nM[networkMappings[120]] = WM + (27 * Vv);
            mainElement.MW();
            var WnV = gameManager.WnV;
            var tokenIndex = game.player.VNvVW;
            var vw = 49 * Vv;
            var Vw = 49 * Vv;
            var mwN = 58 * Vv;
            var MmMNV = 30 * Vv;
            var nmnMN = 34 * Vv;
            var wM = 1;
            if (VwmnW < 500) {
                wM += 0.08 * wvm.Mnm.WWM(VwmnW / 500);
                VwmnW += WW;
            } else {
                wM += 0.08 * wvm.Mnm.vNM(1 - ((VwmnW - 500) / 500));
                VwmnW += WW;
                if (VwmnW > 1000) VwmnW = 0;
            }
            wM = Math[networkMappings[4]](1, Math[networkMappings[250]](1.08, wM));
            for (vM = 0; vM < tokenIndex; vM++) {
                var NW = WnV[vM];
                NW.nM[networkMappings[77]] = (MmMNV + vn) + ((vM % 5) * mwN);
                NW.nM[networkMappings[120]] = (nmnMN + WM) + (Math[networkMappings[68]](vM / 5) * mwN);
                var wmMMw = Vnm[vM];
                if (wmMMw === 0) {
                    value[networkMappings[192]] = 0.45;
                    NW.MW();
                    value[networkMappings[192]] = 1;
                } else if (wmMMw === 2) {
                    NW.NnW(textFormatter.nNNMM);
                    NW.MW();
                } else {
                    value[networkMappings[192]] = 0.6;
                    Wn.MV(MwvMM, (NW.nM[networkMappings[77]] / Vv) + 24.5, (NW.nM[networkMappings[120]] / Vv) + 24.5, 0, 0, 0, wM);
                    value[networkMappings[192]] = 1;
                    NW.MW();
                }
            }
            var VNW = 0;
            if (game.player.MwV === -1) {
                if (game.player.wvw === 1) {
                    secondaryCollection.nM[networkMappings[77]] = vn + (454 * Vv);
                    secondaryCollection.nM[networkMappings[120]] = WM + (153 * Vv);
                    if (((game.player.Vnm[game.player.MWvwN] === 1) && (game.player.vN.tokenIndex < 4)) && (game.player.vN.wWV !== 0)) secondaryCollection.MW();
                    else {
                        value[networkMappings[192]] = 0.5;
                        secondaryCollection.NnW(textFormatter.mwv);
                        secondaryCollection.MW();
                        value[networkMappings[192]] = 1;
                    }
                } else if (game.player.nNmMN === 0) {
                    secondaryCollection.nM[networkMappings[77]] = vn + (454 * Vv);
                    secondaryCollection.nM[networkMappings[120]] = WM + (153 * Vv);
                    if (game.player.Vnm[game.player.MWvwN] === 1) secondaryCollection.MW();
                    else {
                        value[networkMappings[192]] = 0.5;
                        secondaryCollection.NnW(textFormatter.mwv);
                        secondaryCollection.MW();
                        value[networkMappings[192]] = 1;
                    }
                } else {
                    alternateElement.nM[networkMappings[77]] = vn + (454 * Vv);
                    alternateElement.nM[networkMappings[120]] = WM + (153 * Vv);
                    alternateElement.MW();
                }
                if (Mvwnm.v !== 1) {
                    Mvwnm = Wn.Nvw(WMvMW, Mvwnm);
                    return;
                }
                if (game.player.wvw === 1) {
                    if ((game.player.vN[networkMappings[32]] !== 0) && (game.player.vN.wWV !== 0)) {
                        VNW = game.player.vN[networkMappings[32]] - Date[networkMappings[237]]();
                        if (VNW < 0) game.player.vN[networkMappings[32]] = 0;
                        VNW = wvm.Mnm.vwW(1 - (VNW / game.player.vN.VvVmv));
                    }
                } else if (game.player.nNmMN !== 0) {
                    VNW = game.player.nNmMN - Date[networkMappings[237]]();
                    if (VNW < 0) game.player.nNmMN = 0;
                    VNW = wvm.Mnm.vwW(1 - (VNW / game.player.wMvWW));
                }
                VNW = Math[networkMappings[250]](1, Math[networkMappings[4]](0, VNW));
                vw = (Vv * Mvwnm[networkMappings[65]]) / 2;
                Vw = (Vv * Mvwnm[networkMappings[12]]) / 2;
                var wnMVv = vn + (356 * Vv);
                var mWWmw = WM + (206 * Vv);
                value[networkMappings[84]] = "#A29742";
                mwN = 3 * Vv;
                MmMNV = 2 * mwN;
                value[networkMappings[3]](Math[networkMappings[68]](wnMVv + mwN), Math[networkMappings[68]](mWWmw + mwN), Math[networkMappings[68]]((vw - MmMNV) * VNW), Math[networkMappings[68]](Vw - MmMNV));
                value[networkMappings[114]](Mvwnm, wnMVv, mWWmw, vw, Vw);
            } else {
                var mvNnn = game.player.Vnm[game.player.MWvwN];
                conditionalElement.nM[networkMappings[77]] = vn + (454 * Vv);
                conditionalElement.nM[networkMappings[120]] = WM + (153 * Vv);
                if (mvNnn === 1) conditionalElement.MW();
                else if (mvNnn === 0) {
                    value[networkMappings[192]] = 0.5;
                    conditionalElement.NnW(textFormatter.mwv);
                    conditionalElement.MW();
                    value[networkMappings[192]] = 1;
                    if (game.player.wNnWw !== wVMnn) {
                        NnMnv[networkMappings[113]](0, 0, 420, 148);
                        wVMnn = game.player.wNnWw;
                        var text = Mww[wVMnn][networkMappings[79]];
                        var vvwMm = 20;
                        if (text[networkMappings[95]] > game.player[networkMappings[95]]) {
                            var wmv = textFormatter.MwM(("Require level " + text[networkMappings[95]]) + " or higher", "'Viga', sans-serif", "#D8BA3D", 30, 600);
                            NnMnv[networkMappings[114]](wmv, 20, vvwMm);
                            vvwMm += 50;
                        }
                        if ((text.MmvWV !== -1) && (game.player.vNMvM[text.MmvWV] === undefined)) {
                            var wmv = textFormatter.MwM(("Unlock " + Mww[text.MmvWV][networkMappings[79]][networkMappings[227]]) + " before", "'Viga', sans-serif", "#D8BA3D", 30, 600);
                            NnMnv[networkMappings[114]](wmv, 20, vvwMm);
                            vvwMm += 50;
                        }
                        if (game.player.NVV < text.MWNMV) {
                            var wmv = textFormatter.MwM((("Cost " + text.MWNMV) + " skill point") + ((text.MWNMV !== 1) ? "s" : ""), "'Viga', sans-serif", "#D8BA3D", 30, 600);
                            NnMnv[networkMappings[114]](wmv, 20, vvwMm);
                        }
                    }
                    value[networkMappings[114]](mvMNn, vn + (356 * Vv), WM + (211 * Vv), (Vv * mvMNn[networkMappings[65]]) / 2, (Vv * mvMNn[networkMappings[12]]) / 2);
                } else {
                    conditionalElement.NnW(textFormatter.mmM);
                    conditionalElement.MW();
                }
            }
            if (game.player.wvw === 1) {
                var nW = game.player.vN.wWV;
                if (nW >= 0) {
                    var NW;
                    if (((wvn === mw.mnm) || (wvn === mw.nVm)) || (wvn === mw.MWw)) NW = WMWVm;
                    else if ((wvn === mw.nvw) || (wvn === mw.nwW)) NW = wMVvv;
                    else NW = time;
                    NW.nM[networkMappings[77]] = vn + (532 * Vv);
                    NW.nM[networkMappings[120]] = WM + (153 * Vv);
                    if (game.player.vN.wWV !== 255) NW.MW();
                    else {
                        value[networkMappings[192]] = 0.5;
                        NW.NnW(textFormatter.mwv);
                        NW.MW();
                        value[networkMappings[192]] = 1;
                    }
                    if (delta[nW] === undefined) {
                        delta[nW] = {
                            n: textFormatter.MwM("x" + nW, "'Black Han Sans', sans-serif", "#FFFF00", 30, 250, undefined, 15, 12, undefined, undefined, undefined, undefined, "#000000", 12)
                        };
                        delta[nW].n.v = 1;
                    }
                    Wn.MV(delta[nW], (NW.nM[networkMappings[77]] / Vv) + 42, (NW.nM[networkMappings[120]] / Vv) + 42, -0.5, 0, 0, 0.9);
                }
                var WWN = gameManager.WWN;
                var Vnwnn = game.player.vN.nM;
                tokenIndex = game.player.vN.tokenIndex;
                vw = 40 * Vv;
                Vw = 40 * Vv;
                mwN = 62 * Vv;
                MmMNV = 356 * Vv;
                nmnMN = 237 * Vv;
                for (var vM = 0; vM < tokenIndex; vM++) {
                    var NW = WWN[vM];
                    if (vM === Vnwnn) {
                        if (VNW !== 0) {
                            value[networkMappings[192]] = 0.6;
                            Wn.MV(MwvMM, (NW.nM[networkMappings[77]] / Vv) + 20, (NW.nM[networkMappings[120]] / Vv) + 20, 0, 0, 0, 0.85 * Math[networkMappings[4]](0.01, Math[networkMappings[250]](1, VNW)));
                            value[networkMappings[192]] = 1;
                        }
                    } else if (vM < Vnwnn) {
                        value[networkMappings[192]] = 0.6;
                        Wn.MV(MwvMM, (NW.nM[networkMappings[77]] / Vv) + 20, (NW.nM[networkMappings[120]] / Vv) + 20, 0, 0, 0, wM * 0.85);
                        value[networkMappings[192]] = 1;
                    }
                    NW.nM[networkMappings[77]] = (MmMNV + vn) + (vM * mwN);
                    NW.nM[networkMappings[120]] = nmnMN + WM;
                    NW.MW();
                }
            }
            var vvWvn = gameManager.vvWvn;
            tokenIndex = game.player.WWvvw;
            mwN = 45 * Vv;
            MmMNV = 356 * Vv;
            nmnMN = 151 * Vv;
            for (var vM = 0; vM < tokenIndex; vM++) {
                var NW = vvWvn[vM];
                NW.nM[networkMappings[77]] = (MmMNV + vn) + (vM * mwN);
                NW.nM[networkMappings[120]] = nmnMN + WM;
                NW.MW();
            }
            if (game.player.NVV !== mVMVn) {
                mNnmw[networkMappings[113]](0, 0, 280, 50);
                mVMVn = game.player.NVV;
                var wmv = textFormatter.MwM("SKILL POINT: " + mVMVn, "'Viga', sans-serif", "#FFFFFF", 32, 400);
                mNnmw[networkMappings[114]](wmv, 24, 12);
            }
            value[networkMappings[114]](NVV, vn + (455 * Vv), WM + (378 * Vv), (Vv * NVV[networkMappings[65]]) / 2, (Vv * NVV[networkMappings[12]]) / 2);
            if (game.player.wNnWw !== mNMwV) {
                mnnvw[networkMappings[113]](0, 0, 280, 148);
                mNMwV = game.player.wNnWw;
                drawText(mnnvw, mNMwV);
            }
            value[networkMappings[114]](MmNvM, vn + (439 * Vv), WM + (24 * Vv), (Vv * MmNvM[networkMappings[65]]) / 2, (Vv * MmNvM[networkMappings[12]]) / 2);
            if ((game.player.NVV > 0) || (WwN.mWw > 0)) {
                var Vm = (WwN.Vm + WW) % 1000;
                WwN.Vm = Vm;
                var VwW = WM / Vv;
                if (WwN.Vm < 500) VwW += -62 - (15 * wvm.Mnm.vwW(Vm / 500));
                else VwW += -62 - (15 * wvm.Mnm.vwW((1000 - Vm) / 500));
                value[networkMappings[192]] = wvm.Mnm.WWM(WwN.mWw);
                Wn.MV(WwN, 266 + (initialize.nM[networkMappings[77]] / Vv), VwW, 0, 0, 0, 1);
                value[networkMappings[192]] = 1;
                if (game.player.NVV <= 0) WwN.mWw = Math[networkMappings[4]](0, WwN.mWw - (WW / 500));
                else if (WwN.mWw < 1) WwN.mWw = Math[networkMappings[250]](1, WwN.mWw + (WW / 500));
            }
            var NMW = gameManager.NMW;
            tokenIndex = game.player.VMmWm;
            vw = 40 * Vv;
            Vw = 40 * Vv;
            mwN = 45 * Vv;
            MmMNV = 356 * Vv;
            nmnMN = 107 * Vv;
            for (var vM = 0; vM < tokenIndex; vM++) {
                var NW = NMW[vM];
                NW.nM[networkMappings[77]] = (MmMNV + vn) + (vM * mwN);
                NW.nM[networkMappings[120]] = nmnMN + WM;
                var nW = Math[networkMappings[99]](NwNvn[vM]);
                if (vnn[nW] === undefined) {
                    vnn[nW] = {
                        n: textFormatter.MwM("x" + nW, "'Black Han Sans', sans-serif", "#ffffff", 30, 250, undefined, 15, 12, undefined, undefined, undefined, undefined, "#000000", 12)
                    };
                    vnn[nW].n.v = 1;
                }
                if (NwNvn[vM] < 0) {
                    value[networkMappings[192]] = 0.45;
                    NW.MW();
                    Wn.MV(vnn[nW], (NW.nM[networkMappings[77]] / Vv) + 30, (NW.nM[networkMappings[120]] / Vv) + 32, -0.5, 0, 0, 0.9);
                    value[networkMappings[192]] = 1;
                } else {
                    NW.MW();
                    Wn.MV(vnn[nW], (NW.nM[networkMappings[77]] / Vv) + 30, (NW.nM[networkMappings[120]] / Vv) + 32, -0.5, 0, 0, 0.9);
                }
                if ((VWnWn === vM) && (game.player.vWWmm[vM] > 0)) VnvwV(game.player.vWWmm[vM], NW.nM[networkMappings[77]], NW.nM[networkMappings[120]] + (45 * Vv));
            }
        };;

        function NNVwn(wnVnN, VvNNn, Mwwwm, WMmww, wWWVm, MVWNw, mwmvM, WWMnW, vmmMm, Vmmwm, secondaryElement, mVVVm, wwMNN, wWNvw) {
            wnVnN.MW();
            var vn = wnVnN.nM[networkMappings[77]];
            var WM = wnVnN.nM[networkMappings[120]];
            secondaryElement.nM[networkMappings[77]] = vn + (265 * Vv);
            secondaryElement.nM[networkMappings[120]] = WM + (0 * Vv);
            secondaryElement.MW();
            wWWVm.nM[networkMappings[77]] = vn + (87 * Vv);
            wWWVm.nM[networkMappings[120]] = WM + (15 * Vv);
            if (VVW.mvMvM() === 1) wWWVm.NnW(textFormatter.mmM);
            wWWVm.MW();
            MVWNw.nM[networkMappings[77]] = vn + (173 * Vv);
            MVWNw.nM[networkMappings[120]] = WM + (15 * Vv);
            if (VVW.MMwWw() === 1) MVWNw.NnW(textFormatter.mmM);
            MVWNw.MW();
            WMmww.nM[networkMappings[77]] = vn + (87 * Vv);
            WMmww.nM[networkMappings[120]] = WM + (62 * Vv);
            if (Wn[networkMappings[139]].VmNww === 3) WMmww.NnW(textFormatter.mmM);
            WMmww.MW();
            Mwwwm.nM[networkMappings[77]] = vn + (147 * Vv);
            Mwwwm.nM[networkMappings[120]] = WM + (62 * Vv);
            if (Wn[networkMappings[139]].VmNww === 2) Mwwwm.NnW(textFormatter.mmM);
            Mwwwm.MW();
            VvNNn.nM[networkMappings[77]] = vn + (207 * Vv);
            VvNNn.nM[networkMappings[120]] = WM + (62 * Vv);
            if (Wn[networkMappings[139]].VmNww === 1) VvNNn.NnW(textFormatter.mmM);
            VvNNn.MW();
            mwmvM.nM[networkMappings[77]] = vn + (87 * Vv);
            mwmvM.nM[networkMappings[120]] = WM + (117 * Vv);
            if (MM[networkMappings[139]].nvVNM === 1) mwmvM.NnW(textFormatter.mmM);
            mwmvM.MW();
            WWMnW.nM[networkMappings[77]] = vn + (147 * Vv);
            WWMnW.nM[networkMappings[120]] = WM + (117 * Vv);
            if (MM[networkMappings[139]].nvVNM === 0) WWMnW.NnW(textFormatter.mmM);
            WWMnW.MW();
            vmmMm.nM[networkMappings[77]] = vn + (87 * Vv);
            vmmMm.nM[networkMappings[120]] = WM + (167 * Vv);
            if (MM[networkMappings[139]].nvWnM === 1) vmmMm.NnW(textFormatter.mmM);
            vmmMm.MW();
            Vmmwm.nM[networkMappings[77]] = vn + (147 * Vv);
            Vmmwm.nM[networkMappings[120]] = WM + (167 * Vv);
            if (MM[networkMappings[139]].nvWnM === 0) Vmmwm.NnW(textFormatter.mmM);
            Vmmwm.MW();
            wWNvw.nM[networkMappings[77]] = vn + (87 * Vv);
            wWNvw.nM[networkMappings[120]] = WM + (217 * Vv);
            if (VMNnW === 0) wWNvw.NnW(textFormatter.mmM);
            wWNvw.MW();
            wwMNN.nM[networkMappings[77]] = vn + (147 * Vv);
            wwMNN.nM[networkMappings[120]] = WM + (217 * Vv);
            if (VMNnW === 1) wwMNN.NnW(textFormatter.mmM);
            wwMNN.MW();
            mVVVm.nM[networkMappings[77]] = vn + (207 * Vv);
            mVVVm.nM[networkMappings[120]] = WM + (217 * Vv);
            if (VMNnW === 2) mVVVm.NnW(textFormatter.mmM);
            mVVVm.MW();
        };;

        function wVvnN(VM) {
            var player = game.playersList[VM.nvW];
            if (player[networkMappings[81]][networkMappings[231]] > 0) {
                for (var vM = 0;
                    (vM < player[networkMappings[81]][networkMappings[231]]) && (vM < 2); vM++) {
                    if (!player[networkMappings[236]][vM]) {
                        player[networkMappings[236]][vM] = textFormatter.MwM(player[networkMappings[81]][vM], "'Viga', sans-serif", "#ffffff", 32, 1000, "#000000", 33, 19, undefined, undefined, 0.55, 5);
                        player.NNNNw[vM] = 0;
                        player.NNnNV[vM] = 0;
                    }
                    if (vM === 1) player.NNnNV[0] = wvm.Mnm.vwW(player.VWWMn) * 28;
                }
                wVWVw = WW / 1000;
                player.NNNNw[0] += wVWVw;
                if (player[networkMappings[81]][networkMappings[231]] > 1) {
                    player.VWWMn = Math[networkMappings[250]](player.VWWMn + wVWVw, 1);
                    if ((player.NNNNw[0] > 1) && (player.VWWMn > 0.5)) player.NNNNw[1] += wVWVw;
                }
                for (var vM = 0;
                    (vM < player[networkMappings[81]][networkMappings[231]]) && (vM < 2); vM++) {
                    var mWw = player.NNNNw[vM];
                    if (mWw > 0) {
                        if (mWw < 0.25) value[networkMappings[192]] = mWw * 4;
                        else if (mWw > 4.75) value[networkMappings[192]] = Math[networkMappings[4]]((5 - mWw) * 5, 0);
                        else value[networkMappings[192]] = 1;
                        var WM = 118;
                        var n = player[networkMappings[236]][vM];
                        value[networkMappings[114]](n, 0, 0, n[networkMappings[65]], n[networkMappings[12]], ((VwN + VM[networkMappings[77]]) - (n[networkMappings[65]] / 4)) * Vv, (((Mnw + VM[networkMappings[120]]) - WM) - player.NNnNV[vM]) * Vv, (n[networkMappings[65]] / 2) * Vv, (n[networkMappings[12]] / 2) * Vv);
                        value[networkMappings[192]] = 1;
                    }
                }
                if (player.NNNNw[0] > 5) {
                    player.NNNNw[networkMappings[89]]();
                    player[networkMappings[81]][networkMappings[89]]();
                    player.NNnNV[networkMappings[89]]();
                    player[networkMappings[236]][networkMappings[89]]();
                    player.VWWMn = 0;
                }
            }
        };;

        function NNvMV(VM) {
            var player = game.playersList[VM.nvW];
            if (((((VM.Nvm & 255) === 16) && (game.player.vvMWw !== 1)) && (VM.nvW !== game.player[networkMappings[109]])) && (((player.healthStatus === -1) || (game.gameData[player.healthStatus].wWW !== player.NmM)) || (game.player.healthStatus !== player.healthStatus))) return;
            if (player.mvM === null) player.mvM = textFormatter.MwM(player.nickname, "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
            var n = player.mvM;
            var WM = 90;
            if (player.healthStatus === -1) value[networkMappings[114]](n, ((VwN + VM[networkMappings[77]]) - (n.vww / 2)) * Vv, ((Mnw + VM[networkMappings[120]]) - WM) * Vv, n.vww * Vv, n.mnn * Vv);
            else if (player.healthStatus !== -1) {
                var healthStatus = game.gameData[player.healthStatus];
                if (healthStatus.wWW === player.NmM) {
                    if (healthStatus.wNNnV === null) healthStatus.wNNnV = textFormatter.MwM(("[" + healthStatus[networkMappings[227]]) + "]", "'Viga', sans-serif", "#FFFFFF", 38, 400, undefined, 16, 25, undefined, undefined, undefined, undefined, "#000000", 12);
                    var nvvNv = healthStatus.wNNnV;
                    value[networkMappings[114]](nvvNv, ((((VwN + VM[networkMappings[77]]) - (n.vww / 2)) - (nvvNv.vww / 2)) - 0.5) * Vv, ((Mnw + VM[networkMappings[120]]) - WM) * Vv, nvvNv.vww * Vv, nvvNv.mnn * Vv);
                    if ((n[networkMappings[65]] !== 0) && (n[networkMappings[12]] !== 0)) value[networkMappings[114]](n, (((VwN + VM[networkMappings[77]]) - (n.vww / 2)) + (nvvNv.vww / 2)) * Vv, ((Mnw + VM[networkMappings[120]]) - WM) * Vv, n.vww * Vv, n.mnn * Vv);
                } else player.healthStatus = -1;
            }
        };;

        function nwmNWnV(mmm, vM, wm, NmNmw, Mwmww, WNwmm, wnWnN) {
            var vN = mwmmW[mmm[networkMappings[217]]];
            var n = vN.n;
            if (n.v !== 1) {
                vN.n = Wn.Nvw(vN[networkMappings[10]], vN.n);
                return;
            }
            var nWnMM = WNwmm - mmm.vM;
            var VWMWw = wnWnN - mmm.wm;
            var nwVnm = (vM + vN.Vvm[networkMappings[231]]) - nWnMM;
            var MVNMm = (wm + vN.Vvm[0][networkMappings[231]]) - VWMWw;
            var vNWMW = 0;
            var vMmnN = 0;
            for (var vWn = vM, VwWWn = 0; vWn < nwVnm; vWn++, VwWWn++) {
                if (vWn >= WwNMw) {
                    vNWMW = vN.Vvm[networkMappings[231]] - VwWWn;
                    break;
                }
                for (var Nnn = wm, vwnVV = 0; Nnn < MVNMm; Nnn++, vwnVV++) {
                    if (Nnn >= vMvnm) {
                        vMmnN = vN.Vvm[0][networkMappings[231]] - vwnVV;
                        break;
                    } else nvWwm[vWn][Nnn] = MNV;
                }
            }
            var vn = 0;
            var WM = 0;
            var Vw = 0;
            var vw = 0;
            if ((vNWMW !== 0) || (vMmnN !== 0)) {
                vn = (((mmm.wm + VWMWw) * mVV) + VwN) * Vv;
                WM = (((mmm.vM + nWnMM) * mVV) + Mnw) * Vv;
                nWnMM *= 32;
                VWMWw *= 32;
                Vw = (n[networkMappings[12]] - (vNWMW * 32)) + nWnMM;
                vw = (n[networkMappings[65]] - (vMmnN * 32)) + VWMWw;
            } else {
                vn = (((mmm.wm + VWMWw) * mVV) + VwN) * Vv;
                WM = (((mmm.vM + nWnMM) * mVV) + Mnw) * Vv;
                nWnMM *= 32;
                VWMWw *= 32;
                Vw = n[networkMappings[12]] - nWnMM;
                vw = n[networkMappings[65]] - VWMWw;
            }
            value[networkMappings[114]](n, VWMWw, nWnMM, vw, Vw, vn, WM, (vw * 3) * Vv, (Vw * 3) * Vv);
        };;

        function vmwvn() {
            vMwVw = Wn.NnV(vMwVw, (((VN[networkMappings[56]] + WvNnw[0]) + WvNnw[1]) + WvNnw[2]) + WvNnw[3], nNMvN);
            wWMmM = Vv;
            Vv += vMwVw * Vv;
            NMMvm = Vmn / Vv;
            wVVMm = mMn / Vv;
        };;

        function mmmmN() {
            var playersList = mNv.VNV[vMM];
            var vmw = mNv[networkMappings[188]][vMM];
            var tokenIndex = vmw[networkMappings[188]];
            for (var vM = 0; vM < tokenIndex; vM++) {
                var player = playersList[vmw.vwV[vM]];
                if (player.nvW === game.player[networkMappings[109]]) {
                    if (MNM.VnN(game.player[networkMappings[77]], game.player[networkMappings[120]], player[networkMappings[77]], player[networkMappings[120]]) < 1) VvMMw = Math[networkMappings[4]](0, VvMMw - WW);
                    else VvMMw = nWNMN;
                    var WvM = mnW[vMM].nwwWM[player.Nvm & 255];
                    var VvW = game.VvW;
                    if (WvM.WwV !== undefined) {
                        VvW.WwV.nWvMN = WvM.WwV;
                        VvW.Nmn.nWvMN = WvM.WwM;
                    } else {
                        VvW.WwV.nWvMN = 0;
                        VvW.Nmn.nWvMN = 0;
                    }
                    NnN = player[networkMappings[77]];
                    wNM = player[networkMappings[120]];
                    game.player[networkMappings[77]] = player[networkMappings[77]];
                    game.player[networkMappings[120]] = player[networkMappings[120]];
                    game.player.vWn = player.vM;
                    game.player.Nnn = player.wm;
                    game.player.wMw = (mnW[vMM].Mmwnn[(player.Nvm >> 8) & 255][networkMappings[217]] === 6) ? 1 : 0;
                    var MvnVW = Math[networkMappings[250]](wWmNv, nnNMm);
                    if (WNw.VNv > MvnVW) MvnVW = vnWNn * Math[networkMappings[250]]((WNw.VNv - MvnVW) / MvnVW, 1);
                    else MvnVW = 0;
                    var vn = MvnVW * Math[networkMappings[218]](WNw[networkMappings[142]]);
                    var WM = MvnVW * Math[networkMappings[147]](WNw[networkMappings[142]]);
                    nvVwM = Wn.NnV(nvVwM, vn, WmMvv);
                    NNVnv = Wn.NnV(NNVnv, WM, WmMvv);
                    var NmvVW = 0;
                    var MvvNW = 0;
                    if (VN.wnMnv > 0) {
                        VN.wnMnv -= 1;
                        NmvVW += (Math[networkMappings[211]]() * 6) - 3;
                        MvvNW += (Math[networkMappings[211]]() * 6) - 3;
                    }
                    if (VN.wnNWn > 0) {
                        VN.wnNWn -= 1;
                        NmvVW += (Math[networkMappings[211]]() * 18) - 9;
                        MvvNW += (Math[networkMappings[211]]() * 18) - 9;
                    }
                    VwN = (((Wvm / Vv) - player[networkMappings[77]]) - nvVwM) + NmvVW;
                    Mnw = (((NMv / Vv) - player[networkMappings[120]]) - NNVnv) + MvvNW;
                    Mmwvw = player[networkMappings[77]] + nvVwM;
                    WVwvV = player[networkMappings[120]] + NNVnv;
                    return;
                }
            }
        };;

        function MNmwW() {
            for (var vM = 0; vM < game.player.WMn[networkMappings[231]]; vM++) {
                if (game.player.WMn[vM] !== 0) return 0;
            }
            return 1;
        };

        function mmVVV() {
            if (game.player.wMw === 1) {
                if ((game.player.Vvm > 0) && ((game.player.vVnvN !== game.player.vWn) || (game.player.wwVnM !== game.player.Nnn))) {
                    for (var vM = 0; vM < game.player.WMn[networkMappings[231]]; vM++) {
                        if (game.player.WMn[vM] === 0) {
                            game.player.WMn[vM] = game.player.Vvm;
                            game.player.VWmmv[vM] = game.player.vVnvN;
                            game.player.Vnmwm[vM] = game.player.wwVnM;
                            break;
                        }
                    }
                    game.player.Vvm = 0;
                    game.player.vVnvN = game.player.vWn;
                    game.player.wwVnM = game.player.Nnn;
                }
                game.player.Vvm = Math[networkMappings[250]](wmnmV, game.player.Vvm + WW);
                for (var vM = 0; vM < game.player.WMn[networkMappings[231]]; vM++) game.player.WMn[vM] = Math[networkMappings[4]](0, game.player.WMn[vM] - WW);
            } else if ((game.player.Vvm === 0) && (MNmwW() === 1)) return;
            else {
                game.player.Vvm = Math[networkMappings[4]](0, game.player.Vvm - WW);
                for (var vM = 0; vM < game.player.WMn[networkMappings[231]]; vM++) game.player.WMn[vM] = Math[networkMappings[4]](0, game.player.WMn[vM] - WW);
            }
            if (WVwvn.v !== 1) {
                WVwvn = Wn.Nvw(vmmNw, WVwvn);
                return;
            }
            value[networkMappings[192]] = game.player.Vvm / wmnmV;
            var WM = Vv * (((game.player.vVnvN * mVV) + Mnw) + nMm);
            var vn = Vv * (((game.player.wwVnM * mVV) + VwN) + nMm);
            var vw = (Vv * WVwvn[networkMappings[65]]) / 2;
            var Vw = (Vv * WVwvn[networkMappings[12]]) / 2;
            value[networkMappings[114]](WVwvn, vn - (vw / 2), WM - (Vw / 2), vw, Vw);
            value[networkMappings[192]] = 1;
            for (var vM = 0; vM < game.player.WMn[networkMappings[231]]; vM++) {
                if (game.player.WMn[vM] > 0) {
                    value[networkMappings[192]] = game.player.WMn[vM] / wmnmV;
                    var WM = Vv * (((game.player.VWmmv[vM] * mVV) + Mnw) + nMm);
                    var vn = Vv * (((game.player.Vnmwm[vM] * mVV) + VwN) + nMm);
                    var vw = (Vv * WVwvn[networkMappings[65]]) / 2;
                    var Vw = (Vv * WVwvn[networkMappings[12]]) / 2;
                    value[networkMappings[114]](WVwvn, vn - (vw / 2), WM - (Vw / 2), vw, Vw);
                    value[networkMappings[192]] = 1;
                }
            }
        };;

        function NWNnwVM() {
            var NmNmw = Math[networkMappings[250]](MvN[networkMappings[12]] - WwNMw, Math[networkMappings[4]](0, (((vvnVM - WwNMw) / 2) + Math[networkMappings[68]]((WVwvV / mVV) - (WwNMw / 2))) + 1));
            var Mwmww = Math[networkMappings[250]](MvN[networkMappings[65]] - vMvnm, Math[networkMappings[4]](0, (((nvwWV - vMvnm) / 2) + Math[networkMappings[68]]((Mmwvw / mVV) - (vMvnm / 2))) + 1));
            var Vw = NmNmw + WwNMw;
            var vw = Mwmww + vMvnm;
            for (var vM = NmNmw; vM < Vw; vM++) {
                for (var wm = Mwmww; wm < vw; wm++) {
                    var VM = MvN.nwwVWNW[vM][wm];
                }
            }
        };;

        function VMwNN(VM) {
            var player = game.playersList[VM.nvW];
            if ((player !== undefined) && (player.VvMNw[networkMappings[231]] > 0)) {
                if (player.wvwnW >= MmVvw) player.wvwnW = 0;
                var messageHandler = player.wvwnW;
                var MvM = player.WwNnV[0];
                var mv = player.VvMNw[0];
                if (messageHandler === 0) {
                    var VNv = MNM.VNv(VM[networkMappings[77]], VM[networkMappings[120]], NnN, wNM);
                }
                player.wvwnW += WW;
                if (player.wvwnW >= MmVvw) {
                    player.wvwnW = 0;
                    player.WwNnV[networkMappings[89]]();
                    player.VvMNw[networkMappings[89]]();
                }
                var n = mnVVN[mv][MvM];
                if (n.v !== 1) {
                    mnVVN[mv][MvM] = Wn.Nvw((((VMVwn + mv) + "_") + MvM) + ".png", n);
                    return;
                }
                var Vm = 0;
                if (messageHandler < vwNVW) {
                    var nmMnM = messageHandler / vwNVW;
                    value[networkMappings[192]] = nmMnM;
                    Vm = 15 * (1 - nmMnM);
                } else if (messageHandler > MvnnW) {
                    var VmWMW = (MmVvw - messageHandler) / (MmVvw - MvnnW);
                    value[networkMappings[192]] = VmWMW;
                    Vm = 40 * (VmWMW - 1);
                }
                value[networkMappings[114]](n, ((VwN + VM[networkMappings[77]]) - 120) * Vv, ((Mnw + VM[networkMappings[120]]) + (Vm - 45)) * Vv, (n[networkMappings[65]] * Vv) / 2, (n[networkMappings[12]] * Vv) / 2);
                value[networkMappings[192]] = 1;
            }
        };;

        function mMMMW(VM) {
            var player = game.playersList[VM.nvW];
            for (var vM = 0; vM < player.mNnnW[networkMappings[231]]; vM++) {
                var mWw = player.mNnnW[vM];
                if ((vM > 0) && (mWw.messageHandler <= 0)) {
                    var MWvvV = player.mNnnW[vM - 1];
                    if ((MWvvV.messageHandler > 500) || (MWvvV.messageHandler <= 0)) continue;
                }
                if ((VM.VMN > mnW[vMM].VMN) || (mWw.messageHandler > 0)) {
                    var NNM = mnW[vMM].mNnnW;
                    var n = NNM.n;
                    if (n.v !== 1) {
                        NNM.n = Wn.Nvw(NNM[networkMappings[10]], NNM.n);
                        return;
                    }
                    if (mWw.messageHandler <= 0) {
                        mWw.messageHandler = 750;
                        mWw[networkMappings[142]] = Math[networkMappings[211]]() * Nnmvw;
                        mWw[networkMappings[77]] = VM[networkMappings[77]];
                        mWw[networkMappings[120]] = VM[networkMappings[120]];
                        mWw[networkMappings[85]] = 1 + (Math[networkMappings[211]]() * 0.8);
                    } else mWw.messageHandler -= WW;
                    var Vn = wvm.Mnm.VmV(Math[networkMappings[4]](0, mWw.messageHandler / 750));
                    var vNw = (((Vv * (mWw[networkMappings[85]] + 1)) * Vn) * n[networkMappings[65]]) / 7;
                    var vww = -vNw / 2;
                    value[networkMappings[228]]();
                    value[networkMappings[53]]((VwN + mWw[networkMappings[77]]) * Vv, (Mnw + mWw[networkMappings[120]]) * Vv);
                    value[networkMappings[197]](mWw[networkMappings[142]]);
                    value[networkMappings[192]] = Math[networkMappings[4]](0, Vn * Vn);
                    value[networkMappings[114]](n, vww, vww, vNw, vNw);
                    value[networkMappings[37]]();
                }
            }
        };;

        function nnwnV(NNM, statusEffect, WvM, VM, vW, vn, WM) {
            var player = game.playersList[VM.nvW];
            var NNW = 0;
            var MnW = player.MnW - VN.Nnm;
            var wNV = player.wNV - VN.Nnm;
            if (MnW > 0) {
                if (wNV > 0) NNW = 3;
                else if (player.wNV > 0) NNW = 5;
                else NNW = 1;
            } else if (wNV > 0) NNW = 2;
            else if (player.wNV > 0) NNW = 4;
            var skin = NNM.nmWwW[NNW];
            var NwV = 0;
            var MvvmM = VM[networkMappings[155]] & 254;
            var Wnn = statusEffect.vvw;
            var Mvv = statusEffect.nVW;
            if (MvvmM === 4) {
                if (player.vwn === -1) {
                    var vVWvV = (VM.Nvm >> 8) & 255;
                    if ((MM.Mn.vnV[vVWvV] !== 0) && ((VN.Nnm - player.MWwNw) > 800)) {
                        player.MWwNw = VN.Nnm;
                        var NWwvn = Math[networkMappings[68]](Math[networkMappings[211]]() * statusEffect.mwW);
                        MM.nmM(MM.Mn.vnV[vVWvV][NWwvn], statusEffect.vNm, MNM.VNv(game.player[networkMappings[77]], game.player[networkMappings[120]], VM[networkMappings[77]], VM[networkMappings[120]]) / 4, statusEffect.mNW);
                    }
                    player.vwn = 0;
                }
                if (player.WvWWW === 1) player.vwn = Math[networkMappings[4]](0, player.vwn - WW);
                else player.vwn = Math[networkMappings[250]](statusEffect.VWV, player.vwn + WW);
                var Vn = player.vwn / statusEffect.VWV;
                NwV = Vn * statusEffect.NwV;
                if ((player.vwn === 0) || (player.vwn === statusEffect.VWV)) player.WvWWW *= -1;
            } else if (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 1) {
                player.vwn = -1;
                player.wM = (player.wM + WW) % 1500;
                if (player.Vm !== 0) {
                    if (player.Vm < 400) player.Vm = 800 - player.Vm;
                    player.Vm = player.Vm + WW;
                    if (player.Vm > 800) player.Vm = 0;
                }
            } else {
                player.vwn = -1;
                if (VM.VMN > mnW[vMM].VMN) player.Vm = player.Vm + (WW * 1.9);
                else player.Vm = player.Vm + WW;
                if (player.Vm > 800) {
                    player[networkMappings[1]] *= -1;
                    player.Vm = player.Vm % 800;
                }
                if (player.wM !== 0) {
                    if (player.wM < 750) player.wM = 1500 - player.wM;
                    player.wM = player.wM + WW;
                    if (player.wM > 1500) player.wM = 0;
                }
            }
            var wM = statusEffect.wM * ((player.wM < 750) ? (player.wM / 750) : (1 - ((player.wM - 750) / 750)));
            var Vm = statusEffect.Vm * ((player.Vm < 400) ? (player.Vm / 400) : (1 - ((player.Vm - 400) / 400)));
            var Nwn = (WvM.vvw === undefined) ? skin.vvw : WvM.vvw;
            Wn.MV(Nwn, vn, WM, Wnn[networkMappings[142]] + VM[networkMappings[142]], ((Wnn[networkMappings[77]] + (Vm * player[networkMappings[1]])) + NwV) + wM, Wnn[networkMappings[120]], vW);
            Nwn = (WvM.nVW === undefined) ? skin.nVW : WvM.nVW;
            Wn.MV(Nwn, vn, WM, -Mvv[networkMappings[142]] + VM[networkMappings[142]], ((Mvv[networkMappings[77]] + (Vm * player[networkMappings[1]])) + NwV) + wM, Mvv[networkMappings[120]], vW);
            var mN = statusEffect.statusEffect;
            Wn.MV(mN, vn, WM, VM[networkMappings[142]], ((mN[networkMappings[77]] + (Vm * player[networkMappings[1]])) + wM) + NwV, mN[networkMappings[120]], vW);
            if (VM.MVw > 0) {
                var vMw = 1;
                VM.MVw -= WW;
                var Vn = 0;
                if (VM.MVw > 150) Vn = wvm.Mnm.WWM((300 - VM.MVw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.MVw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(NNM.NWV, vn, WM, VM[networkMappings[142]], 0, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            if (VM.Mvw > 0) {
                var vMw = 1;
                VM.Mvw -= WW;
                var Vn = 0;
                if (VM.Mvw > 150) Vn = wvm.Mnm.WWM((300 - VM.Mvw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.Mvw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                vn += (Math[networkMappings[218]](VM.wnn) * Vn) * 3;
                WM += (Math[networkMappings[147]](VM.wnn) * Vn) * 3;
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(NNM.Mvw, vn, WM, VM[networkMappings[142]], 0, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            if (VM.wWN > 0) {
                var vMw = 1;
                VM.wWN -= WW;
                if (VM.wWN > 150) value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, wvm.Mnm.WWM((300 - VM.wWN) / 300)));
                else {
                    var Vn = wvm.Mnm.vNM(VM.wWN / 150);
                    vMw += (1 - Vn) * 0.2;
                    value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                }
                Wn.MV(NNM.wWN, vn, WM, VM[networkMappings[142]], 0, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            Wn.MV(skin[networkMappings[78]], vn, WM, VM[networkMappings[142]], 0, 0, vW);
            if (WvM[networkMappings[78]] !== undefined) Wn.MV(WvM[networkMappings[78]], vn, WM, VM[networkMappings[142]], 0, 0, vW);
        };;

        function VNNWn(NNM, statusEffect, WvM, VM, vW, vn, WM) {
            var player = game.playersList[VM.nvW];
            var NNW = 0;
            var MnW = player.MnW - VN.Nnm;
            var wNV = player.wNV - VN.Nnm;
            if (MnW > 0) {
                if (wNV > 0) NNW = 3;
                else if (player.wNV > 0) NNW = 5;
                else NNW = 1;
            } else if (wNV > 0) NNW = 2;
            else if (player.wNV > 0) NNW = 4;
            var skin = NNM.nmWwW[NNW];
            var NwV = 0;
            var Vmv = 0;
            var VNw = 0;
            var mWw = -1;
            var Wnn = statusEffect.vvw;
            var Mvv = statusEffect.nVW;
            var nnVNm = player.nnVNm;
            if (VM.nMM > 0) {
                if (VM.nMM === VM.wWM) {
                    for (var vM = 0; vM < nnVNm[networkMappings[231]]; vM++) {
                        var NvW = nnVNm[vM];
                        if (NvW.messageHandler <= 0) {
                            NvW[networkMappings[217]] = statusEffect.NvW;
                            NvW.messageHandler = statusEffect.vvwnn;
                            NvW[networkMappings[77]] = vn + (Math[networkMappings[218]](VM[networkMappings[142]]) * 44);
                            NvW[networkMappings[120]] = WM + (Math[networkMappings[147]](VM[networkMappings[142]]) * 44);
                            var MN = ((-Math[networkMappings[179]] / 2.5) + VM[networkMappings[142]]) + ((Math[networkMappings[211]]() * -Math[networkMappings[179]]) / 3.5);
                            NvW.NnVWV = Math[networkMappings[218]](MN);
                            NvW.wvNVw = Math[networkMappings[147]](MN);
                            break;
                        }
                    }
                }
                VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
                var Vn = (VM.nMM > 80) ? (1 - ((VM.nMM - 80) / 100)) : (VM.nMM / 80);
                if (statusEffect.mVN === 0) {
                    var VvwVW = NNM.wwM[statusEffect.wwM][networkMappings[231]];
                    for (var wwM = 0; wwM < VvwVW; wwM++) {
                        if (VM.nMM > (statusEffect.messageHandler - (30 * (wwM + 1)))) {
                            mWw = wwM;
                            break;
                        }
                    }
                }
                VNw = Vn * statusEffect.VNw;
                Vmv = Vn * statusEffect.Vmv;
                NwV = Vn * statusEffect.NwV;
            } else if (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 1) {
                player.wM = (player.wM + WW) % 1500;
                if (player.Vm !== 0) {
                    if (player.Vm < 400) player.Vm = 800 - player.Vm;
                    player.Vm = player.Vm + WW;
                    if (player.Vm > 800) player.Vm = 0;
                }
            } else {
                if (VM.VMN > mnW[vMM].VMN) player.Vm = player.Vm + (WW * 1.9);
                else player.Vm = player.Vm + WW;
                if (player.Vm > 800) {
                    player[networkMappings[1]] *= -1;
                    player.Vm = player.Vm % 800;
                }
                if (player.wM !== 0) {
                    if (player.wM < 750) player.wM = 1500 - player.wM;
                    player.wM = player.wM + WW;
                    if (player.wM > 1500) player.wM = 0;
                }
            }
            var wM = statusEffect.wM * ((player.wM < 750) ? (player.wM / 750) : (1 - ((player.wM - 750) / 750)));
            var Vm = statusEffect.Vm * ((player.Vm < 400) ? (player.Vm / 400) : (1 - ((player.Vm - 400) / 400)));
            var Nwn = (WvM.vvw === undefined) ? skin.vvw : WvM.vvw;
            Wn.MV(Nwn, vn, WM, Wnn[networkMappings[142]] + VM[networkMappings[142]], ((Wnn[networkMappings[77]] + (Vm * player[networkMappings[1]])) + NwV) + wM, Wnn[networkMappings[120]], vW);
            Nwn = (WvM.nVW === undefined) ? skin.nVW : WvM.nVW;
            Wn.MV(Nwn, vn, WM, -Mvv[networkMappings[142]] + VM[networkMappings[142]], ((Mvv[networkMappings[77]] + (Vm * player[networkMappings[1]])) + NwV) + wM, Mvv[networkMappings[120]], vW);
            var mN = statusEffect.statusEffect;
            if ((mWw >= 0) && (statusEffect.mVN === 0)) {
                var wwM = NNM.wwM[statusEffect.wwM][mWw];
                Wn.MV(wwM, vn, WM, VM[networkMappings[142]], (((mN[networkMappings[77]] + (Vm * player[networkMappings[1]])) + wM) + Vmv) + statusEffect.vwv, mN[networkMappings[120]], vW);
            }
            Wn.MV(mN, vn, WM, VM[networkMappings[142]], ((mN[networkMappings[77]] + (Vm * player[networkMappings[1]])) + wM) + Vmv, mN[networkMappings[120]], vW);
            for (var vM = 0; vM < nnVNm[networkMappings[231]]; vM++) {
                var NvW = nnVNm[vM];
                if (NvW.messageHandler > 0) {
                    NvW[networkMappings[77]] += (WW * NvW.NnVWV) * 0.18;
                    NvW[networkMappings[120]] += (WW * NvW.wvNVw) * 0.18;
                    if ((NvW.messageHandler < 200) && (value[networkMappings[192]] === 1)) {
                        value[networkMappings[192]] = wvm.Mnm.vNM(NvW.messageHandler / 200);
                        Wn.MV(NNM.nnVNm[NvW[networkMappings[217]]], NvW[networkMappings[77]], NvW[networkMappings[120]], NvW.messageHandler * 0.007, 0, 0, vW);
                        value[networkMappings[192]] = 1;
                    } else Wn.MV(NNM.nnVNm[NvW[networkMappings[217]]], NvW[networkMappings[77]], NvW[networkMappings[120]], NvW.messageHandler * 0.007, 0, 0, vW);
                    NvW.messageHandler -= WW;
                }
            }
            if (VM.Mvw > 0) {
                var vMw = 1;
                VM.Mvw -= WW;
                var Vn = 0;
                if (VM.Mvw > 150) Vn = wvm.Mnm.WWM((300 - VM.Mvw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.Mvw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                vn += (Math[networkMappings[218]](VM.wnn) * Vn) * 3;
                WM += (Math[networkMappings[147]](VM.wnn) * Vn) * 3;
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(NNM.Mvw, vn, WM, VM[networkMappings[142]], VNw, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            if (VM.wWN > 0) {
                var vMw = 1;
                VM.wWN -= WW;
                if (VM.wWN > 150) value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, wvm.Mnm.WWM((300 - VM.wWN) / 300)));
                else {
                    var Vn = wvm.Mnm.vNM(VM.wWN / 150);
                    vMw += (1 - Vn) * 0.2;
                    value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                }
                Wn.MV(NNM.wWN, vn, WM, VM[networkMappings[142]], VNw, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            Wn.MV(skin[networkMappings[78]], vn, WM, VM[networkMappings[142]], VNw, 0, vW);
            if (WvM[networkMappings[78]] !== undefined) Wn.MV(WvM[networkMappings[78]], vn, WM, VM[networkMappings[142]], VNw, 0, vW);
        };;

        function wVWwW(NNM, statusEffect, WvM, VM, vW, vn, WM) {
            var player = game.playersList[VM.nvW];
            var NNW = 0;
            var MnW = player.MnW - VN.Nnm;
            var wNV = player.wNV - VN.Nnm;
            if (MnW > 0) {
                if (wNV > 0) NNW = 3;
                else if (player.wNV > 0) NNW = 5;
                else NNW = 1;
            } else if (wNV > 0) NNW = 2;
            else if (player.wNV > 0) NNW = 4;
            var skin = NNM.nmWwW[NNW];
            var vVm = 0;
            var Nnw = 0;
            var WnW = 0;
            var MVN = 0;
            if (VM.nMM > 0) {
                VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
                Vn = (VM.nMM > statusEffect.Nmw) ? (1 - ((VM.nMM - statusEffect.Nmw) / (statusEffect.messageHandler - statusEffect.Nmw))) : (VM.nMM / statusEffect.Nmw);
                vVm = -wvm.Mnm.vwW(Vn) * 0.35;
                MVN = Vn * 3;
                WnW = -Vn * 20;
                Nnw = Vn * 3;
            } else if (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 1) {
                player.wM = (player.wM + WW) % 1500;
                if (player.Vm !== 0) {
                    if (player.Vm < 400) player.Vm = 800 - player.Vm;
                    player.Vm = player.Vm + WW;
                    if (player.Vm > 800) player.Vm = 0;
                }
            } else {
                if (VM.VMN > mnW[vMM].VMN) player.Vm = player.Vm + (WW * 1.9);
                else player.Vm = player.Vm + WW;
                if (player.Vm > 800) {
                    player[networkMappings[1]] *= -1;
                    player.Vm = player.Vm % 800;
                }
                if (player.wM !== 0) {
                    if (player.wM < 750) player.wM = 1500 - player.wM;
                    player.wM = player.wM + WW;
                    if (player.wM > 1500) player.wM = 0;
                }
            }
            var wM = statusEffect.wM * ((player.wM < 750) ? (player.wM / 750) : (1 - ((player.wM - 750) / 750)));
            var Vm = statusEffect.Vm * ((player.Vm < 400) ? (player.Vm / 400) : (1 - ((player.Vm - 400) / 400)));
            var MWVVN = statusEffect.MWVVN * ((player.wM < 750) ? (player.wM / 750) : (1 - ((player.wM - 750) / 750)));
            var VNM = statusEffect.vvw;
            var Nwn = (WvM.vvw === undefined) ? skin.vvw : WvM.vvw;
            Wn.MV(Nwn, vn, WM, (VNM[networkMappings[142]] + VM[networkMappings[142]]) - vVm, ((VNM[networkMappings[77]] - (Vm * player[networkMappings[1]])) + WnW) + MWVVN, VNM[networkMappings[120]], vW);
            if (VM.nMM > 0) {
                var VMNwm = statusEffect.VMNwm;
                Wn.MV(VMNwm, vn, WM, VM[networkMappings[142]], ((VMNwm[networkMappings[77]] - (Vm * player[networkMappings[1]])) + MWVVN) + WnW, VMNwm[networkMappings[120]], vW);
            }
            var mN = statusEffect.statusEffect;
            Wn.MV(mN, vn, WM, mN[networkMappings[142]] + VM[networkMappings[142]], ((mN[networkMappings[77]] + (Vm * player[networkMappings[1]])) + wM) + Nnw, mN[networkMappings[120]], vW);
            VNM = statusEffect.nVW;
            Nwn = (WvM.nVW === undefined) ? skin.nVW : WvM.nVW;
            Wn.MV(Nwn, vn, WM, -VNM[networkMappings[142]] + VM[networkMappings[142]], ((VNM[networkMappings[77]] + (Vm * player[networkMappings[1]])) + Nnw) + wM, VNM[networkMappings[120]], vW);
            if (VM.Mvw > 0) {
                var vMw = 1;
                VM.Mvw -= WW;
                var Vn = 0;
                if (VM.Mvw > 150) Vn = wvm.Mnm.WWM((300 - VM.Mvw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.Mvw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                vn += (Math[networkMappings[218]](VM.wnn) * Vn) * 3;
                WM += (Math[networkMappings[147]](VM.wnn) * Vn) * 3;
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(NNM.Mvw, vn, WM, VM[networkMappings[142]] - (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            if (VM.wWN > 0) {
                var vMw = 1;
                VM.wWN -= WW;
                if (VM.wWN > 150) value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, wvm.Mnm.WWM((300 - VM.wWN) / 300)));
                else {
                    var Vn = wvm.Mnm.vNM(VM.wWN / 150);
                    vMw += (1 - Vn) * 0.2;
                    value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                }
                Wn.MV(NNM.wWN, vn, WM, VM[networkMappings[142]] - (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            Wn.MV(skin[networkMappings[78]], vn, WM, VM[networkMappings[142]] - (vVm / 1.5), MVN, 0, vW);
            if (WvM[networkMappings[78]] !== undefined) Wn.MV(WvM[networkMappings[78]], vn, WM, VM[networkMappings[142]] - (vVm / 1.5), MVN, 0, vW);
        };;

        function nNWMw(NNM, statusEffect, WvM, VM, vW, vn, WM) {
            var player = game.playersList[VM.nvW];
            var NNW = 0;
            var MnW = player.MnW - VN.Nnm;
            var wNV = player.wNV - VN.Nnm;
            if (MnW > 0) {
                if (wNV > 0) NNW = 3;
                else if (player.wNV > 0) NNW = 5;
                else NNW = 1;
            } else if (wNV > 0) NNW = 2;
            else if (player.wNV > 0) NNW = 4;
            var skin = NNM.nmWwW[NNW];
            var vVm = 0;
            var Nnw = 0;
            var WnW = 0;
            var MVN = 0;
            if (VM.nMM > 0) {
                VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
                Vn = (VM.nMM > statusEffect.Nmw) ? (1 - ((VM.nMM - statusEffect.Nmw) / (statusEffect.messageHandler - statusEffect.Nmw))) : (VM.nMM / statusEffect.Nmw);
                vVm = -wvm.Mnm.vwW(Vn) * 0.55;
                MVN = Vn * 3;
                WnW = -Vn * 25;
                Nnw = Vn * 10;
            } else if (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 1) {
                player.wM = (player.wM + WW) % 1500;
                if (player.Vm !== 0) {
                    if (player.Vm < 400) player.Vm = 800 - player.Vm;
                    player.Vm = player.Vm + WW;
                    if (player.Vm > 800) player.Vm = 0;
                }
            } else {
                if (VM.VMN > mnW[vMM].VMN) player.Vm = player.Vm + (WW * 1.9);
                else player.Vm = player.Vm + WW;
                if (player.Vm > 800) {
                    player[networkMappings[1]] *= -1;
                    player.Vm = player.Vm % 800;
                }
                if (player.wM !== 0) {
                    if (player.wM < 750) player.wM = 1500 - player.wM;
                    player.wM = player.wM + WW;
                    if (player.wM > 1500) player.wM = 0;
                }
            }
            var wM = statusEffect.wM * ((player.wM < 750) ? (player.wM / 750) : (1 - ((player.wM - 750) / 750)));
            var Vm = statusEffect.Vm * ((player.Vm < 400) ? (player.Vm / 400) : (1 - ((player.Vm - 400) / 400)));
            var VNM = statusEffect.nVW;
            var Nwn = (WvM.nVW === undefined) ? skin.nVW : WvM.nVW;
            Wn.MV(Nwn, vn, WM, ((-VNM[networkMappings[142]] + VM[networkMappings[142]]) - wM) - vVm, (VNM[networkMappings[77]] - (Vm * player[networkMappings[1]])) + Nnw, VNM[networkMappings[120]], vW);
            if (VM.Mvw > 0) {
                var vMw = 1;
                VM.Mvw -= WW;
                var Vn = 0;
                if (VM.Mvw > 150) Vn = wvm.Mnm.WWM((300 - VM.Mvw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.Mvw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                vn += (Math[networkMappings[218]](VM.wnn) * Vn) * 3;
                WM += (Math[networkMappings[147]](VM.wnn) * Vn) * 3;
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(NNM.Mvw, vn, WM, VM[networkMappings[142]] - (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            if (VM.wWN > 0) {
                var vMw = 1;
                VM.wWN -= WW;
                if (VM.wWN > 150) value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, wvm.Mnm.WWM((300 - VM.wWN) / 300)));
                else {
                    var Vn = wvm.Mnm.vNM(VM.wWN / 150);
                    vMw += (1 - Vn) * 0.2;
                    value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                }
                Wn.MV(NNM.wWN, vn, WM, VM[networkMappings[142]] - (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            Wn.MV(skin[networkMappings[78]], vn, WM, VM[networkMappings[142]] - (vVm / 1.5), MVN, 0, vW);
            if (WvM[networkMappings[78]] !== undefined) Wn.MV(WvM[networkMappings[78]], vn, WM, VM[networkMappings[142]] - (vVm / 1.5), MVN, 0, vW);
            var MWVVN = statusEffect.MWVVN * ((player.wM < 750) ? (player.wM / 750) : (1 - ((player.wM - 750) / 750)));
            VNM = statusEffect.vvw;
            Nwn = (WvM.vvw === undefined) ? skin.vvw : WvM.vvw;
            Wn.MV(Nwn, vn, WM, VNM[networkMappings[142]] + VM[networkMappings[142]], ((VNM[networkMappings[77]] + (Vm * player[networkMappings[1]])) + WnW) + MWVVN, VNM[networkMappings[120]], vW);
            var mN = statusEffect.statusEffect;
            Wn.MV(mN, vn, WM, mN[networkMappings[142]] + VM[networkMappings[142]], ((mN[networkMappings[77]] + (Vm * player[networkMappings[1]])) + MWVVN) + WnW, mN[networkMappings[120]], vW);
        };;

        function mwMmM(NNM, statusEffect, WvM, VM, vW, vn, WM) {
            var player = game.playersList[VM.nvW];
            var NNW = 0;
            var MnW = player.MnW - VN.Nnm;
            var wNV = player.wNV - VN.Nnm;
            if (MnW > 0) {
                if (wNV > 0) NNW = 3;
                else if (player.wNV > 0) NNW = 5;
                else NNW = 1;
            } else if (wNV > 0) NNW = 2;
            else if (player.wNV > 0) NNW = 4;
            var skin = NNM.nmWwW[NNW];
            var vVm = 0;
            var Nnw = 0;
            var WnW = 0;
            var MVN = 0;
            var Wnn = statusEffect.vvw;
            var Mvv = statusEffect.nVW;
            if (VM.nMM > 0) {
                VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
                Vn = (VM.nMM > statusEffect.Nmw) ? (1 - ((VM.nMM - statusEffect.Nmw) / (statusEffect.messageHandler - statusEffect.Nmw))) : (VM.nMM / statusEffect.Nmw);
                vVm = -wvm.Mnm.vwW(Vn) * 0.4;
                MVN = Vn * 3;
                Nnw = Vn * Mvv.VNv;
                WnW = Vn * Wnn.VNv;
            } else if (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 1) {
                player.wM = (player.wM + WW) % 1500;
                if (player.Vm !== 0) {
                    if (player.Vm < 400) player.Vm = 800 - player.Vm;
                    player.Vm = player.Vm + WW;
                    if (player.Vm > 800) player.Vm = 0;
                }
            } else {
                if (VM.VMN > mnW[vMM].VMN) player.Vm = player.Vm + (WW * 1.9);
                else player.Vm = player.Vm + WW;
                if (player.Vm > 800) {
                    player[networkMappings[1]] *= -1;
                    player.Vm = player.Vm % 800;
                }
                if (player.wM !== 0) {
                    if (player.wM < 750) player.wM = 1500 - player.wM;
                    player.wM = player.wM + WW;
                    if (player.wM > 1500) player.wM = 0;
                }
            }
            var wM = statusEffect.wM * ((player.wM < 750) ? (player.wM / 750) : (1 - ((player.wM - 750) / 750)));
            var Vm = statusEffect.Vm * ((player.Vm < 400) ? (player.Vm / 400) : (1 - ((player.Vm - 400) / 400)));
            var mN = statusEffect.statusEffect;
            Wn.NvMVM(mN, vn, WM, (mN[networkMappings[142]] + VM[networkMappings[142]]) + wM, mN[networkMappings[77]] + (Vm * player[networkMappings[1]]), mN[networkMappings[120]], vW, vVm * mN.wNW, mN[networkMappings[171]], mN[networkMappings[201]]);
            var Nwn = (WvM.vvw === undefined) ? skin.vvw : WvM.vvw;
            Wn.MV(Nwn, vn, WM, ((Wnn[networkMappings[142]] + VM[networkMappings[142]]) + wM) + (vVm * Wnn.wNW), (Wnn[networkMappings[77]] + (Vm * player[networkMappings[1]])) + WnW, Wnn[networkMappings[120]], vW);
            Nwn = (WvM.nVW === undefined) ? skin.nVW : WvM.nVW;
            Wn.MV(Nwn, vn, WM, ((-Mvv[networkMappings[142]] + VM[networkMappings[142]]) + wM) + (vVm * Mvv.wNW), (Mvv[networkMappings[77]] + (Vm * player[networkMappings[1]])) + Nnw, Mvv[networkMappings[120]], vW);
            if (VM.Mvw > 0) {
                var vMw = 1;
                VM.Mvw -= WW;
                var Vn = 0;
                if (VM.Mvw > 150) Vn = wvm.Mnm.WWM((300 - VM.Mvw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.Mvw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                vn += (Math[networkMappings[218]](VM.wnn) * Vn) * 3;
                WM += (Math[networkMappings[147]](VM.wnn) * Vn) * 3;
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(NNM.Mvw, vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            if (VM.wWN > 0) {
                var vMw = 1;
                VM.wWN -= WW;
                if (VM.wWN > 150) value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, wvm.Mnm.WWM((300 - VM.wWN) / 300)));
                else {
                    var Vn = wvm.Mnm.vNM(VM.wWN / 150);
                    vMw += (1 - Vn) * 0.2;
                    value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                }
                Wn.MV(NNM.wWN, vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            Wn.MV(skin[networkMappings[78]], vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vW);
            if (WvM[networkMappings[78]] !== undefined) Wn.MV(WvM[networkMappings[78]], vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vW);
        };;

        function WWvnm(NNM, statusEffect, WvM, VM, vW, vn, WM) {
            var player = game.playersList[VM.nvW];
            var NNW = 0;
            var MnW = player.MnW - VN.Nnm;
            var wNV = player.wNV - VN.Nnm;
            if (MnW > 0) {
                if (wNV > 0) NNW = 3;
                else if (player.wNV > 0) NNW = 5;
                else NNW = 1;
            } else if (wNV > 0) NNW = 2;
            else if (player.wNV > 0) NNW = 4;
            var skin = NNM.nmWwW[NNW];
            var Nnw = 0;
            var WnW = 0;
            if (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 1) {
                player.wM = (player.wM + WW) % 1500;
                if (player.Vm !== 0) {
                    if (player.Vm < 400) player.Vm = 800 - player.Vm;
                    player.Vm = player.Vm + WW;
                    if (player.Vm > 800) player.Vm = 0;
                }
            } else {
                if (VM.VMN > mnW[vMM].VMN) player.Vm = player.Vm + (WW * 1.9);
                else player.Vm = player.Vm + WW;
                if (player.Vm > 800) {
                    player[networkMappings[1]] *= -1;
                    player.Vm = player.Vm % 800;
                }
                if (player.wM !== 0) {
                    if (player.wM < 750) player.wM = 1500 - player.wM;
                    player.wM = player.wM + WW;
                    if (player.wM > 1500) player.wM = 0;
                }
            }
            var wM = statusEffect.wM * ((player.wM < 750) ? (player.wM / 750) : (1 - ((player.wM - 750) / 750)));
            var Vm = statusEffect.Vm * ((player.Vm < 400) ? (player.Vm / 400) : (1 - ((player.Vm - 400) / 400)));
            var VNM = statusEffect.vvw;
            var Nwn = (WvM.vvw === undefined) ? skin.vvw : WvM.vvw;
            Wn.MV(Nwn, vn, WM, (VNM[networkMappings[142]] + VM[networkMappings[142]]) + wM, (VNM[networkMappings[77]] + (Vm * player[networkMappings[1]])) + WnW, VNM[networkMappings[120]], vW);
            VNM = statusEffect.nVW;
            Nwn = (WvM.nVW === undefined) ? skin.nVW : WvM.nVW;
            Wn.MV(Nwn, vn, WM, (-VNM[networkMappings[142]] + VM[networkMappings[142]]) - wM, (VNM[networkMappings[77]] - (Vm * player[networkMappings[1]])) + Nnw, VNM[networkMappings[120]], vW);
            Wn.MV(statusEffect.vvv, vn, WM, ((-VNM[networkMappings[142]] + VM[networkMappings[142]]) - wM) + (Math[networkMappings[179]] / 3), ((VNM[networkMappings[77]] - (Vm * player[networkMappings[1]])) + Nnw) - 40, VNM[networkMappings[120]] - 15, vW);
            if (VM.Mvw > 0) {
                var vMw = 1;
                VM.Mvw -= WW;
                var Vn = 0;
                if (VM.Mvw > 150) Vn = wvm.Mnm.WWM((300 - VM.Mvw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.Mvw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                vn += (Math[networkMappings[218]](VM.wnn) * Vn) * 3;
                WM += (Math[networkMappings[147]](VM.wnn) * Vn) * 3;
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(NNM.Mvw, vn, WM, VM[networkMappings[142]], 0, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            if (VM.wWN > 0) {
                var vMw = 1;
                VM.wWN -= WW;
                if (VM.wWN > 150) value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, wvm.Mnm.WWM((300 - VM.wWN) / 300)));
                else {
                    var Vn = wvm.Mnm.vNM(VM.wWN / 150);
                    vMw += (1 - Vn) * 0.2;
                    value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                }
                Wn.MV(NNM.wWN, vn, WM, VM[networkMappings[142]], 0, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            Wn.MV(skin[networkMappings[78]], vn, WM, VM[networkMappings[142]], 0, 0, vW);
            if (WvM[networkMappings[78]] !== undefined) Wn.MV(WvM[networkMappings[78]], vn, WM, VM[networkMappings[142]], 0, 0, vW);
            Wn.MV(statusEffect.nMWMm, vn, WM, VM[networkMappings[142]], 0, 0, vW);
        };;
        var MNWmn = [0, 0, 0, 0];

        function nWVmv() {
            var nNMVn = 0;
            if ((game.player.wMw === 1) && (game.player.vvv !== 0)) {
                var mN = Mww[game.player.vvv];
                if (mN.wVm !== 0) {
                    mN = mN.wVm[game.player.WwnMn];
                    mN.nNV = mN.vN;
                    mN.vvv = mN.vN;
                    mN.Mmw = MNWmn;
                    mN.NVn = MNWmn;
                }
                var MN = WNw[networkMappings[142]];
                var Wv = (mN.mmV === 1) ? 0 : game.player.vvVww;
                game.player.Nmm = game.player.Nnn + Math[networkMappings[68]]((nMm + (Math[networkMappings[218]](MN) * mVV)) / mVV);
                game.player.Vwm = game.player.vWn + Math[networkMappings[68]]((nMm + (Math[networkMappings[147]](MN) * mVV)) / mVV);
                var vn = ((mN.Mmw[Wv] + VwN) + nMm) + (mVV * game.player.Nmm);
                var WM = ((mN.NVn[Wv] + Mnw) + nMm) + (mVV * game.player.Vwm);
                if ((((game.player.Nmm >= 0) && (game.player.Vwm >= 0)) && (game.player.Nmm < wMn)) && (game.player.Vwm < MNn)) {
                    var WWw = nvm[game.player.Vwm][game.player.Nmm];
                    var healthStatus = (game.player.healthStatus === -1) ? -2 : game.player.healthStatus;
                    if ((WWw.mmm === MNV) && (((mN.WWn !== 2) || (WWw.nnw === 0)) || (WWw.WnN === wn.WNWVW))) {
                        game.player.NvvwM = 0;
                        Wn.MV(mN.nNV, vn, WM, Wv * Vnn, 0, 0, 1);
                    } else if ((((mN[networkMappings[79]].WnN === wn.WNWVW) || (mN.WWn === 2)) || (((WWw.nvW !== 0) && (WWw.nvW !== game.player[networkMappings[109]])) && (game.playersList[WWw.nvW].healthStatus !== healthStatus))) && (WWw.vwVVn === MNV)) {
                        game.player.NvvwM = 0;
                        Wn.MV(mN.nNV, vn, WM, Wv * Vnn, 0, 0, 1);
                    } else if ((mN.WnVMm !== undefined) && ((((Wv % 2) === 0) && ((((((game.player.Vwm < 1) || (game.player.Vwm >= (MNn - 1))) || (nvm[game.player.Vwm + 1][game.player.Nmm].mmm === MNV)) || ((nvm[game.player.Vwm + 1][game.player.Nmm].vwVVn === MNV) && (((nvm[game.player.Vwm + 1][game.player.Nmm].nvW !== game.player[networkMappings[109]]) && (nvm[game.player.Vwm + 1][game.player.Nmm].nvW !== 0)) && (game.playersList[nvm[game.player.Vwm + 1][game.player.Nmm].nvW].healthStatus !== healthStatus)))) || (nvm[game.player.Vwm - 1][game.player.Nmm].mmm === MNV)) || ((nvm[game.player.Vwm - 1][game.player.Nmm].vwVVn === MNV) && (((nvm[game.player.Vwm - 1][game.player.Nmm].nvW !== game.player[networkMappings[109]]) && (nvm[game.player.Vwm - 1][game.player.Nmm].nvW !== 0)) && (game.playersList[nvm[game.player.Vwm - 1][game.player.Nmm].nvW].healthStatus !== healthStatus))))) || (((Wv % 2) === 1) && (((((((game.player.Nmm < 1) || (game.player.Nmm >= (wMn - 1))) || (nvm[game.player.Vwm][game.player.Nmm + 1].mmm === MNV)) || ((nvm[game.player.Vwm][game.player.Nmm + 1].vwVVn === MNV) && (((nvm[game.player.Vwm][game.player.Nmm + 1].nvW !== game.player[networkMappings[109]]) && (nvm[game.player.Vwm][game.player.Nmm + 1].nvW !== 0)) && (game.playersList[nvm[game.player.Vwm][game.player.Nmm + 1].nvW].healthStatus !== healthStatus)))) || (nvm[game.player.Vwm][game.player.Nmm - 1].mmm === MNV)) || ((nvm[game.player.Vwm][game.player.Nmm - 1].vwVVn === MNV) && (((nvm[game.player.Vwm][game.player.Nmm - 1].nvW !== game.player[networkMappings[109]]) && (nvm[game.player.Vwm][game.player.Nmm - 1].nvW !== 0)) && (game.playersList[nvm[game.player.Vwm][game.player.Nmm - 1].nvW].healthStatus !== healthStatus)))) || (game.player.vWn === game.player.Vwm))))) {
                        game.player.NvvwM = 0;
                        Wn.MV(mN.nNV, vn, WM, Wv * Vnn, 0, 0, 1);
                    } else {
                        game.player.NvvwM = 1;
                        Wn.MV(mN.vvv, vn, WM, Wv * Vnn, 0, 0, 1);
                    }
                }
                if (WnvWN.v !== 1) {
                    WnvWN = Wn.Nvw(MvwmV, WnvWN);
                    return;
                }
                if ((mN.mmV === 1) || (game.player.mnv >= 0)) nNMVn = Math[networkMappings[4]](0, game.player.WnvWN - WW);
                else nNMVn = Math[networkMappings[250]](900, game.player.WnvWN + WW);
            } else nNMVn = Math[networkMappings[4]](0, game.player.WnvWN - WW);
            if (nNMVn > 0) {
                value[networkMappings[192]] = wvm.Mnm.vNM(Math[networkMappings[4]](0, nNMVn - 600) / 300);
                var vW = Vv + (vMwVw * Vv);
                var VnVWn = vW / Vv;
                var vw = (Vv * WnvWN[networkMappings[65]]) / 2;
                var Vw = (Vv * WnvWN[networkMappings[12]]) / 2;
                value[networkMappings[114]](WnvWN, ((VwN + NnN) * Vv) - (vw / 2), Math[networkMappings[4]](10 * Vv, ((((Mnw + wNM) * Vv) - (Vw / 2)) - (65 * Vv)) - (60 * Vv)), vw, Vw);
                value[networkMappings[192]] = 1;
            }
            game.player.WnvWN = nNMVn;
        };;

        function mMwWw(NNM, statusEffect, WvM, VM, vW, vn, WM) {
            var player = game.playersList[VM.nvW];
            var NNW = 0;
            var MnW = player.MnW - VN.Nnm;
            var wNV = player.wNV - VN.Nnm;
            if (MnW > 0) {
                if (wNV > 0) NNW = 3;
                else if (player.wNV > 0) NNW = 5;
                else NNW = 1;
            } else if (wNV > 0) NNW = 2;
            else if (player.wNV > 0) NNW = 4;
            var skin = NNM.nmWwW[NNW];
            var vVm = 0;
            var Nnw = 0;
            var WnW = 0;
            var MVN = 0;
            if (VM.nMM > 0) {
                VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
                VM.nMM = Math[networkMappings[250]](VM.nMM, statusEffect.messageHandler);
                Vn = (VM.nMM > statusEffect.Nmw) ? (1 - ((VM.nMM - statusEffect.Nmw) / (statusEffect.messageHandler - statusEffect.Nmw))) : (VM.nMM / statusEffect.Nmw);
                vVm = (player.WvWWW * wvm.Mnm.vwW(Vn)) * 0.55;
                MVN = Vn * 3;
                if (player.WvWWW === 1) Nnw = Vn * 25;
                else WnW = Vn * 25;
                if (VM.nMM === 0) player.WvWWW *= -1;
            } else if (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 1) {
                player.wM = (player.wM + WW) % 1500;
                if (player.Vm !== 0) {
                    if (player.Vm < 400) player.Vm = 800 - player.Vm;
                    player.Vm = player.Vm + WW;
                    if (player.Vm > 800) player.Vm = 0;
                }
            } else {
                if (VM.VMN > mnW[vMM].VMN) player.Vm = player.Vm + (WW * 1.9);
                else player.Vm = player.Vm + WW;
                if (player.Vm > 800) {
                    player[networkMappings[1]] *= -1;
                    player.Vm = player.Vm % 800;
                }
                if (player.wM !== 0) {
                    if (player.wM < 750) player.wM = 1500 - player.wM;
                    player.wM = player.wM + WW;
                    if (player.wM > 1500) player.wM = 0;
                }
            }
            var wM = statusEffect.wM * ((player.wM < 750) ? (player.wM / 750) : (1 - ((player.wM - 750) / 750)));
            var Vm = statusEffect.Vm * ((player.Vm < 400) ? (player.Vm / 400) : (1 - ((player.Vm - 400) / 400)));
            var VNM = statusEffect.vvw;
            var Nwn = (WvM.vvw === undefined) ? skin.vvw : WvM.vvw;
            Wn.MV(Nwn, vn, WM, ((VNM[networkMappings[142]] + VM[networkMappings[142]]) + wM) + vVm, (VNM[networkMappings[77]] + (Vm * player[networkMappings[1]])) + WnW, VNM[networkMappings[120]], vW);
            VNM = statusEffect.nVW;
            Nwn = (WvM.nVW === undefined) ? skin.nVW : WvM.nVW;
            Wn.MV(Nwn, vn, WM, ((-VNM[networkMappings[142]] + VM[networkMappings[142]]) - wM) + vVm, (VNM[networkMappings[77]] - (Vm * player[networkMappings[1]])) + Nnw, VNM[networkMappings[120]], vW);
            if (VM.MVw > 0) {
                var vMw = 1;
                VM.MVw -= WW;
                var Vn = 0;
                if (VM.MVw > 150) Vn = wvm.Mnm.WWM((300 - VM.MVw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.MVw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(NNM.NWV, vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            if (VM.Mvw > 0) {
                var vMw = 1;
                VM.Mvw -= WW;
                var Vn = 0;
                if (VM.Mvw > 150) Vn = wvm.Mnm.WWM((300 - VM.Mvw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.Mvw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                vn += (Math[networkMappings[218]](VM.wnn) * Vn) * 3;
                WM += (Math[networkMappings[147]](VM.wnn) * Vn) * 3;
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(NNM.Mvw, vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            if (VM.wWN > 0) {
                var vMw = 1;
                VM.wWN -= WW;
                if (VM.wWN > 150) value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, wvm.Mnm.WWM((300 - VM.wWN) / 300)));
                else {
                    var Vn = wvm.Mnm.vNM(VM.wWN / 150);
                    vMw += (1 - Vn) * 0.2;
                    value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                }
                Wn.MV(NNM.wWN, vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            Wn.MV(skin[networkMappings[78]], vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vW);
            if (WvM[networkMappings[78]] !== undefined) Wn.MV(WvM[networkMappings[78]], vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vW);
        };;

        function vwWwN(VM) {
            var Mmv = wwW[VM.Nvm & 15];
            nvm[VM.vM][VM.wm].mmm = MNV;
            nvm[VM.vM][VM.wm].nnw = VM.nvW;
            nvm[VM.vM][VM.wm].WnN = undefined;
            var vW = 1;
            var vn = VwN + VM[networkMappings[77]];
            var WM = Mnw + VM[networkMappings[120]];
            if (VM.MnN !== 0) {
                VM.vNn += WW;
                var Vn = wvm.Mnm.VmV(1 - ((VM.vNn - 500) / 400));
                value[networkMappings[192]] = Math[networkMappings[250]](Math[networkMappings[4]](0, Vn), 1);
                Wn.MV(Mmv.vNn, vn, WM, VM[networkMappings[142]], 0, 0, 1);
                Vn = wvm.Mnm.VmV(1 - (VM.vNn / 400));
                vW = Math[networkMappings[250]](1 + (0.5 * (1 - Vn)), 1.5);
                value[networkMappings[192]] = Math[networkMappings[4]](0, Vn);
            }
            if ((VM.Nvm & 16) === 16) {
                VM.Nvm &= ~16;
                VM.Mvw = 250;
                VM.wnn = (Nnmvw * ((VM.Nvm >> 5) & 31)) / 31;
            }
            Mmv.MW(Mmv, VM, vn, WM, vW);
            if (VM.MnN !== 0) {
                if (VM.vNn > 900) VM.MnN = 2;
                value[networkMappings[192]] = 1;
            }
        };;

        function NVWmm(VM) {
            nvm[VM.vM][VM.wm].mmm = MNV;
            nvm[VM.vM][VM.wm].nnw = VM.nvW;
            nvm[VM.vM][VM.wm].WnN = undefined;
            var NNM = mnW[vMM];
            var vVWvV = (VM.Nvm >> 8) & 255;
            var statusEffect = NNM.Mmwnn[vVWvV];
            var WvM = NNM.nwwWM[VM.Nvm & 255];
            var vW = 1;
            var MvvmM = VM[networkMappings[155]] & 254;
            var vn = VwN + VM[networkMappings[77]];
            var WM = Mnw + VM[networkMappings[120]];
            if (VM.MnN !== 0) {
                VM.vNn += WW;
                var Vn = wvm.Mnm.VmV(1 - ((VM.vNn - 500) / 400));
                value[networkMappings[192]] = Math[networkMappings[250]](Math[networkMappings[4]](0, Vn), 1);
                Wn.MV(NNM.vNn, vn, WM, VM[networkMappings[142]], 0, 0, 1);
                Vn = wvm.Mnm.VmV(1 - (VM.vNn / 400));
                vW = Math[networkMappings[250]](1 + (0.5 * (1 - Vn)), 1.5);
                value[networkMappings[192]] = Math[networkMappings[4]](0, Vn);
            }
            if (MvvmM === 2) {
                VM[networkMappings[155]] &= 65281;
                if (MM.Mn.vnV[vVWvV] !== 0) {
                    var NWwvn = Math[networkMappings[68]](Math[networkMappings[211]]() * statusEffect.mwW);
                    MM.nmM(MM.Mn.vnV[vVWvV][NWwvn], statusEffect.vNm, MNM.VNv(game.player[networkMappings[77]], game.player[networkMappings[120]], VM[networkMappings[77]], VM[networkMappings[120]]) / 4, statusEffect.mNW);
                }
                if (VM.nMM <= 0) {
                    VM.nMM = statusEffect.messageHandler;
                    VM.wWM = statusEffect.messageHandler;
                }
            } else if (MvvmM === 6) VM[networkMappings[155]] &= 65281;
            switch (statusEffect[networkMappings[217]]) {
                case 0:
                    mMwWw(NNM, statusEffect, WvM, VM, vW, vn, WM);
                    break;
                case 1:
                    mwMmM(NNM, statusEffect, WvM, VM, vW, vn, WM);
                    break;
                case 2:
                    VNNWn(NNM, statusEffect, WvM, VM, vW, vn, WM);
                    break;
                case 3:
                    nNWMw(NNM, statusEffect, WvM, VM, vW, vn, WM);
                    break;
                case 4:
                    wVWwW(NNM, statusEffect, WvM, VM, vW, vn, WM);
                    break;
                case 5:
                    nnwnV(NNM, statusEffect, WvM, VM, vW, vn, WM);
                    break;
                case 6:
                    WWvnm(NNM, statusEffect, WvM, VM, vW, vn, WM);
                    break;
            }
            if (VM.MnN !== 0) {
                if (VM.vNn > 900) VM.MnN = 2;
                value[networkMappings[192]] = 1;
            }
        };;

        function nWwmw() {
            if (game.player.health !== 0) return;
            var vwvwV = game.player.mwMnW;
            if (vwvwV > 0) {
                if (vwvwV < 500) value[networkMappings[192]] = wvm.Mnm.WWM(vwvwV / 500);
                else if (vwvwV > 1500) value[networkMappings[192]] = wvm.Mnm.WWM(1 - ((vwvwV - 1500) / 500));
                else value[networkMappings[192]] = 1;
                var wwm = (game.player.WwNwm === 1) ? MvMNW : wNN[Mww[game.player.WwNwm].Nw];
                Wn.MV(WwNwm, mWW, 50, 0, 0, 0, 1);
                Wn.MV(wwm, mWW, 50, 0, 0, 0, 1);
                value[networkMappings[192]] = 1;
                game.player.mwMnW -= WW;
            }
            var mnv = game.player.mnv;
            switch (mnv) {
                case 0:
                    if (vwmNV.v !== 1) {
                        if (wVw === 0) vwmNV = Wn.Nvw(mnvNM, vwmNV);
                        else vwmNV = Wn.Nvw(WNWVV, vwmNV);
                        return;
                    }
                    var vW = Vv + (vMwVw * Vv);
                    var VnVWn = vW / Vv;
                    var vw = (Vv * vwmNV[networkMappings[65]]) / 2;
                    var Vw = (Vv * vwmNV[networkMappings[12]]) / 2;
                    var vn = ((VwN + NnN) * vW) - (vw / 2);
                    var WM = Math[networkMappings[4]](10 * Vv, ((((Mnw + wNM) * vW) - (Vw / 2)) - (65 * vW)) - (60 * Vv));
                    if (wVw === 1) {
                        gameManager.MmNVw = vn;
                        gameManager.VVMvM = WM;
                        gameManager.WnMnV = vw;
                        gameManager.vnMMw = Vw;
                    }
                    value[networkMappings[114]](vwmNV, vn, WM, vw, Vw);
                    var Nw = wNN[game.player.Nw];
                    vn = ((VwN + NnN) * VnVWn) - (vw / (2 * Vv));
                    WM = Math[networkMappings[4]](10, ((((Mnw + wNM) * VnVWn) - (Vw / (2 * Vv))) - (65 * VnVWn)) - 60);
                    Wn.MV(Nw, vn + 77, WM + 33, Nw[networkMappings[142]], 0, 0, Nw[networkMappings[56]]);
                    break;
                case 1:
                    var Vn = game.player.MVwNV / game.player.VmWnn;
                    var messageHandler = game.player.VmWnn - game.player.MVwNV;
                    game.player.MVwNV -= WW;
                    if (game.player.MVwNV < 0) {
                        game.player.mnv = -1;
                        return;
                    }
                    if (vMMWW.v !== 1) {
                        vMMWW = Wn.Nvw(wWnwn, vMMWW);
                        return;
                    }
                    if (NVnNV.v !== 1) {
                        NVnNV = Wn.Nvw(VVmWv, NVnNV);
                        return;
                    }
                    if (nwmVn.v !== 1) {
                        nwmVn = Wn.Nvw(VmmmV, nwmVn);
                        return;
                    }
                    var vW = Vv + (vMwVw * Vv);
                    var vw = (Vv * vMMWW[networkMappings[65]]) / 2;
                    var Vw = (Vv * vMMWW[networkMappings[12]]) / 2;
                    var VVN = (VwN + NnN) * vW;
                    var VwW = (Mnw + wNM) * vW;
                    var vn = VVN - (vw / 2);
                    var WM = Math[networkMappings[4]](10 * vW, ((VwW - (Vw / 2)) - (65 * vW)) - (60 * Vv));
                    if (messageHandler < 100) value[networkMappings[192]] = messageHandler / 100;
                    else if (game.player.MVwNV < 100) value[networkMappings[192]] = game.player.MVwNV / 100;
                    value[networkMappings[114]](vMMWW, vn, WM, vw, Vw);
                    value[networkMappings[228]]();
                    value[networkMappings[53]](VVN, Math[networkMappings[4]]((10 * vW) + (Vw / 2), (VwW - (65 * vW)) - (60 * Vv)));
                    value[networkMappings[197]](-Nnmvw * Vn);
                    value[networkMappings[114]](NVnNV, -vw / 2, -Vw / 2, vw, Vw);
                    value[networkMappings[37]]();
                    value[networkMappings[114]](nwmVn, vn, WM, vw, Vw);
                    value[networkMappings[192]] = 1;
                    break;
                case 2:
                    var n = game.player.NVMmm.n;
                    if (n.v !== 1) {
                        if (wVw === 0) game.player.NVMmm.n = Wn.Nvw(game.player.NVMmm[networkMappings[10]], n);
                        else game.player.NVMmm.n = Wn.Nvw(game.player.NVMmm[networkMappings[10]][networkMappings[221]]("e-", "e-mobile-"), n);
                        return;
                    }
                    var vW = Vv + (vMwVw * Vv);
                    var vw = (Vv * n[networkMappings[65]]) / 2;
                    var Vw = (Vv * n[networkMappings[12]]) / 2;
                    var vn;
                    if (game.player.mWWWN === 1) vn = (((VwN + NnN) - 5) * vW) - vw;
                    else vn = ((VwN + NnN) * vW) - (vw / 2);
                    var WM = Math[networkMappings[4]](10 * Vv, ((((Mnw + wNM) * vW) - (Vw / 2)) - (65 * vW)) - (60 * Vv));
                    if (wVw === 1) {
                        gameManager.MmNVw = vn;
                        gameManager.VVMvM = WM;
                        gameManager.WnMnV = vw;
                        gameManager.vnMMw = Vw;
                    }
                    value[networkMappings[114]](n, vn, WM, vw, Vw);
                    if (game.player.mWWWN === 1) {
                        if (vvwWN.v !== 1) {
                            if (wVw === 0) vvwWN = Wn.Nvw(Vwwwv, vvwWN);
                            else vvwWN = Wn.Nvw(WNWVV, vwmNV);
                            return;
                        }
                        var VnVWn = vW / Vv;
                        vw = (Vv * vvwWN[networkMappings[65]]) / 2;
                        Vw = (Vv * vvwWN[networkMappings[12]]) / 2;
                        vn += vw + (10 * Vv);
                        WM = Math[networkMappings[4]](10 * Vv, ((((Mnw + wNM) * vW) - (Vw / 2)) - (65 * vW)) - (60 * Vv));
                        if (wVw === 1) {
                            gameManager.nwmvm = vn;
                            gameManager.VwmNV = WM;
                        }
                        value[networkMappings[114]](vvwWN, vn, WM, vw, Vw);
                        var Nw = wNN[game.player.Nw];
                        vn = ((VwN + NnN) * VnVWn) + 5;
                        WM = Math[networkMappings[4]](10, ((((Mnw + wNM) * VnVWn) - (Vw / (2 * Vv))) - (65 * VnVWn)) - 60);
                        Wn.MV(Nw, vn + 77, WM + 33, Nw[networkMappings[142]], 0, 0, Nw[networkMappings[56]]);
                    }
                    break;
            }
        };;
        var mNWmW = 0;
        var MvmmV = 0;
        var nMNvM = {
            id: -1,
            wWW: -1
        };

        function NWNvw(VM, index, VNv, nW) {
            if ((VMNnW === NmVwW) || (index === Nv.mWWMM)) return;
            else if (VMNnW === nwWwn) nW *= 3;
            if ((mNv[networkMappings[188]][vnmVN][networkMappings[188]] + nW) >= nmmmV) return;
            for (var vM = 0; vM < nW; vM++) {
                var N = Math[networkMappings[211]]();
                var MN = ((N * 10) % 1) * Nnmvw;
                var nvvwN = VNv + (((N * 10000) % 1) * 25);
                VNv += 8;
                MvmmV = (MvmmV + 1) % nmmmV;
                var VvWMv = MvmmV + mNv.vwWmN;
                mNWmW += 1;
                var Vnv = mNv[networkMappings[57]](0, VvWMv, mNWmW, vnmVN);
                VMNWV(Vnv, 0, mNWmW, VvWMv, vnmVN, VM.mNVWM, VM.vnmvv, VM.mNVWM + (Math[networkMappings[218]](MN) * nvvwN), VM.vnmvv + (Math[networkMappings[147]](MN) * nvvwN), Math[networkMappings[68]](N * NWw[index][networkMappings[231]]), ((N * 100) % 1) * 255, index);
            }
        };;

        function VvnMm(VM) {
            var n = NWw[VM[networkMappings[155]]][VM.Nvm];
            if (VM.vNn > 0) {
                VM.vNn = Math[networkMappings[250]](1, VM.vNn + (WW / 500));
                value[networkMappings[192]] = 1 - VM.vNn;
                Wn.MV(n, VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], VM[networkMappings[142]], 0, 0, 1);
                value[networkMappings[192]] = 1;
                if (VM.vNn === 1) {
                    nMNvM[networkMappings[109]] = VM[networkMappings[109]];
                    nMNvM.wWW = VM.wWW;
                }
                return;
            } else if (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 0.01) VM.vNn = 0.001;
            Wn.MV(n, VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], VM[networkMappings[142]], 0, 0, 1);
        };;

        function vMnNM(mN, VM, vn, WM, Wv, vW) {
            VM.wM = (VM.wM + WW) % 500;
            var Vn = VM.wM / 500;
            var vMw = 0.95 + (0.3 * wvm.Mnm.vwW(Vn));
            value[networkMappings[192]] = 1 - Vn;
            Wn.MV(mN.vN[1], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vMw);
            value[networkMappings[192]] = 1;
            Wn.MV(mN.vN[0], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function VmMnw(mN, VM, vn, WM, Wv, vW) {
            var mWwvN = 0;
            var WNvwW = 1;
            if ((VM[networkMappings[155]] & 16) === 16) WNvwW = 0;
            if (((VM.nvW === game.player[networkMappings[109]]) || (((game.player.healthStatus !== -1) && (game.player.healthStatus === game.playersList[VM.nvW].healthStatus)) && (game.playersList[VM.nvW].NmM === game.gameData[game.player.healthStatus].wWW))) || (MNM.VnN(NnN, wNM, VM[networkMappings[77]], VM[networkMappings[120]]) < 52000)) mWwvN = 1;
            if (WNvwW === 0) {
                if (VM.MVw === 0) NWNvw(VM, mN.wMM, mN.wmw, 5);
                if (VM.MVw < 300) {
                    vn += (Math[networkMappings[211]]() * 6) - 4;
                    WM += (Math[networkMappings[211]]() * 6) - 4;
                    VM.MVw += WW;
                }
                if (VM.wM > 0) {
                    VM.wM = Math[networkMappings[4]](0, VM.wM - (WW / 5));
                    value[networkMappings[192]] = wvm.Mnm.vwW(VM.wM / 300);
                    Wn.MV(mN[networkMappings[216]][VM[networkMappings[109]] % 3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                    value[networkMappings[192]] = 1;
                }
                Wn.MV(mN.WnwMM[VM[networkMappings[109]] % 3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            } else if (mWwvN === 1) {
                if (VM.wM === 300) Wn.MV(mN[networkMappings[216]][VM[networkMappings[109]] % 3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                else {
                    VM.wM = Math[networkMappings[250]](300, VM.wM + WW);
                    value[networkMappings[192]] = wvm.Mnm.vwW(VM.wM / 300);
                    Wn.MV(mN[networkMappings[216]][VM[networkMappings[109]] % 3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                    value[networkMappings[192]] = 1;
                }
            } else if ((mWwvN === 0) && (VM.wM > 0)) {
                VM.wM = Math[networkMappings[4]](0, VM.wM - (WW / 5));
                value[networkMappings[192]] = wvm.Mnm.vwW(VM.wM / 300);
                Wn.MV(mN[networkMappings[216]][VM[networkMappings[109]] % 3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                value[networkMappings[192]] = 1;
            }
        };;

        function nNmvM(mN, VM, vn, WM, Wv, vW) {
            var mWwvN = 0;
            if (((VM.nvW === game.player[networkMappings[109]]) || (((game.player.healthStatus !== -1) && (game.player.healthStatus === game.playersList[VM.nvW].healthStatus)) && (game.playersList[VM.nvW].NmM === game.gameData[game.player.healthStatus].wWW))) || (MNM.VnN(NnN, wNM, VM[networkMappings[77]], VM[networkMappings[120]]) < 22500)) mWwvN = 1;
            if (mWwvN === 1) {
                if (VM.wM === 300) Wn.MV(mN.vN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                else {
                    VM.wM = Math[networkMappings[250]](300, VM.wM + WW);
                    value[networkMappings[192]] = wvm.Mnm.vwW(VM.wM / 300);
                    Wn.MV(mN.vN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                    value[networkMappings[192]] = 1;
                }
            } else if ((mWwvN === 0) && (VM.wM > 0)) {
                VM.wM = Math[networkMappings[4]](0, VM.wM - (WW / 5));
                value[networkMappings[192]] = wvm.Mnm.vwW(VM.wM / 300);
                Wn.MV(mN.vN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                value[networkMappings[192]] = 1;
            }
        };;

        function NNvnW(mN, VM, vn, WM, Wv, vW) {
            var mWwvN = 0;
            if (((VM.nvW === game.player[networkMappings[109]]) || (((game.player.healthStatus !== -1) && (game.player.healthStatus === game.playersList[VM.nvW].healthStatus)) && (game.playersList[VM.nvW].NmM === game.gameData[game.player.healthStatus].wWW))) || (MNM.VnN(NnN, wNM, VM[networkMappings[77]], VM[networkMappings[120]]) < 52000)) mWwvN = 1;
            if (mWwvN === 1) {
                if (VM.wM === 300) Wn.MV(mN.vN[VM[networkMappings[109]] % 3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                else {
                    VM.wM = Math[networkMappings[250]](300, VM.wM + WW);
                    value[networkMappings[192]] = wvm.Mnm.vwW(VM.wM / 300);
                    Wn.MV(mN.vN[VM[networkMappings[109]] % 3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                    value[networkMappings[192]] = 1;
                }
            } else if ((mWwvN === 0) && (VM.wM > 0)) {
                VM.wM = Math[networkMappings[4]](0, VM.wM - (WW / 5));
                value[networkMappings[192]] = wvm.Mnm.vwW(VM.wM / 300);
                Wn.MV(mN.vN[VM[networkMappings[109]] % 3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                value[networkMappings[192]] = 1;
            }
        };;

        function wvvvv(mN, VM, vn, WM, Wv, vW) {
            Wn.MV(mN.vN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function nnmMV(mN, VM, vn, WM, Wv, vW) {
            Wn.MV(mN.vN[VM.mmN], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function VVWVW(mN, VM, vn, WM, Wv, vW) {
            if (VM.mmN > 0) Wn.MV(mN.Mwv[VM.mmN - 1], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, 0, 0, 0, vW);
            else Wn.MV(mN.vN[NvMNm(VM)], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, 0, 0, 0, vW);
        };;

        function nvv(mN, VM, mMwVN) {
            if ((((VM.MnN === 0) && (game.player.mnv !== 1)) && (game.player.wvw !== 1)) && (((mMwVN === 0) || (VM.nvW === game.player[networkMappings[109]])) || (((game.player.healthStatus !== -1) && (game.player.healthStatus === game.playersList[VM.nvW].healthStatus)) && (game.playersList[VM.nvW].NmM === game.gameData[game.player.healthStatus].wWW)))) {
                var VNv = MNM.VnN(NnN, wNM, VM[networkMappings[77]], VM[networkMappings[120]]);
                if (VNv < VnVWM) {
                    game.player.wvv = mN.wvv;
                    game.player.MWnvV = VM[networkMappings[109]];
                    game.player.mNwVm = VM.nvW;
                    game.player.vNnWV = mN.wvn;
                    VnVWM = VNv;
                    if (game.player.mnv === 0) game.player.mWWWN = 1;
                    game.player.mnv = 2;
                    game.player.NVMmm = mN.Mmn;
                    return 1;
                }
            }
            return 0;
        };;

        function wmMwM(mN, VM, vn, WM, Wv, vW) {
            Wn.MV(mN.wMWVw, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, 1);
            var MvM = (VM[networkMappings[155]] >> 4) & 15;
            if (VM.mNn !== MvM) {
                VM.mNn = MvM;
                VM.wM = 0;
            }
            VM.wM = VM.wM + WW;
            VM.wWN = (VM.wWN + WW) % 1000;
            var vW = 1 + (0.03 * ((VM.wWN < 500) ? (VM.wWN / 500) : (1 - ((VM.wWN - 500) / 500))));
            if (MvM === 0) {
                value[networkMappings[192]] = wvm.Mnm.vwW(VM.wM / mN.Wnwvn);
                Wn.MV(mN.vN[0], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                value[networkMappings[192]] = 1;
            } else if (VM.wM < mN.Wnwvn) {
                var wNMvW = wvm.Mnm.vwW(VM.wM / mN.Wnwvn);
                value[networkMappings[192]] = 1 - wNMvW;
                Wn.MV(mN.vN[MvM - 1], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                value[networkMappings[192]] = wNMvW;
                Wn.MV(mN.vN[MvM], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                value[networkMappings[192]] = 1;
            } else Wn.MV(mN.vN[MvM], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function MWvwV(mN, VM, vn, WM, Wv, vW) {
            var MvM = (VM[networkMappings[155]] >> 4) & 15;
            VM.wM = (VM.wM + WW) % 1000;
            var vW = 1 + (0.01 * ((VM.wM < 500) ? (VM.wM / 500) : (1 - ((VM.wM - 500) / 500))));
            Wn.MV(mN.vN[MvM], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function VmMVn(mN, VM, vn, WM, Wv, vW) {
            var MvM = (VM[networkMappings[155]] >> 4) & 15;
            VM.wM = (VM.wM + WW) % 1000;
            var vW = 1 + (0.03 * ((VM.wM < 500) ? (VM.wM / 500) : (1 - ((VM.wM - 500) / 500))));
            Wn.MV(mN.vN[MvM], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function nMMWN(mN, VM, vn, WM, Wv, vW) {
            var WNV = (VM.mmN > 0) ? mN.Mwv[VM.mmN - 1] : mN.vN[vWnVv(VM, Wv)];
            var n = WNV.n;
            if (n.v !== 1) {
                WNV.n = Wn.Nvw(WNV[networkMappings[10]], WNV.n);
                return;
            }
            var vNw = ((Vv * n[networkMappings[65]]) / 2) * vW;
            var mVn = ((Vv * n[networkMappings[12]]) / 2) * vW;
            value[networkMappings[228]]();
            value[networkMappings[53]](Vv * ((VwN + VM[networkMappings[77]]) + vn), Vv * ((Mnw + VM[networkMappings[120]]) + WM));
            value[networkMappings[197]](Wv * Vnn);
            value[networkMappings[53]]((mN.WnVmn * Vv) - (vNw / 2), (mN.vnNvV * Vv) - (mVn / 2));
            value[networkMappings[114]](n, -mN.WnVmn * Vv, -mN.vnNvV * Vv, vNw, mVn);
            value[networkMappings[37]]();
        };;

        function WnWwM(mN, VM, vn, WM, Wv, vW) {
            value[networkMappings[192]] = 1;
            var WNWnv = (VM[networkMappings[155]] >> 7) & 1;
            if (WNWnv === 1) VM.wWM = Math[networkMappings[250]](500, VM.wWM + WW);
            else if (VM.wWM > 0) VM.wWM = Math[networkMappings[4]](0, VM.wWM - WW);
            if ((VM.wWM > 0) && (VM.wWM !== 500)) {
                value[networkMappings[192]] = wvm.Mnm.vNM(VM.wWM / 500);
                Wn.MV(mN.vN[1][VM.mmN], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                value[networkMappings[192]] = wvm.Mnm.vNM(1 - (VM.wWM / 500));
                Wn.MV(mN.vN[0][VM.mmN], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                value[networkMappings[192]] = 1;
            } else Wn.MV(mN.vN[WNWnv][VM.mmN], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function VvWmn(mN, VM, vn, WM, Wv, vW) {
            nvv(mN, VM, 0);
            Wn.MV(mN.vN[(VM[networkMappings[155]] >> 4) & 1], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function mvnmw(mN, VM, vn, WM, Wv, vW) {
            nvv(mN, VM, 0);
            Wn.MV(mN.vN[(VM[networkMappings[155]] >> 4) & 3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function vWWnv(mN, VM, vn, WM, Wv, vW) {
            nvv(mN, VM, 0);
            var wnm = (VM[networkMappings[155]] >> 7) & 1;
            if (wnm === 1) VM.wWM = Math[networkMappings[250]](500, VM.wWM + WW);
            else if (VM.wWM > 0) VM.wWM = Math[networkMappings[4]](0, VM.wWM - WW);
            if (VM.wWM > 0) {
                NWmNV[WMmNv++] = VM;
                Wn.MV(mN.WVmwV[(VM[networkMappings[155]] >> 4) & 7], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            } else Wn.MV(mN.vN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function nNmWV(VM) {
            var mN = Mww[VM.Nvm >> 7];
            value[networkMappings[192]] = wvm.Mnm.vNM(VM.wWM / 500);
            VM.mNn = (VM.mNn + WW) % 5000;
            var wM = VM.mNn;
            var vW = 1 + (0.09 * ((wM < 2500) ? (wM / 2500) : (1 - ((wM - 2500) / 2500))));
            Wn.MV(mN.Vwmmv[(VM[networkMappings[155]] >> 4) & 7], VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], 0, 0, 0, vW);
            value[networkMappings[192]] = 1;
        };;

        function VmWVW(mN, VM, vn, WM, Wv, vW) {
            var WMNVN = (VM[networkMappings[155]] >> 4) & 1;
            var VWMWN = (VM.nvW === 0) ? 0 : 1;
            if ((nvv(mN, VM, VWMWN) === 1) && (WMNVN === 1)) game.player.NVMmm = mN.NMMwM;
            if (VM.nMM !== WMNVN) {
                VM.wWM = 500;
                VM.nMM = WMNVN;
            }
            if (VM.wWM > 0) VM.wWM = Math[networkMappings[4]](0, VM.wWM - WW);
            var MN = mN[networkMappings[142]];
            if (WMNVN === 0) MN *= wvm.Mnm.vwW(VM.wWM / 500);
            else MN *= wvm.Mnm.vwW(1 - (VM.wWM / 500));
            var WNV = (VM.mmN > 0) ? mN.Mwv[VM.mmN - 1] : mN.vN;
            var n = WNV.n;
            if (n.v !== 1) {
                WNV.n = Wn.Nvw(WNV[networkMappings[10]], WNV.n);
                return;
            }
            var vNw = ((Vv * n[networkMappings[65]]) / 2) * vW;
            var mVn = ((Vv * n[networkMappings[12]]) / 2) * vW;
            value[networkMappings[228]]();
            value[networkMappings[53]](Vv * ((VwN + VM[networkMappings[77]]) + vn), Vv * ((Mnw + VM[networkMappings[120]]) + WM));
            value[networkMappings[197]](Wv * Vnn);
            value[networkMappings[53]]((mN.WnVmn * Vv) - (vNw / 2), (mN.vnNvV * Vv) - (mVn / 2));
            value[networkMappings[197]](MN);
            value[networkMappings[114]](n, -mN.WnVmn * Vv, -mN.vnNvV * Vv, vNw, mVn);
            value[networkMappings[37]]();
            if ((VM[networkMappings[155]] & 32) === 32) {
                VM[networkMappings[155]] -= 32;
                if (((VM.wM === 0) && (vn === 0)) && (WM === 0)) VM.wM = 600;
            }
            if (VM.wM > 0) {
                if (vNwMw.v !== 1) {
                    vNwMw = Wn.Nvw(VWWWm, vNwMw);
                    return;
                }
                if (VM.wM > 400) value[networkMappings[192]] = wvm.Mnm.vNM(1 - ((VM.wM - 400) / 200));
                else if (VM.wM < 200) value[networkMappings[192]] = wvm.Mnm.vNM(VM.wM / 200);
                var WM = Vv * (((VM.vM * mVV) + Mnw) + nMm);
                var vn = Vv * (((VM.wm * mVV) + VwN) + nMm);
                var vw = (Vv * vNwMw[networkMappings[65]]) / 2;
                var Vw = (Vv * vNwMw[networkMappings[12]]) / 2;
                value[networkMappings[114]](vNwMw, vn - (vw / 2), WM - (Vw / 2), vw, Vw);
                value[networkMappings[192]] = 1;
                VM.wM = Math[networkMappings[4]](0, VM.wM - WW);
            }
        };;

        function MVNvV(mN, VM, vn, WM, Wv, vW) {
            var WVWNN = nvm[VM.vM][VM.wm];
            WVWNN.mmm = 0;
            WVWNN.vwVVn = MNV;
            WVWNN.nvW = VM.nvW;
            if ((WVWNN.vNW !== MNV) || (WVWNN.VmMnV === 1)) {
                if (VM.mmN > 0) Wn.MV(mN.Mwv[VM.mmN - 1], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, 0, 0, 0, vW);
                else Wn.MV(mN.vN[WwnVW(VM)], VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], 0, 0, 0, vW);
            }
        };;

        function nVnnm(mN, VM, vn, WM, Wv, vW) {
            var vvM = (VM[networkMappings[155]] >> 4) & 1;
            var VNnNv = Mww[mN[networkMappings[109]]].wVm[VM.wVm];
            if (vvM === 1) VM.nMM = Math[networkMappings[250]](500, VM.nMM + WW);
            else if (VM.nMM > 0) VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
            if (((vvM === 0) && (VNnNv.vMvwW === 1)) && (nvv(VNnNv, VM, 0) === 1)) game.player.NVMmm = vVmnn;
            Wn.MV(VNnNv.vN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            if (VM.nMM > 0) nvVwm(VM, vn, WM);
        };;

        function Nnvmm(mN, VM, vn, WM, Wv, vW) {
            var VNnNv = Mww[mN[networkMappings[109]]].wVm[VM.wVm];
            Wn.MV(VNnNv.vN, VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], 0, 0, 0, vW);
        };;

        function NMvnN(Mmv, VM, vn, WM, vW) {
            var MvvmM = VM[networkMappings[155]] & 254;
            if (MvvmM === 2) {
                VM[networkMappings[155]] &= 65281;
                if (VM.nMM <= 0) {
                    VM.nMM = Mmv.vMVWN;
                    VM.wWM = Mmv.vMVWN;
                    var NWwvn = Math[networkMappings[68]](Math[networkMappings[211]]() * 3);
                    MM.nmM(MM.Mn.vnV[0][NWwvn], 0.5, MNM.VNv(game.player[networkMappings[77]], game.player[networkMappings[120]], VM[networkMappings[77]], VM[networkMappings[120]]) / 3.5, 0);
                }
            }
            var vVm = 0;
            var Nnw = 0;
            var WnW = 0;
            var MVN = 0;
            if (VM.nMM > 0) {
                VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
                VM.nMM = Math[networkMappings[250]](VM.nMM, Mmv.vMVWN);
                Vn = (VM.nMM > Mmv.nWNvN) ? (1 - ((VM.nMM - Mmv.nWNvN) / (Mmv.vMVWN - Mmv.nWNvN))) : (VM.nMM / Mmv.nWNvN);
                vVm = (VM.MVw * wvm.Mnm.vwW(Vn)) * 0.55;
                MVN = Vn * 6;
                if (VM.MVw === 1) Nnw = Vn * 25;
                else WnW = Vn * 25;
                if (VM.nMM === 0) VM.MVw *= -1;
            } else if (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 1) {
                VM.wM = (VM.wM + WW) % 1500;
                if (VM.mNn !== 0) {
                    if (VM.mNn < 750) VM.mNn = 1500 - VM.mNn;
                    VM.mNn = VM.mNn + WW;
                    if (VM.mNn > 1500) VM.mNn = 0;
                }
            } else {
                VM.mNn = (VM.mNn + WW) % 1500;
                if (VM.mNn > 1500) {
                    VM.wWN *= -1;
                    VM.mNn = VM.mNn % 1500;
                }
                if (VM.wM !== 0) {
                    if (VM.wM < 750) VM.wM = 1500 - VM.wM;
                    VM.wM = VM.wM + WW;
                    if (VM.wM > 1500) VM.wM = 0;
                }
            }
            var wM = Mmv.wM * ((VM.wM < 750) ? (VM.wM / 750) : (1 - ((VM.wM - 750) / 750)));
            var Vm = Mmv.VwVwW * ((VM.mNn < 750) ? (VM.mNn / 750) : (1 - ((VM.mNn - 750) / 750)));
            Wn.MV(Mmv.vvw, vn, WM, ((Mmv.vvw[networkMappings[142]] + VM[networkMappings[142]]) + wM) + vVm, (Mmv.vvw[networkMappings[77]] + (Vm * VM.wWN)) + WnW, Mmv.vvw[networkMappings[120]], vW);
            Wn.MV(Mmv.nVW, vn, WM, ((-Mmv.nVW[networkMappings[142]] + VM[networkMappings[142]]) - wM) + vVm, (Mmv.nVW[networkMappings[77]] - (Vm * VM.wWN)) + Nnw, Mmv.nVW[networkMappings[120]], vW);
            if (VM.Mvw > 0) {
                var vMw = 1;
                VM.Mvw -= WW;
                var Vn = 0;
                if (VM.Mvw > 150) Vn = wvm.Mnm.WWM((300 - VM.Mvw) / 300);
                else {
                    Vn = wvm.Mnm.vNM(VM.Mvw / 150);
                    vMw += (1 - Vn) * 0.2;
                }
                vn += (Math[networkMappings[218]](VM.wnn) * Vn) * 10;
                WM += (Math[networkMappings[147]](VM.wnn) * Vn) * 10;
                value[networkMappings[192]] = Math[networkMappings[250]](1, Math[networkMappings[4]](0, Vn));
                Wn.MV(Mmv.Mvw, vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vMw);
                value[networkMappings[192]] = 1;
            }
            Wn.MV(Mmv[networkMappings[78]], vn, WM, VM[networkMappings[142]] + (vVm / 1.5), MVN, 0, vW);
        };;

        function Nwmwn(mN, VM, vn, WM, Wv, vW) {
            var vvM = (VM[networkMappings[155]] >> 4) & 1;
            if (vvM === 1) VM.nMM = Math[networkMappings[250]](500, VM.nMM + WW);
            else if (VM.nMM > 0) VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
            if (vvM === 0) nvv(mN, VM, 0);
            Wn.MV(mN.vN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            if (VM.nMM > 0) nvVwm(VM, vn, WM);
        };;

        function mWvvm(mN, VM, vn, WM, Wv, vW) {
            var vM = (Wv + 1) % 2;
            var wm = Wv % 2;
            nvm[VM.vM + vM][VM.wm + wm].mmm = MNV;
            nvm[VM.vM - vM][VM.wm - wm].mmm = MNV;
            nvm[VM.vM + vM][VM.wm + wm].nnw = VM.nvW;
            nvm[VM.vM - vM][VM.wm - wm].nnw = VM.nvW;
            nvm[VM.vM + vM][VM.wm + wm].WnN = undefined;
            nvm[VM.vM - vM][VM.wm - wm].WnN = undefined;
            nvv(mN, VM, 0);
            Wn.MV(mN.vN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
        };;

        function NmMnW(mN, VM, vn, WM, Wv, vW) {
            var vvM = (VM[networkMappings[155]] >> 4) & 1;
            if (vvM === 1) VM.nMM = Math[networkMappings[250]](500, VM.nMM + WW);
            else if (VM.nMM > 0) VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
            if (vvM === 0) nvv(mN, VM, 0);
            var wnm = (VM[networkMappings[155]] >> 5) & 1;
            if (wnm === 1) VM.wWM = Math[networkMappings[250]](10000, VM.wWM + WW);
            else if (VM.wWM > 0) VM.wWM = Math[networkMappings[4]](0, VM.wWM - WW);
            var Vn = 0;
            if (VM.wWM > 0) {
                Vn = wvm.Mnm.vNM(VM.wWM / 10000);
                VM.wWN += (Vn * WW) / 300;
                Wn.MV(mN.vN[1], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                Wn.MV(mN.vN[2], ((VwN + VM[networkMappings[77]]) + vn) + mN.MVMMm[Wv][0], ((Mnw + VM[networkMappings[120]]) + WM) + mN.MVMMm[Wv][1], (Wv * Vnn) + VM.wWN, 0, 0, vW);
                Wn.MV(mN.vN[3], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            } else Wn.MV(mN.vN[0], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            if (VM.nMM > 0) nvVwm(VM, vn, WM);
        };;

        function MVvNV(mN, VM, vn, WM, Wv, vW) {
            var vvM = (VM[networkMappings[155]] >> 4) & 1;
            if (vvM === 1) VM.nMM = Math[networkMappings[250]](500, VM.nMM + WW);
            else if (VM.nMM > 0) VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
            if (vvM === 0) nvv(mN, VM, 0);
            var wnm = (VM[networkMappings[155]] >> 5) & 1;
            if (wnm === 1) VM.wWM = Math[networkMappings[250]](10000, VM.wWM + WW);
            else if (VM.wWM > 0) VM.wWM = Math[networkMappings[4]](0, VM.wWM - WW);
            var Vn = 0;
            if (VM.wWM > 0) {
                Vn = wvm.Mnm.vNM(VM.wWM / 10000);
                vn += ((Math[networkMappings[211]]() * 2) - 1) * Vn;
                WM += ((Math[networkMappings[211]]() * 2) - 1) * Vn;
                VM.wWN += (Vn * WW) / 300;
                Wn.MV(mN.vN[1], ((VwN + VM[networkMappings[77]]) + vn) + mN.MVMMm[Wv][0], ((Mnw + VM[networkMappings[120]]) + WM) + mN.MVMMm[Wv][1], (Wv * Vnn) + VM.wWN, 0, 0, vW);
                Wn.MV(mN.vN[0], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            } else Wn.MV(mN.vN[2], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            if (VM.nMM > 0) nvVwm(VM, vn, WM);
        };;

        function wmvvm(mN, VM, vn, WM, Wv, vW) {
            var vvM = (VM[networkMappings[155]] >> 4) & 1;
            if (vvM === 1) VM.nMM = Math[networkMappings[250]](500, VM.nMM + WW);
            else if (VM.nMM > 0) VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
            if (vvM === 0) nvv(mN, VM, 0);
            var wnm = (VM[networkMappings[155]] >> 5) & 1;
            if (wnm === 1) VM.wWM = Math[networkMappings[250]](10000, VM.wWM + WW);
            else if (VM.wWM > 0) VM.wWM = Math[networkMappings[4]](0, VM.wWM - WW);
            var Vn = 0;
            if (VM.wWM > 0) {
                Vn = wvm.Mnm.vNM(VM.wWM / 10000);
                vn += ((Math[networkMappings[211]]() * 2) - 1) * Vn;
                WM += ((Math[networkMappings[211]]() * 2) - 1) * Vn;
                VM.wWN += (Vn * WW) / 300;
                Wn.MV(mN.vN[1], ((VwN + VM[networkMappings[77]]) + vn) + mN.MVMMm[Wv][0], ((Mnw + VM[networkMappings[120]]) + WM) + mN.MVMMm[Wv][1], (Wv * Vnn) + VM.wWN, 0, 0, vW);
                Wn.MV(mN.vN[0], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            } else Wn.MV(mN.vN[2], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            if (VM.nMM > 0) nvVwm(VM, vn, WM);
        };;

        function nvVwm(VM, vn, WM) {
            VM.wM = (VM.wM + WW) % 1000;
            var vW = 1 + (0.15 * ((VM.wM < 500) ? (VM.wM / 500) : (1 - ((VM.wM - 500) / 500))));
            vW *= Vv;
            if (vNwMw.v !== 1) {
                vNwMw = Wn.Nvw(VWWWm, vNwMw);
                return;
            }
            value[networkMappings[192]] = wvm.Mnm.vNM(VM.nMM / 500);
            var WM = Vv * (((VM.vM * mVV) + Mnw) + nMm);
            var vn = Vv * (((VM.wm * mVV) + VwN) + nMm);
            var vw = (vW * vNwMw[networkMappings[65]]) / 2;
            var Vw = (vW * vNwMw[networkMappings[12]]) / 2;
            value[networkMappings[114]](vNwMw, vn - (vw / 2), WM - (Vw / 2), vw, Vw);
            value[networkMappings[192]] = 1;
        };;

        function vWwmw(mN, VM, vn, WM, Wv, vW) {
            var vvM = (VM[networkMappings[155]] >> 4) & 1;
            if (vvM === 1) VM.nMM = Math[networkMappings[250]](500, VM.nMM + WW);
            else if (VM.nMM > 0) VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
            if (vvM === 0) nvv(mN, VM, 0);
            var wnm = (VM[networkMappings[155]] >> 5) & 1;
            if (wnm === 1) VM.wWM = Math[networkMappings[250]](10000, VM.wWM + WW);
            else if (VM.wWM > 0) {
                VM.wWM = Math[networkMappings[4]](0, VM.wWM - WW);
            }
            var Vn = 0;
            if (VM.wWM > 0) {
                Vn = wvm.Mnm.vNM(VM.wWM / 10000);
                vn += ((Math[networkMappings[211]]() * 2) - 1) * Vn;
                WM += ((Math[networkMappings[211]]() * 2) - 1) * Vn;
                Wn.MV(mN.vN[0], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            } else Wn.MV(mN.vN[1], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            if (VM.nMM > 0) nvVwm(VM, vn, WM);
        };;

        function wWVVN(mN, VM, vn, WM, Wv, vW) {
            var vM = (Wv + 1) % 2;
            var wm = Wv % 2;
            nvm[VM.vM + vM][VM.wm + wm].mmm = MNV;
            nvm[VM.vM - vM][VM.wm - wm].mmm = MNV;
            nvm[VM.vM + vM][VM.wm + wm].nnw = VM.nvW;
            nvm[VM.vM - vM][VM.wm - wm].nnw = VM.nvW;
            nvm[VM.vM + vM][VM.wm + wm].WnN = undefined;
            nvm[VM.vM - vM][VM.wm - wm].WnN = undefined;
            var vvM = (VM[networkMappings[155]] >> 4) & 1;
            if (vvM === 1) VM.nMM = Math[networkMappings[250]](500, VM.nMM + WW);
            else if (VM.nMM > 0) VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
            if (vvM === 0) nvv(mN, VM, 0);
            var wnm = (VM[networkMappings[155]] >> 5) & 1;
            if (wnm === 1) VM.wWM = Math[networkMappings[250]](10000, VM.wWM + WW);
            else if (VM.wWM > 0) {
                VM.wWM = Math[networkMappings[4]](0, VM.wWM - WW);
            }
            var Vn = 0;
            if (VM.wWM > 0) {
                Vn = wvm.Mnm.vNM(VM.wWM / 10000);
                vn += ((Math[networkMappings[211]]() * 2) - 1) * Vn;
                WM += ((Math[networkMappings[211]]() * 2) - 1) * Vn;
                Wn.MV(mN.vN[1], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            } else Wn.MV(mN.vN[0], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            if (VM.nMM > 0) nvVwm(VM, vn, WM);
        };;

        function nmVVm(mN, VM, vn, WM, Wv, vW) {
            var vM = (Wv + 1) % 2;
            var wm = Wv % 2;
            nvm[VM.vM + vM][VM.wm + wm].mmm = MNV;
            nvm[VM.vM - vM][VM.wm - wm].mmm = MNV;
            nvm[VM.vM + vM][VM.wm + wm].nnw = VM.nvW;
            nvm[VM.vM - vM][VM.wm - wm].nnw = VM.nvW;
            nvm[VM.vM + vM][VM.wm + wm].WnN = undefined;
            nvm[VM.vM - vM][VM.wm - wm].WnN = undefined;
            var vvM = (VM[networkMappings[155]] >> 4) & 1;
            if (vvM === 1) VM.nMM = Math[networkMappings[250]](500, VM.nMM + WW);
            else if (VM.nMM > 0) VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
            if (vvM === 0) nvv(mN, VM, 0);
            var wnm = (VM[networkMappings[155]] >> 5) & 1;
            if (wnm === 1) VM.wWM = 1 + (VM.wWM + (WW % 300000));
            else VM.wWM = 0;
            var Vn = 0;
            if (VM.wWM > 0) {
                Wn.MV(mN.vN[1 + (Math[networkMappings[68]](VM.wWM / 500) % 3)], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
                var wnm = mN.wnm[Math[networkMappings[68]](VM.wWM / 50) % mN.wnm[networkMappings[231]]];
                if (wnm !== 0) Wn.MV(wnm, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            } else Wn.MV(mN.vN[0], (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            if (VM.nMM > 0) nvVwm(VM, vn, WM);
        };;

        function WVwVm(VM) {
            value[networkMappings[192]] = wvm.Mnm.vNM(VM.wWM / 500);
            VM.wWN = (VM.wWN + WW) % 1000;
            for (var vM = 0; vM < 3; vM++) {
                var wM = (VM.wWN + (vM * 333)) % 1000;
                var vW = 1 + (0.15 * ((wM < 500) ? (wM / 500) : (1 - ((wM - 500) / 500))));
                Wn.MV(vNmWV[vM], (VwN + VM[networkMappings[77]]) + NNVwM[vM], (Mnw + VM[networkMappings[120]]) + mNWnw[vM], 0, 0, 0, vW);
            }
            VM.mNn = (VM.mNn + WW) % 5000;
            var wM = VM.mNn;
            var vW = 1 + (0.15 * ((wM < 2500) ? (wM / 2500) : (1 - ((wM - 2500) / 2500))));
            Wn.MV(vNmWV[3], (VwN + VM[networkMappings[77]]) + NNVwM[3], (Mnw + VM[networkMappings[120]]) + mNWnw[3], 0, 0, 0, vW);
            value[networkMappings[192]] = 1;
        };;

        function nMnwv(mN, VM, vn, WM, Wv, vW) {
            var vvM = (VM[networkMappings[155]] >> 4) & 1;
            if (vvM === 1) VM.nMM = Math[networkMappings[250]](500, VM.nMM + WW);
            else if (VM.nMM > 0) VM.nMM = Math[networkMappings[4]](0, VM.nMM - WW);
            if (vvM === 0) nvv(mN, VM, 0);
            Wn.MV(mN.vN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, Wv * Vnn, 0, 0, vW);
            var wnm = (VM[networkMappings[155]] >> 5) & 1;
            if (wnm === 1) VM.wWM = Math[networkMappings[250]](500, VM.wWM + WW);
            else if (VM.wWM > 0) VM.wWM = Math[networkMappings[4]](0, VM.wWM - WW);
            if (VM.wWM > 0) NWmNV[WMmNv++] = VM;
            if (VM.nMM > 0) nvVwm(VM, vn, WM);
        };;

        function MWnvn(VM) {
            var n = mnW[WmWMw].Vmwvm;
            var NNM = Math[networkMappings[68]](VM.NvV / 70);
            if (NNM < 10) {
                if (VM.NvV === 0) {
                    if (VN.wnNWn !== -2) VN.wnNWn = 20;
                    MM.nmM(MM.Mn.identifier, 0.7, MNM.VNv(game.player[networkMappings[77]], game.player[networkMappings[120]], VM[networkMappings[77]], VM[networkMappings[120]]) / 4);
                }
                Wn.MV(n[NNM], VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], 0, 0, 0, 1);
            }
            VM.NvV += WW;
        };;

        function wnnWN(VM) {
            nvm[VM.vM][VM.wm].mmm = MNV;
            nvm[VM.vM][VM.wm].nnw = VM.nvW;
            nvm[VM.vM][VM.wm].WnN = undefined;
            var VNmmM = nwv[(VM.Nvm >> 5) & 31];
            var mv = VNmmM[networkMappings[217]][(VM.Nvm >> 10) & 7];
            var vW = 1;
            if (VM.MnN !== 0) {
                if (VM.vNn === 0) {
                    if ((VNmmM.MmV !== 0) && (wmMNn[VNmmM.MmV] === 0)) {
                        MM.nmM(MM.Mn.currentDamage[VNmmM.MmV], 1, MNM.VNv(game.player[networkMappings[77]], game.player[networkMappings[120]], VM[networkMappings[77]], VM[networkMappings[120]]) / 2.5);
                        wmMNn[VNmmM.MmV] = 1;
                    }
                    NWNvw(VM, VNmmM.wMM, mv.wmw, mv.Vnv);
                }
                VM.vNn += WW;
                var Vn = Math[networkMappings[4]](0, wvm.Mnm.VmV(1 - (VM.vNn / 300)));
                value[networkMappings[192]] = Vn;
                vW = Math[networkMappings[250]](1 + (0.35 * (1 - Vn)), 1.35);
            } else if (VM.NvV < 700) {
                if ((VM.NvV === 0) && (mv.VmW !== undefined)) {
                    if (VvMMw === 0) VM.wM = Math[networkMappings[68]](Math[networkMappings[211]]() * 6000);
                    else {
                        VM.wWN = Math[networkMappings[68]](Math[networkMappings[211]]() * 6000);
                        VM.wM = 3000;
                    }
                }
                var Vn = Math[networkMappings[250]](1, wvm.Mnm.VmV(VM.NvV / 700));
                value[networkMappings[192]] = Vn;
                vW = (0.5 * Vn) + 0.5;
            }
            if ((VM[networkMappings[155]] & 2) === 2) {
                if ((VNmmM.mVW !== 0) && (wmMNn[VNmmM.mVW] === 0)) {
                    MM.nmM(MM.Mn.currentDamage[VNmmM.mVW], 1, MNM.VNv(game.player[networkMappings[77]], game.player[networkMappings[120]], VM[networkMappings[77]], VM[networkMappings[120]]) / 2.8);
                    wmMNn[VNmmM.mVW] = 1;
                }
                VM.Mvw = 250;
                if (VM.MVw <= 0) VM.MVw = 300;
                VM.wnn = (Nnmvw * (VM.Nvm & 31)) / 31;
                VM[networkMappings[155]] &= ~2;
                NWNvw(VM, VNmmM.wMM, mv.wmw, 1);
            }
            var vn = 0;
            var WM = 0;
            if (VM.Mvw > 0) {
                var Mvw = (VM.Mvw > 200) ? ((20 * (250 - VM.Mvw)) / 50) : ((20 * VM.Mvw) / 200);
                vn = Math[networkMappings[218]](VM.wnn) * Mvw;
                WM = Math[networkMappings[147]](VM.wnn) * Mvw;
                VM.Mvw -= WW;
            }
            if (((VM.wM === 3000) && (VvMMw !== 0)) && (VM.Mvw === 0)) {
                Wn.MV(mv.nNnMN, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, VM[networkMappings[142]], 0, 0, vW);
                if (VM.MnN !== 0) {
                    if (VM.vNn > 300) VM.MnN = 2;
                    value[networkMappings[192]] = 1;
                } else if (VM.NvV < 700) {
                    VM.NvV += WW;
                    value[networkMappings[192]] = 1;
                }
                return;
            }
            Wn.MV(mv.n, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, VM[networkMappings[142]], 0, 0, vW);
            if (mv.VmW !== undefined) {
                vn = 0;
                WM = 0;
                if (VM.MVw > 0) {
                    var Mvw = (VM.MVw > 250) ? (10 * wvm.Mnm.WWM((300 - VM.MVw) / 250)) : (10 * wvm.Mnm.vNM(VM.MVw / 250));
                    vn = Math[networkMappings[218]](VM.wnn) * Mvw;
                    WM = Math[networkMappings[147]](VM.wnn) * Mvw;
                    VM.MVw -= WW;
                }
                if (VvMMw === 0) {
                    if (VM.wWN > 0) VM.wWN = Math[networkMappings[4]](0, VM.wWN - WW);
                    else VM.wM += WW;
                    if (VM.wM > 6000) VM.wM = 0;
                    if (VM.wM > 3000) vW += (0.025 * (VM.wM - 3000)) / 3000;
                    else vW += 0.025 - ((0.025 * VM.wM) / 3000);
                } else {
                    if (VM.wWN === 0) VM.wWN = VM.wM;
                    if (VM.wM > 6000) VM.wM = 0;
                    if (VM.wM > 3000) {
                        VM.wM = Math[networkMappings[4]](3000, VM.wM - WW);
                        vW += (0.025 * (VM.wM - 3000)) / 3000;
                    } else if (VM.wM < 3000) {
                        VM.wM = Math[networkMappings[250]](3000, VM.wM + WW);
                        vW += 0.025 - ((0.025 * VM.wM) / 3000);
                    }
                }
                Wn.MV(mv.VmW, (VwN + VM[networkMappings[77]]) + vn, (Mnw + VM[networkMappings[120]]) + WM, VM[networkMappings[142]], 0, 0, vW);
            }
            if (VM.MnN !== 0) {
                if (VM.vNn > 300) VM.MnN = 2;
                value[networkMappings[192]] = 1;
            } else if (VM.NvV < 700) {
                VM.NvV += WW;
                value[networkMappings[192]] = 1;
            }
        };;

        function MNWnn(VM) {
            nvm[VM.vM][VM.wm].mmm = MNV;
            nvm[VM.vM][VM.wm].nnw = VM.nvW;
            nvm[VM.vM][VM.wm].WnN = undefined;
            var Wv = (VM.Nvm >> 5) & 3;
            var mN = Mww[VM.Nvm >> 7];
            var vW = 1;
            nvm[VM.vM][VM.wm].WnN = mN[networkMappings[79]].WnN;
            if (VM.MnN !== 0) {
                if (VM.vNn === 0) {
                    var mMw = (mN.wMM === -1) ? Mww[mN[networkMappings[109]]].wVm[VM.wVm] : mN;
                    NWNvw(VM, mMw.wMM, mMw.wmw, 5);
                    if ((mMw.MmV !== 0) && (wmMNn[mMw.MmV] === 0)) {
                        MM.nmM(MM.Mn.currentDamage[mMw.MmV], 1, MNM.VNv(game.player[networkMappings[77]], game.player[networkMappings[120]], VM[networkMappings[77]], VM[networkMappings[120]]) / 2.5);
                        wmMNn[mMw.MmV] = 1;
                    }
                }
                VM.vNn += WW;
                var Vn = Math[networkMappings[4]](0, wvm.Mnm.VmV(1 - (VM.vNn / 300)));
                value[networkMappings[192]] = Vn;
                vW = Math[networkMappings[250]](1 + (0.35 * (1 - Vn)), 1.35);
            }
            if ((VM[networkMappings[155]] & 2) === 2) {
                VM.Mvw = 250;
                VM.wnn = (Nnmvw * (VM.Nvm & 31)) / 31;
                VM[networkMappings[155]] &= ~2;
                var mMw = (mN.wMM === -1) ? Mww[mN[networkMappings[109]]].wVm[VM.wVm] : mN;
                NWNvw(VM, mMw.wMM, mMw.wmw, 1);
                if ((mMw.mVW !== 0) && (wmMNn[mMw.mVW] === 0)) {
                    MM.nmM(MM.Mn.currentDamage[mMw.mVW], 1, MNM.VNv(game.player[networkMappings[77]], game.player[networkMappings[120]], VM[networkMappings[77]], VM[networkMappings[120]]) / 2.8);
                    wmMNn[mMw.mVW] = 1;
                }
            }
            var vn = 0;
            var WM = 0;
            if (VM.Mvw > 0) {
                if (VM.Mvw > 200) {
                    var Mvw = (20 * (250 - VM.Mvw)) / 100;
                    vn = Math[networkMappings[218]](VM.wnn) * Mvw;
                    WM = Math[networkMappings[147]](VM.wnn) * Mvw;
                    VM.Mvw -= WW;
                } else {
                    var Mvw = (20 * VM.Mvw) / 200;
                    vn = Math[networkMappings[218]](VM.wnn) * Mvw;
                    WM = Math[networkMappings[147]](VM.wnn) * Mvw;
                    VM.Mvw -= WW;
                }
            }
            mN.MW(mN, VM, vn, WM, Wv, vW);
            if (VM.MnN !== 0) {
                if (VM.vNn > 300) VM.MnN = 2;
                value[networkMappings[192]] = 1;
            }
        };;

        function nvVWw(VM) {
            nvm[VM.vM][VM.wm].mmm = MNV;
            nvm[VM.vM][VM.wm].nnw = VM.nvW;
            nvm[VM.vM][VM.wm].WnN = undefined;
            var wNMvW = 1;
            var vM = VM.vM;
            var wm = VM.wm;
            var WWwwn = (vM <= 1) ? 0 : (vM - 1);
            var Nvmvn = (vM >= (wMn - 2)) ? (wMn - 1) : (vM + 1);
            var vmNnW = (wm <= 1) ? 0 : (wm - 1);
            var WnMMV = (wm >= (MNn - 2)) ? (MNn - 1) : (wm + 1);
            for (vM = WWwwn; vM <= Nvmvn; vM++) {
                for (wm = vmNnW; wm <= WnMMV; wm++) {
                    var WWw = nvm[vM][wm];
                    if (WWw.MNV !== MNV) continue;
                    var m = WWw[networkMappings[157]];
                    var tokenIndex = WWw.vM;
                    for (var MNN = 0; MNN < tokenIndex; MNN++) {
                        var element = m[MNN];
                        var mv = element[networkMappings[217]];
                        var nnvMw = mNv.VNV[mv][element.vwV];
                        if (((nnvMw.nvW !== game.player[networkMappings[109]]) || (nnvMw[networkMappings[109]] !== 0)) && (MNM.VNv(nnvMw[networkMappings[77]], nnvMw[networkMappings[120]], VM[networkMappings[77]], VM[networkMappings[120]]) < (mnW[mv].Vwn - 4))) {
                            console[networkMappings[31]]("DETECTED");
                            VM[networkMappings[158]] = VM[networkMappings[77]];
                            VM[networkMappings[41]] = VM[networkMappings[120]];
                            VM.nwV = VM[networkMappings[77]];
                            VM.nWv = VM[networkMappings[120]];
                        }
                    }
                }
            }
            if (VM.MnN !== 0) {
                VM.vNn += WW;
                wNMvW = Math[networkMappings[4]](0, wvm.Mnm.VmV(1 - (VM.vNn / 200)));
                value[networkMappings[192]] = wNMvW;
            }
            var VNv = MNM.VnN(VM.nwV, VM.nWv, VM[networkMappings[77]], VM[networkMappings[120]]);
            if ((VNv < 400) || (VM.MnN !== 0)) {
                value[networkMappings[192]] = Math[networkMappings[250]](VNv / 400, wNMvW);
                Wn.MV(mnW[vMM].vNvmv[VM.Nvm][2], VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], VM[networkMappings[142]], 0, 0, 1);
                value[networkMappings[192]] = wNMvW;
                Wn.MV(mnW[vMM].vNvmv[VM.Nvm][1], VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], VM[networkMappings[142]], 0, 0, 1);
            } else Wn.MV(mnW[vMM].vNvmv[VM.Nvm][0], VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], VM[networkMappings[142]], 0, 0, 1);
            if (VM.MnN !== 0) {
                if (VM.vNn > 200) VM.MnN = 2;
                value[networkMappings[192]] = 1;
            }
        };;

        function NWNmN(VM) {
            nvm[VM.vM][VM.wm].mmm = MNV;
            nvm[VM.vM][VM.wm].nnw = VM.nvW;
            nvm[VM.vM][VM.wm].WnN = undefined;
            if (VM.nMM !== 0) {
                var player = game.playersList[VM.nMM];
                if (MNV === player.MNV) {
                    var playersList = mNv.VNV[vMM];
                    var vWm = playersList[player.nNMMN];
                    VM.nwV = vWm[networkMappings[77]];
                    VM.nWv = vWm[networkMappings[120]];
                    VM.nnVVV = Math[networkMappings[218]](MNM[networkMappings[142]](VM[networkMappings[158]], VM[networkMappings[41]], VM.nwV, VM.nWv));
                    VM.vvvwv = Math[networkMappings[147]](MNM[networkMappings[142]](VM[networkMappings[158]], VM[networkMappings[41]], VM.nwV, VM.nWv));
                }
            }
            if ((VM.MnN === 0) && (MNM.VnN(VM[networkMappings[77]], VM[networkMappings[120]], VM.nwV, VM.nWv) < 1)) {
                var VNv = MNM.VnN(NnN, wNM, VM[networkMappings[77]], VM[networkMappings[120]]);
                if (VNv < VVVnN) {
                    VVVnN = VNv;
                    game.player.Nw = VM.Nvm;
                    game.player.MVwWV = VM[networkMappings[109]];
                    if (game.player.mnv <= 0) game.player.mnv = 0;
                    else game.player.mWWWN = 1;
                }
            }
            var wM = 0;
            var nnwWM = 0;
            if (VM.MnN !== 0) {
                VM.vNn += WW;
                value[networkMappings[192]] = Math[networkMappings[4]](0, wvm.Mnm.VmV(1 - (VM.vNn / 800)));
                nnwWM = VM.vNn / 2400;
            } else if (VM.NvV < 500) {
                var Vn = Math[networkMappings[250]](1, wvm.Mnm.VmV(VM.NvV / 500));
                value[networkMappings[192]] = Vn;
            }
            VM.wM = (VM.wM + WW) % 1500;
            if (VM.wM < 750) wM = 0.95 + (wvm.Mnm.vwW(VM.wM / 750) * 0.1);
            else wM = 0.95 + (wvm.Mnm.vwW(1 - ((VM.wM - 750) / 750)) * 0.1);
            Wn.MV(wNN[VM.Nvm], VwN + VM[networkMappings[77]], Mnw + VM[networkMappings[120]], VM[networkMappings[142]], 0, 0, wM - nnwWM);
            if (VM.MnN !== 0) {
                if (VM.vNn > 800) VM.MnN = 2;
                value[networkMappings[192]] = 1;
            } else if (VM.NvV < 500) {
                VM.NvV += WW;
                value[networkMappings[192]] = 1;
            }
        };;

        function VwwMm() {
            var vM = 0;
            WMmNv = 0;
            WvNnw[0] = 0;
            WvNnw[1] = 0;
            WvNnw[2] = 0;
            WvNnw[3] = 0;
            VnVWM = 12000;
            VVVnN = 12000;
            game.player.mWWWN = 0;
            game.player.MWnvV = -1;
            game.player.vNnWV = -1;
            if (game.player.mnv !== 1) game.player.mnv = -1;
            var WNM = mNv.VNV[mnW[networkMappings[231]]];
            var nmN = mNv[networkMappings[188]][mnW[networkMappings[231]]];
            var WVW = nmN[networkMappings[188]];
            var VwM = mNv.VNV[mwmmw];
            var vvV = mNv[networkMappings[188]][mwmmw];
            var wWw = vvV[networkMappings[188]];
            for (vM = 0; vM < wWw; vM++) MMnVv(VwM[vvV.vwV[vM]]);
            VwM = mNv.VNV[MNVvm];
            vvV = mNv[networkMappings[188]][MNVvm];
            wWw = vvV[networkMappings[188]];
            for (vM = 0; vM < wWw; vM++) NwNVv(VwM[vvV.vwV[vM]]);
            for (vM = 0; vM < wWw; vM++) MNWnn(VwM[vvV.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === MNVvm) MNWnn(VM);
            }
            if (VMNnW !== NmVwW) {
                var wMM = mNv.VNV[vnmVN];
                var vvV = mNv[networkMappings[188]][vnmVN];
                var wWw = vvV[networkMappings[188]];
                for (vM = 0; vM < wWw; vM++) VvnMm(wMM[vvV.vwV[vM]]);
                if (nMNvM[networkMappings[109]] !== -1) {
                    mNv[networkMappings[54]](0, nMNvM[networkMappings[109]], nMNvM.wWW, vnmVN);
                    nMNvM[networkMappings[109]] = -1;
                }
            }
            var VwM = mNv.VNV[WwvNn];
            var vvV = mNv[networkMappings[188]][WwvNn];
            var wWw = vvV[networkMappings[188]];
            for (vM = 0; vM < wWw; vM++) MNWnn(VwM[vvV.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === WwvNn) MNWnn(VM);
            }
            WMVnn = mNv.VNV[wwWnW];
            wVWvw = mNv[networkMappings[188]][wwWnW];
            vWMMW = wVWvw[networkMappings[188]];
            for (vM = 0; vM < vWMMW; vM++) wnnWN(WMVnn[wVWvw.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === wwWnW) wnnWN(VM);
            }
            var VwM = mNv.VNV[MMwVM];
            var vvV = mNv[networkMappings[188]][MMwVM];
            var wWw = vvV[networkMappings[188]];
            for (vM = 0; vM < wWw; vM++) vwWVm(VwM[vvV.vwV[vM]]);
            for (vM = 0; vM < wWw; vM++) MNWnn(VwM[vvV.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === MMwVM) MNWnn(VM);
            }
            var playersList = mNv.VNV[vMM];
            var vmw = mNv[networkMappings[188]][vMM];
            var tokenIndex = vmw[networkMappings[188]];
            for (vM = 0; vM < tokenIndex; vM++) {
                var nM = vmw.vwV[vM];
                var VM = playersList[nM];
                var player = game.playersList[VM.nvW];
                mMMMW(VM);
                player.nNMMN = nM;
                player.MNV = MNV;
                VmMMV(VM, nM);
            }
            game.player.Nw = -1;
            game.player.MVwWV = -1;
            var wMNvN = mNv.VNV[vnnvv];
            var WVMWw = mNv[networkMappings[188]][vnnvv];
            var mWVNv = WVMWw[networkMappings[188]];
            for (vM = 0; vM < mWVNv; vM++) NWNmN(wMNvN[WVMWw.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === vnnvv) NWNmN(VM);
            }
            var vNvmv = mNv.VNV[VMNwN];
            var NnnWN = mNv[networkMappings[188]][VMNwN];
            var VnMNw = NnnWN[networkMappings[188]];
            for (vM = 0; vM < VnMNw; vM++) nvVWw(vNvmv[NnnWN.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === VMNwN) nvVWw(VM);
            }
            WMVnn = mNv.VNV[mmWMv];
            wVWvw = mNv[networkMappings[188]][mmWMv];
            vWMMW = wVWvw[networkMappings[188]];
            for (vM = 0; vM < vWMMW; vM++) wnnWN(WMVnn[wVWvw.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === mmWMv) wnnWN(VM);
            }
            if (game.Wvv === game.mvVVw) {
                for (vM = 0; vM < tokenIndex; vM++) {
                    var VM = playersList[vmw.vwV[vM]];
                    var health = game.playersList[VM.nvW].health;
                    if (health === 0) NVWmm(VM);
                    else {
                        VM.Nvm = health - 1;
                        vwWwN(VM);
                    };
                }
                for (vM = 0; vM < WVW; vM++) {
                    var VM = WNM[nmN.vwV[vM]];
                    if (VM[networkMappings[217]] === vMM) {
                        mMMMW(VM);
                        var health = game.playersList[VM.nvW].health;
                        if (health === 0) NVWmm(VM);
                        else {
                            VM.Nvm = health - 1;
                            vwWwN(VM);
                        };
                    }
                }
            } else {
                for (vM = 0; vM < tokenIndex; vM++) NVWmm(playersList[vmw.vwV[vM]]);
                for (vM = 0; vM < WVW; vM++) {
                    var VM = WNM[nmN.vwV[vM]];
                    if (VM[networkMappings[217]] === vMM) {
                        mMMMW(VM);
                        NVWmm(VM);
                    }
                }
            }
            var Mmv = mNv.VNV[NnwWV];
            var NVNVv = mNv[networkMappings[188]][NnwWV];
            var mVWMV = NVNVv[networkMappings[188]];
            for (vM = 0; vM < mVWMV; vM++) vwWwN(Mmv[NVNVv.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === NnwWV) vwWwN(VM);
            }
            VwM = mNv.VNV[mwmmw];
            vvV = mNv[networkMappings[188]][mwmmw];
            wWw = vvV[networkMappings[188]];
            for (vM = 0; vM < wWw; vM++) MNWnn(VwM[vvV.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === mwmmw) MNWnn(VM);
            }
            for (vM = 0; vM < WMmNv; vM++) {
                var mN = Mww[NWmNV[vM].Nvm >> 7];
                mN.NmMnn(NWmNV[vM]);
                NWmNV[vM] = null;
            }
            WMVnn = mNv.VNV[WwMWM];
            wVWvw = mNv[networkMappings[188]][WwMWM];
            vWMMW = wVWvw[networkMappings[188]];
            for (vM = 0; vM < vWMMW; vM++) wnnWN(WMVnn[wVWvw.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === WwMWM) wnnWN(VM);
            }
            WMVnn = mNv.VNV[WWv];
            wVWvw = mNv[networkMappings[188]][WWv];
            vWMMW = wVWvw[networkMappings[188]];
            for (vM = 0; vM < vWMMW; vM++) wnnWN(WMVnn[wVWvw.vwV[vM]]);
            for (vM = 0; vM < WVW; vM++) {
                var VM = WNM[nmN.vwV[vM]];
                if (VM[networkMappings[217]] === WWv) wnnWN(VM);
            }
            Vmwvm = mNv.VNV[WmWMw];
            WVWwV = mNv[networkMappings[188]][WmWMw];
            WWWnn = WVWwV[networkMappings[188]];
            for (vM = 0; vM < WWWnn; vM++) MWnvn(Vmwvm[WVWwV.vwV[vM]]);
            for (vM = 0; vM < tokenIndex; vM++) VMwNN(playersList[vmw.vwV[vM]]);
            if (game.Wvv !== game.vVwwV) {
                for (vM = 0; vM < tokenIndex; vM++) NNvMV(playersList[vmw.vwV[vM]]);
                for (vM = 0; vM < tokenIndex; vM++) wVvnN(playersList[vmw.vwV[vM]]);
            }
        };;

        function wWMMW() {
            VVMWn = 0;
        };;
        var NMNww;
        var WVvWv = Wn[networkMappings[139]].VmNww;
        var NnnNm = 0;
        var VmWwn = 0;
        var VVMWn = 0;
        var nMVMW = 0;
        var mVNMN = 0;

        function NMwvv(messageHandler) {
            if (mVNMN === 0) {
                NnnNm = VN[networkMappings[56]];
                VN[networkMappings[56]] = 0.8;
                VmWwn = 0;
                VVMWn = messageHandler;
                nMVMW = 0;
                mVNMN = 1;
                WVvWv = Wn[networkMappings[139]].nvMvV / Wn[networkMappings[139]].mWvVV;
            }
        };;

        function wNVVV() {
            if ((VVMWn <= 0) && ((VmWwn + WW) > 1500)) {
                mVNMN = 0;
                VmWwn = 1500;
            } else {
                VVMWn -= WW;
                nMVMW += WW;
                VmWwn = (VmWwn + WW) % 1500;
            }
            var Vn = wvm.Mnm.vwW(((VmWwn > 750) ? (1500 - VmWwn) : VmWwn) / 750);
            if (((VVMWn < 750) && (VmWwn > 750)) && ((1500 - VmWwn) > VVMWn)) {
                var nwwmv = Math[networkMappings[4]](0, (1500 - VmWwn) / 750);
                Vn = (0.5 * nwwmv) + (Vn * (1 - 0.5));
            } else if (nMVMW > 750) Vn = 0.5 + (Vn * (1 - 0.5));
            var WnMmM = Vn * 20;
            VN[networkMappings[56]] = NnnNm + Vn;
            Wn[networkMappings[139]].mWvVV = Wn[networkMappings[139]].nvMvV / (WVvWv + WnMmM);
            NMNww();
        };;
        var mMWNv = document[networkMappings[253]]('canvas');
        var MNNVw = mMWNv[networkMappings[187]]('2d');

        function VNmwn() {
            var MMm;
            var Vn;
            var mvvwN = value;
            Vn = 1 - wvm.Mnm.WWM(game.NVM / 1000);
            mMWNv[networkMappings[65]] = nNv[networkMappings[65]];
            mMWNv[networkMappings[12]] = nNv[networkMappings[12]];
            value = MNNVw;
            value[networkMappings[228]]();
            var nmv = Wn[networkMappings[139]].mWvVV / Wn[networkMappings[139]].mNwnw;
            value[networkMappings[56]](nmv, nmv);
            MMm = WVMwv;
            WVMwv = Mww;
            Mww = MMm;
            MMm = nmnnn;
            nmnnn = NWw;
            NWw = MMm;
            MMm = mNvWW;
            mNvWW = wNN;
            wNN = MMm;
            MMm = MnMnw;
            MnMnw = nwv;
            nwv = MMm;
            MMm = VMNvn;
            VMNvn = mnW;
            mnW = MMm;
            MMm = wnVmV;
            wnVmV = vNmWV;
            vNmWV = MMm;
            MMm = MNvvM;
            MNvvM = vVwmN;
            vVwmN = MMm;
            MMm = VNnwN;
            VNnwN = wwW;
            wwW = MMm;
            value[networkMappings[84]] = (game.NMn === 0) ? "#19435A" : "#daeae6";
            value[networkMappings[3]](0, 0, Vmn, mMn);
            nmvNv();
            VwwMm();
            MMm = WVMwv;
            WVMwv = Mww;
            Mww = MMm;
            MMm = nmnnn;
            nmnnn = NWw;
            NWw = MMm;
            MMm = mNvWW;
            mNvWW = wNN;
            wNN = MMm;
            MMm = MnMnw;
            MnMnw = nwv;
            nwv = MMm;
            MMm = VMNvn;
            VMNvn = mnW;
            mnW = MMm;
            MMm = wnVmV;
            wnVmV = vNmWV;
            vNmWV = MMm;
            MMm = MNvvM;
            MNvvM = vVwmN;
            vVwmN = MMm;
            MMm = VNnwN;
            VNnwN = wwW;
            wwW = MMm;
            value[networkMappings[37]]();
            value = mvvwN;
            value[networkMappings[192]] = Vn;
            value[networkMappings[114]](mMWNv, 0, 0, Vmn, mMn);
            value[networkMappings[192]] = 1;
            game.NVM = Math[networkMappings[4]](0, game.NVM - WW);
            if (game.NVM === 0) game.MNMMw();
        };;

        function nmmvm() {
            VN.Nnm += WW;
            if (mVNMN === 1) wNVVV();
            vmwvn();
            mmmmN();
            nmvNv();
            mmVVV();
            VwwMm();
            nWVmv();
            if (game.NVM > 0) VNmwn();
            mNv.VwnNV();
            MNV++;
            for (var vM = 0; vM < VvMww; vM++) wmMNn[vM] = 0;
            Vv = wWMmM;
            NMMvm = Vmn / Vv;
            wVVMm = mMn / Vv;
        };;

        function VmMNn(Vn) {
            VvMMw = 0;
        };

        function VWNmW(Vn) {
            localStorage[networkMappings[76]]("particles", "" + Vn);
            VMNnW = Vn;
        };;

        function zoom(mwnnw) {
            if (mwnnw[networkMappings[118]] < 0) VN[networkMappings[56]] += 0.1;
            else VN[networkMappings[56]] -= 0.1;
            VN[networkMappings[56]] = Math[networkMappings[4]](-0.5, Math[networkMappings[250]](VN[networkMappings[56]], 1));
        };;
        NV[networkMappings[148]][networkMappings[61]]("can")[networkMappings[116]]("wheel", zoom);
        return {
            Nnm: Date[networkMappings[237]](),
            reset: mnwvv,
            Vmmww: nmmvm,
            NMN: nnNvN,
            Mwwmm: MMVVW,
            VvW: WnnVm,
            MNwnM: vwMMv,
            mvV: VNMMW,
            mWV: VvnVn,
            nnvnm: NnnvV,
            nVVWv: NNVwn,
            WnV: mNvMM,
            WVm: mWVvW,
            healthStatus: mMvVW,
            mnv: nWwmw,
            MWMww: vWnMv,
            wnMnv: 0,
            wnNWn: 0,
            scale: 0,
            VWNmW: VWNmW,
            VmMNn: VmMNn,
            NMwvv: NMwvv,
            wWMMW: wWMMW,
            MwMmm: MwMmm,
            mVV: mVV,
            nMm: nMm,
            wnnmV: 0,
            mmV: VVWVW,
            wmM: nMMWN,
            NvM: VmWVW,
            WMMwM: Nwmwn,
            vNmWv: nMnwv,
            VmwWw: WVwVm,
            Mwvnn: wWVVN,
            wwmMn: vWwmw,
            VNVMN: NmMnW,
            Wwwwn: MVvNV,
            nWWvm: wmvvm,
            wmVnN: mWvvm,
            mWWmV: nmVVm,
            NwWnm: VmMVn,
            WmVVm: MWvwV,
            vwMMN: MVNvV,
            nMVvw: wvvvv,
            WvvvM: nNmvM,
            mMNmv: nnmMV,
            WwnMn: nVnnm,
            NMvWw: Nnvmm,
            nvWww: NNvnW,
            Vmwvw: vMnNM,
            mWwMn: VmMnw,
            health: NMvnN,
            VmMmw: wmMwM,
            Wvnnv: vWWnv,
            wMWMw: nNmWV,
            MWwwM: VvWmn,
            NVwwM: mvnmw,
            wmwVW: WnWwM,
            VWvWM: NMwMm
        };
    })();
    var MvN = (function() {
        var NVW = 0;
        var wnw = 1;
        var MMn = 2;
        var Wmv = 4;
        var mvVMv = 0;
        var NwWNm = 0;
        var WvwwVnV = 4;
        var nMN = null;
        var vwVmv = -1;
        var nmvVM = 0;
        var Vvm = [];
        var vmVNw = [];
        var wWVvv = [];
        var NWMmv = {
            vM: 0,
            wm: 0
        };

        function mnwMm() {
            for (var vM = 0; vM < NwWNm; vM++) {
                Vvm[vM] = [];
                for (var wm = 0; wm < mvVMv; wm++) Vvm[vM][wm] = 0;
            }
        };;

        function mmMVw(wNWNw, vw, Vw) {
            nMN = new wWMNn.WMnnM(wNWNw);
            mvVMv = vw;
            NwWNm = Vw;
            MvN[networkMappings[65]] = vw;
            MvN[networkMappings[12]] = Vw;
            Vvm = [];
            MvN.Vvm = Vvm;
            vmVNw = [];
            wWVvv = [];
            MvN.wWVvv = wWVvv;
            vwVmv = -1;
            NWMmv.vM = 0;
            NWMmv.wm = 0;
            nmvVM = 0;
        };;

        function nnM(wNWNw, vw, Vw, MmMmV) {
            console[networkMappings[32]]("Town generation");
            mmMVw(wNWNw, vw, Vw);
            mnwMm();
            if (MmMmV !== undefined) MmMmV();
            console[networkMappings[166]]("Town generation");
        };;
        return {
            seed: 0,
            nnM: nnM,
            Vvm: Vvm,
            wWVvv: null,
            width: 0,
            height: 0
        };
    })();
    NWm = 0;
    var vMM = NWm++;
    var vnnvv = NWm++;
    var VMNwN = NWm++;
    var mwmmw = NWm++;
    var MMwVM = NWm++;
    var WwvNn = NWm++;
    var MNVvm = NWm++;
    var vnmVN = NWm++;
    var WwMWM = NWm++;
    var wwWnW = NWm++;
    var mmWMv = NWm++;
    var WWv = NWm++;
    var WmWMw = NWm++;
    var NnwWV = NWm++;
    mnW[vMM][networkMappings[170]] = function nvMnmnv(wW, vn, WM) {
        if (MNM.VNv(wW[networkMappings[77]], wW[networkMappings[120]], vn, WM) > 66) {
            wW[networkMappings[158]] = vn;
            wW[networkMappings[41]] = WM;
            var MN = MNM[networkMappings[142]](wW[networkMappings[158]], wW[networkMappings[41]], wW.nwV, wW.nWv);
            wW.nnVVV = Math[networkMappings[218]](MN);
            wW.vvvwv = Math[networkMappings[147]](MN);
        }
        wW.VMN = (wW[networkMappings[155]] >> 8) / 100;
    };
    mnW[vMM].nnM = function NwvNvvv(wW) {
        var player = game.playersList[wW.nvW];
        for (var vM = 0; vM < player.mNnnW[networkMappings[231]]; vM++) player.mNnnW[vM].messageHandler = 0;
        for (var vM = 0; vM < player.nnVNm[networkMappings[231]]; vM++) player.nnVNm[vM].messageHandler = 0;
        wW[networkMappings[142]] = wW.WWVNm;
        if (player.health > 0) {
            wW.wWN = 1;
            wW.MVw = 1;
        }
    };
    mnW[NnwWV][networkMappings[170]] = mnW[vMM][networkMappings[170]];
    mnW[NnwWV].nnM = function VvnwVww(wW) {
        wW.wWN = 1;
        wW.MVw = 1;
        wW[networkMappings[142]] = wW.WWVNm;
        wW.VMN = (wW[networkMappings[155]] >> 8) / 100;
    };
    mnW[vnnvv].nnM = function WVmNMvV(wW) {
        if ((wW[networkMappings[77]] !== wW[networkMappings[158]]) || (wW[networkMappings[120]] !== wW[networkMappings[41]])) {
            wW[networkMappings[142]] = MNM[networkMappings[142]](wW[networkMappings[77]], wW[networkMappings[120]], wW[networkMappings[158]], wW[networkMappings[41]]);
            wW.WWVNm = wW[networkMappings[142]];
        } else {
            wW[networkMappings[142]] += Math[networkMappings[179]] / 2;
            wW.WWVNm = wW[networkMappings[142]];
        }
    };
    mnW[vnnvv][networkMappings[170]] = function MnWVwMN(wW, vn, WM) {
        wW.nMM = wW[networkMappings[155]] >> 8;
    };
    mnW[VMNwN].nnM = function WmVNmnv(wW) {
        wW.wnn = MNM[networkMappings[142]](wW[networkMappings[158]], wW[networkMappings[41]], wW.nwV, wW.nWv);
        var index = wW.Nvm;
        wW.VMN = (wW[networkMappings[155]] >> 8) / 100;
        switch (index) {
            case 4:
            case 8:
                var VM = mNv.nwNvW(vMM, wW.nvW, 0);
                if (VM !== null) {
                    VM.Nvm = VM.Nvm & 255;
                    VM.nMM = 0;
                }
                break;
            case 3:
                var VM = mNv.nwNvW(vMM, wW.nvW, 0);
                if (VM !== null) VM.nMM = 0;
                break;
        }
    };
    mnW[VMNwN][networkMappings[170]] = function vNmWmmv(wW, vn, WM) {
        var MN = MNM[networkMappings[142]](wW[networkMappings[77]], wW[networkMappings[120]], wW.nwV, wW.nWv);
        var WvWvv = Math[networkMappings[179]] * 2;
        var NmMmw = (((MN + WvWvv) % WvWvv) - ((wW.wnn + WvWvv) % WvWvv)) % WvWvv;
        if (Math[networkMappings[99]](NmMmw) > 0.1) {
            wW[networkMappings[158]] = wW[networkMappings[77]];
            wW[networkMappings[41]] = wW[networkMappings[120]];
            wW.nwV = wW[networkMappings[77]];
            wW.nWv = wW[networkMappings[120]];
        }
    };
    mnW[WwMWM][networkMappings[170]] = function nMvvv(wW, vn, WM) {
        wW.mNVWM = wW[networkMappings[77]];
        wW.vnmvv = wW[networkMappings[120]];
    };
    mnW[wwWnW][networkMappings[170]] = mnW[WwMWM][networkMappings[170]];
    mnW[mmWMv][networkMappings[170]] = mnW[WwMWM][networkMappings[170]];
    mnW[WWv][networkMappings[170]] = mnW[WwMWM][networkMappings[170]];
    mnW[mwmmw][networkMappings[170]] = function nMvvv(wW, vn, WM) {
        var Wv = (wW.Nvm >> 5) & 3;
        wW.wVm = (wW[networkMappings[155]] >> 5) & 63;
        wW.mmN = wW[networkMappings[155]] >> 14;
        wW[networkMappings[155]] = wW[networkMappings[155]] & 16383;
        var mN = Mww[wW.Nvm >> 7];
        wW[networkMappings[77]] = ((Math[networkMappings[68]](vn / VN.mVV) * VN.mVV) + VN.nMm) + mN.Mmw[Wv];
        wW[networkMappings[120]] = ((Math[networkMappings[68]](WM / VN.mVV) * VN.mVV) + VN.nMm) + mN.NVn[Wv];
        wW[networkMappings[158]] = wW[networkMappings[77]];
        wW[networkMappings[41]] = wW[networkMappings[120]];
        wW.nwV = wW[networkMappings[77]];
        wW.nWv = wW[networkMappings[120]];
        wW.mNVWM = wW[networkMappings[77]];
        wW.vnmvv = wW[networkMappings[120]];
        if ((mN.NvM === 1) && ((wW[networkMappings[155]] & 16) === 16)) {
            wW.mNVWM = ((Math[networkMappings[68]](wW.wm + mN.mwnmN[Wv]) * VN.mVV) + VN.nMm) + mN.Mmw[(Wv + 1) % 4];
            wW.vnmvv = ((Math[networkMappings[68]](wW.vM + mN.vmwWW[Wv]) * VN.mVV) + VN.nMm) + mN.NVn[(Wv + 1) % 4];
        }
    };
    mnW[MMwVM][networkMappings[170]] = mnW[mwmmw][networkMappings[170]];
    mnW[WwvNn][networkMappings[170]] = mnW[mwmmw][networkMappings[170]];
    mnW[MNVvm][networkMappings[170]] = mnW[mwmmw][networkMappings[170]];
    try {
        VN.wnMnv;
    } catch (NNV) {
        var VN = {};
    }
    var VVNww = 1;
    var NVwNM = 2;
    var MVvMm = 3;
    var vm = 0;
    var mw = {
        wVn: vm++,
        VmM: vm++,
        wVv: vm++,
        mnM: vm++,
        VWN: vm++,
        wmW: vm++,
        mnm: vm++,
        nvw: vm++,
        MWV: vm++,
        MWw: vm++,
        nVm: vm++,
        Www: vm++,
        nwW: vm++
    };
    vm = 0;
    var vv = {
        mWM: vm++,
        Mvm: vm++,
        mVvWW: vm++,
        NWVwv: vm++,
        wVV: vm++,
        WMm: vm++,
        NmN: vm++,
        MNv: vm++,
        VMW: vm++,
        MNm: vm++
    };
    var MWVvN = [];
    MWVvN[vv.Mvm] = "audio/wood-impact.mp3";
    MWVvN[vv.mVvWW] = "audio/stone-impact2.mp3";
    MWVvN[vv.NWVwv] = "audio/stone-impact.mp3";
    MWVvN[vv.wVV] = "audio/metal-impact2.mp3";
    MWVvN[vv.VMW] = "audio/pillow-impact.mp3";
    MWVvN[vv.WMm] = "audio/wood-destroy3.mp3";
    MWVvN[vv.NmN] = "audio/stone-destroy.mp3";
    MWVvN[vv.MNv] = "audio/metal-destroy2.mp3";
    MWVvN[vv.MNm] = "audio/pillow-destroy.mp3";
    var VvMww = MWVvN[networkMappings[231]];
    vm = 0;
    var Nwv = {
        NMw: vm++,
        Mnwvw: vm++,
        MwNMw: vm++,
        Wnv: vm++,
        WmmMw: vm++
    };
    vm = 0;
    var NWM = {
        wnNmV: vm++,
        vMWWN: vm++,
        WVmvV: vm++,
        NMmnw: vm++,
        WWwwV: vm++,
        wMvvM: vm++,
        vwWmW: vm++,
        VnMnW: vm++,
        wvMvm: vm++
    };
    vm = 0;
    var wn = {
        WNvWM: vm++,
        mNm: vm++,
        mNV: vm++,
        MVV: vm++,
        VMMNM: vm++,
        MMN: vm++,
        WNWVW: vm++,
        mwMnV: vm++,
        MwMMN: vm++,
        Wnv: vm++
    };
    vm = 1;
    var Mv = {
        mvm: vm++,
        NmV: vm++,
        nvM: vm++,
        Mnn: vm++,
        nMWwV: vm++,
        Wwn: vm++,
        Vmw: vm++,
        mWm: vm++,
        Wmm: vm++,
        VMWnV: vm++,
        mVWVW: vm++,
        vNV: vm++,
        wwwmw: vm++,
        WwwWW: vm++,
        wMV: vm++,
        WVv: vm++,
        MVv: vm++,
        vwN: vm++,
        wVv: vm++,
        nVmmn: vm++,
        nWWVW: vm++,
        www: vm++,
        NmVWW: vm++,
        Wnwnm: vm++,
        nvmVv: vm++,
        NnmNm: vm++,
        VNn: vm++,
        Vww: vm++,
        wvM: vm++,
        vmwww: vm++,
        nVV: vm++,
        nmvwv: vm++,
        NmvMv: vm++,
        MWv: vm++,
        mVMnN: vm++,
        Mwwww: vm++,
        nwVWW: vm++,
        VVWNV: vm++,
        MvmWw: vm++,
        WwvMw: vm++,
        NMV: vm++,
        NwW: vm++,
        mnwnN: vm++,
        wvmnM: vm++,
        mVWMw: vm++,
        vmMMM: vm++,
        nMMWV: vm++,
        nwN: vm++,
        mnm: vm++,
        vwWVv: vm++,
        vvwWM: vm++,
        NMwmm: vm++,
        MWW: vm++,
        mMN: vm++,
        wmW: vm++,
        NMm: vm++,
        VWN: vm++,
        NWMwm: vm++,
        vNv: vm++,
        WWW: vm++,
        mwvmN: vm++,
        WNnvM: vm++,
        NWnMW: vm++,
        wvvvn: vm++,
        wnNvW: vm++,
        VNVwm: vm++,
        wNvnw: vm++,
        NNmwn: vm++,
        wvWWW: vm++,
        nnVvn: vm++,
        MVnnm: vm++,
        wMNww: vm++,
        MVn: vm++,
        VnM: vm++,
        mNmWV: vm++,
        NwmNN: vm++,
        nNm: vm++,
        wMVVv: vm++,
        WwwVV: vm++,
        WNnMm: vm++,
        mNVMN: vm++,
        WnnWn: vm++,
        VWVVn: vm++,
        MnmWv: vm++,
        WmVWn: vm++,
        NWnWM: vm++,
        NMMWW: vm++,
        WwWnV: vm++,
        VMn: vm++,
        VWv: vm++,
        wWn: vm++,
        nVn: vm++,
        wmnWN: vm++,
        nvw: vm++,
        VWM: vm++,
        wNv: vm++,
        NMWww: vm++,
        mVmVm: vm++,
        vMnWn: vm++,
        vWvNv: vm++,
        MWV: vm++,
        VwmmV: vm++,
        wMmnm: vm++,
        NVVnV: vm++,
        VMnnN: vm++,
        mMVvm: vm++,
        Nwmmm: vm++,
        nnvvv: vm++,
        nNvmw: vm++,
        vNWwn: vm++,
        NNNWv: vm++,
        wMmmV: vm++,
        Wmwmv: vm++,
        wMWVm: vm++,
        NwNVV: vm++,
        vvMmW: vm++,
        MWw: vm++,
        MWWmV: vm++,
        mwwMv: vm++,
        mVnMV: vm++,
        mMWmn: vm++,
        mNvmm: vm++,
        MnnvM: vm++,
        NwMNm: vm++,
        NvMWn: vm++,
        vwWmW: vm++,
        mMv: vm++,
        wWnNV: vm++,
        mNNwW: vm++,
        nNNmW: vm++,
        nVm: vm++,
        NvMwv: vm++,
        vmvVm: vm++,
        nMMVw: vm++,
        NmvmN: vm++,
        MMNNn: vm++,
        vvnnn: vm++,
        VnMnW: vm++,
        wvMvm: vm++,
        nnmNW: vm++,
        NNMnv: vm++,
        mmvNn: vm++,
        VNMmn: vm++,
        NVWnw: vm++,
        wVmMw: vm++,
        mmwWm: vm++,
        WmmWm: vm++,
        nnVnN: vm++,
        VMWww: vm++,
        mMWNN: vm++,
        Mvnvv: vm++,
        nNVNn: vm++,
        wWVMN: vm++,
        VnWWM: vm++,
        wvvVv: vm++,
        Www: vm++,
        NwMvV: vm++,
        vNWnW: vm++,
        Nvvnm: vm++,
        mmMVm: vm++,
        NnwmN: vm++,
        nnnVN: vm++,
        vNmNm: vm++,
        wnMwM: vm++,
        MvVnn: vm++,
        wnMNm: vm++,
        MMNWV: vm++,
        nwW: vm++
    };
    vm = 0;
    var Nm = {
        mnNWm: vm++,
        VVNmM: vm++,
        nNWVn: vm++,
        nNwNW: vm++,
        wNVMn: vm++,
        MMnvv: vm++,
        nvM: vm++,
        Mnn: vm++,
        nMWwV: vm++,
        Wwn: vm++,
        Vmw: vm++,
        mWm: vm++,
        Wmm: vm++,
        VMWnV: vm++,
        mVWVW: vm++,
        vNV: vm++,
        wwwmw: vm++,
        WwwWW: vm++,
        wMV: vm++,
        WVv: vm++,
        MVv: vm++,
        vwN: vm++,
        wVv: vm++,
        nVmmn: vm++,
        nWWVW: vm++,
        www: vm++,
        NmVWW: vm++,
        Wnwnm: vm++,
        nvmVv: vm++,
        NnmNm: vm++,
        VNn: vm++,
        Vww: vm++,
        wvM: vm++,
        vmwww: vm++,
        nVV: vm++,
        nmvwv: vm++,
        NmvMv: vm++,
        MWv: vm++,
        mVMnN: vm++,
        Mwwww: vm++,
        nwVWW: vm++,
        VVWNV: vm++,
        MvmWw: vm++,
        WwvMw: vm++,
        NMV: vm++,
        NwW: vm++,
        mnwnN: vm++,
        wvmnM: vm++,
        mVWMw: vm++,
        vmMMM: vm++,
        nMMWV: vm++,
        nwN: vm++,
        mnm: vm++,
        vwWVv: vm++,
        vvwWM: vm++,
        NMwmm: vm++,
        MWW: vm++,
        mMN: vm++,
        wmW: vm++,
        NMm: vm++,
        VWN: vm++,
        NWMwm: vm++,
        vNv: vm++,
        WWW: vm++,
        mwvmN: vm++,
        WNnvM: vm++,
        NWnMW: vm++,
        wvvvn: vm++,
        wnNvW: vm++,
        VNVwm: vm++,
        wNvnw: vm++,
        NNmwn: vm++,
        wvWWW: vm++,
        nnVvn: vm++,
        wMNww: vm++,
        MVn: vm++,
        VnM: vm++,
        mNmWV: vm++,
        NwmNN: vm++,
        nNm: vm++,
        wMVVv: vm++,
        WwwVV: vm++,
        WNnMm: vm++,
        mNVMN: vm++,
        WnnWn: vm++,
        VWVVn: vm++,
        MnmWv: vm++,
        WmVWn: vm++,
        NMMWW: vm++,
        WwWnV: vm++,
        VMn: vm++,
        VWv: vm++,
        wWn: vm++,
        nVn: vm++,
        wmnWN: vm++,
        nvw: vm++,
        VWM: vm++,
        wNv: vm++,
        NMWww: vm++,
        mVmVm: vm++,
        vMnWn: vm++,
        vWvNv: vm++,
        MWV: vm++,
        VwmmV: vm++,
        wMmnm: vm++,
        NVVnV: vm++,
        VMnnN: vm++,
        mMVvm: vm++,
        Nwmmm: vm++,
        nnvvv: vm++,
        nNvmw: vm++,
        vNWwn: vm++,
        NNNWv: vm++,
        wMmmV: vm++,
        Wmwmv: vm++,
        wMWVm: vm++,
        NwNVV: vm++,
        vvMmW: vm++,
        MWw: vm++,
        MWWmV: vm++,
        mwwMv: vm++,
        mVnMV: vm++,
        mMWmn: vm++,
        mNvmm: vm++,
        MnnvM: vm++,
        NwMNm: vm++,
        NvMWn: vm++,
        vwWmW: vm++,
        mMv: vm++,
        wWnNV: vm++,
        mNNwW: vm++,
        nNNmW: vm++,
        nVm: vm++,
        NvMwv: vm++,
        vmvVm: vm++,
        nMMVw: vm++,
        NmvmN: vm++,
        MMNNn: vm++,
        vvnnn: vm++,
        VnMnW: vm++,
        wvMvm: vm++,
        nnmNW: vm++,
        NNMnv: vm++,
        mmvNn: vm++,
        VNMmn: vm++,
        NVWnw: vm++,
        wVmMw: vm++,
        mmwWm: vm++,
        WmmWm: vm++,
        nnVnN: vm++,
        VMWww: vm++,
        mMWNN: vm++,
        Mvnvv: vm++,
        nNVNn: vm++,
        wWVMN: vm++,
        VnWWM: vm++,
        wvvVv: vm++,
        Www: vm++,
        NwMvV: vm++,
        vNWnW: vm++,
        Nvvnm: vm++,
        nwW: vm++
    };
    vm = 0;
    var Nv = {
        mWWMM: vm++,
        mvm: vm++,
        NmV: vm++,
        nvM: vm++,
        NMm: vm++,
        MWW: vm++,
        vwwmM: vm++,
        vWMvm: vm++,
        vNV: vm++,
        VVNMN: vm++,
        VmM: vm++,
        nMVVN: vm++,
        nvWWw: vm++,
        NmNNN: vm++,
        Wvw: vm++,
        wnVMv: vm++,
        vMwww: vm++,
        VWVmN: vm++,
        VnMwV: vm++,
        wVWNn: vm++,
        nvNWw: vm++,
        mwvmN: vm++,
        mVNWM: vm++,
        NMMWN: vm++,
        vwWww: vm++,
        mVM: vm++,
        nNm: vm++,
        NnMvw: vm++,
        wnNMW: vm++,
        NWnnw: vm++,
        mWwvm: vm++,
        mwwMv: vm++,
        mVnMV: vm++,
        mMWmn: vm++,
        NmWmV: vm++
    };
    var vmWwW = [{
        src: "img/wait-ads-1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/wait-ads-2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/wait-ads-3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/wait-ads-4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/wait-ads-5.png",
        n: {
            v: 0
        }
    }];
    var NWw = [];
    NWw[Nv.mWWMM] = [];
    NWw[Nv.mvm] = [{
        src: "img/day-particules-wood1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.NmV] = [{
        src: "img/day-particules-stone1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-stone2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-stone3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-stone4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-stone5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.nvM] = [{
        src: "img/day-particules-steel1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-steel2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-steel3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-steel4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-steel5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.NMm] = [{
        src: "img/day-particules-uranium1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-uranium2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-uranium3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-uranium4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-uranium5.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-uranium6.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-uranium7.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-uranium8.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-uranium9.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.MWW] = [{
        src: "img/day-particules-sulfur1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sulfur2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sulfur3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sulfur4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sulfur5.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sulfur6.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sulfur7.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sulfur8.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sulfur9.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.vwwmM] = [{
        src: "img/day-particules-leaf1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.vWMvm] = [{
        src: "img/day-particules-wood1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaftree1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaftree2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaftree3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaftree4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaftree5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.WWwNW] = [{
        src: "img/day-particules-flower1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-flower2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-flower3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-flower4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-flower5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.vNV] = [{
        src: "img/day-particules-leaf1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf5.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf6.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf7.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf8.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-leaf9.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.VVNMN] = [{
        src: "img/day-particules-blood1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-blood2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-blood3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-blood4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-blood5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.VmM] = [{
        src: "img/day-particules-fire1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fire2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fire3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fire4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fire5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.nMVVN] = [{
        src: "img/day-particules-fur1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fur2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fur3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fur4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fur5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.nvWWw] = [{
        src: "img/day-particules-bed0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-bed1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-bed2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-bed6.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood3.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.NmNNN] = [{
        src: "img/day-particules-bed3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-bed4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-bed5.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-bed6.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood3.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.Wvw] = [{
        src: "img/day-particules-sofa0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.wnVMv] = [{
        src: "img/day-particules-sofa0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa5.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa6.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.vMwww] = [{
        src: "img/day-particules-sofa0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa7.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-sofa8.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.VWVmN] = [{
        src: "img/day-particules-toilet0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-toilet1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-toilet2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-toilet3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-toilet4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.VnMwV] = [{
        src: "img/day-particules-woodlight0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-woodlight1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-woodlight2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-woodlight3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-woodlight4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.wVWNn] = [{
        src: "img/day-particules-safe0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-safe1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-safe2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-safe3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-safe4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.nvNWw] = [{
        src: "img/day-particules-garbage0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-garbage1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-garbage2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-garbage3.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.mwvmN] = [{
        src: "img/day-particules-fridge0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fridge1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fridge2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fridge3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-fridge4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.mVNWM] = [{
        src: "img/day-particules-plot0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-plot1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-plot2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-plot3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-wood3.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.NMMWN] = [{
        src: "img/day-particules-barel0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-barel1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-barel2.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.vwWww] = [{
        src: "img/day-particules-barel3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-barel4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-barel5.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.mVM] = [{
        src: "img/day-particules-metal0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-metal1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-metal2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-metal3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-metal4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.nNm] = [{
        src: "img/day-particules-tomato0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-tomato1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-tomato2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-tomato3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-tomato4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.wnNMW] = [{
        src: "img/day-particules-blue-steel0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-blue-steel1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-blue-steel2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-blue-steel3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-blue-steel4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.NnMvw] = [{
        src: "img/day-particules-grey-steel0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-grey-steel1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-grey-steel2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-grey-steel3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-grey-steel4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.NWnnw] = [{
        src: "img/day-particules-red-steel0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-red-steel1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-red-steel2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-red-steel3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-red-steel4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.mWwvm] = [{
        src: "img/day-particules-kaki0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-kaki1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-kaki2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-kaki3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-kaki4.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.mwwMv] = [{
        src: "img/day-particules-mushroom4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-mushroom5.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-mushroom6.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.mVnMV] = [{
        src: "img/day-particules-mushroom1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-mushroom2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-mushroom3.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.mMWmn] = [{
        src: "img/day-particules-mushroom7.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-mushroom8.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-mushroom9.png",
        n: {
            v: 0
        }
    }];
    NWw[Nv.NmWmV] = [{
        src: "img/day-particules-gold0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-gold1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-particules-gold2.png",
        n: {
            v: 0
        }
    }];

    function nV(formattedText, WmMMN, WnN, NMW, WV, wvn, MvM, MmvWV, MWNMV) {
        this[networkMappings[227]] = formattedText;
        this[networkMappings[130]] = WmMMN;
        if (NMW !== undefined) this.NMW = NMW;
        if (WV !== undefined) this[networkMappings[69]] = WV;
        if (wvn !== undefined) {
            this.wvn = [];
            this.vwvwV = [];
            for (var vM = 0; vM < wvn[networkMappings[231]]; vM++) {
                this.wvn[vM] = wvn[vM][0];
                this.vwvwV[vM] = wvn[vM][1];
            }
        }
        if (WnN !== undefined) this.WnN = WnN;
        else this.WnN = -1;
        if (MvM !== undefined) this[networkMappings[95]] = MvM;
        else this[networkMappings[95]] = -1;
        if (MmvWV !== undefined) this.MmvWV = MmvWV;
        else this.MmvWV = -1;
        if (MWNMV !== undefined) this.MWNMV = MWNMV;
        else this.MWNMV = 1;
    };;
    var Mww = [{
        src: [],
        n: []
    }, {
        id: Mv.mvm,
        NN: {
            src: ["img/inv-wood-out.png", "img/inv-wood-in.png", "img/inv-wood-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wood", "Found in trees, or on the ground."),
        stack: 255,
        Nw: Nm.nNWVn,
        playerState: 10
    }, {
        id: Mv.NmV,
        NN: {
            src: ["img/inv-stone-out.png", "img/inv-stone-in.png", "img/inv-stone-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Stone", "Find it on the ground or on the rock.", wn.MwMMN, [], 0, [
            [mw.nVm, 80000]
        ]),
        mnmnm: 50,
        mvwNM: 200,
        stack: 255,
        Nw: Nm.MMnvv,
        playerState: 14
    }, {
        id: Mv.nvM,
        NN: {
            src: ["img/inv-steel-out.png", "img/inv-steel-in.png", "img/inv-steel-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Iron", "Melt it on a Firepit or a Smelter", wn.MwMMN, [], 0, [
            [mw.nVm, 120000]
        ]),
        mnmnm: 4,
        mvwNM: 8,
        stack: 255,
        Nw: Nm.nvM,
        playerState: 28
    }, {
        id: Mv.Mnn,
        NN: {
            src: ["img/inv-animal-fat-out.png", "img/inv-animal-fat-in.png", "img/inv-animal-fat-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Animal Fat", "Useful to craft bullet and clothes"),
        stack: 255,
        Nw: Nm.Mnn,
        playerState: 32
    }, {
        id: Mv.nMWwV,
        NN: {
            src: ["img/inv-animal-tendon-out.png", "img/inv-animal-tendon-in.png", "img/inv-animal-tendon-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Animal Tendon", "Useful to make string"),
        stack: 255,
        Nw: Nm.nMWwV,
        playerState: 100
    }, {
        id: Mv.Wwn,
        NN: {
            src: ["img/inv-string-out.png", "img/inv-string-in.png", "img/inv-string-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("String", "Useful to craft many items.", wn.mNm, [
            [Mv.nMWwV, 2]
        ], 1, [
            [mw.wVv, 20000]
        ]),
        stack: 255,
        Nw: Nm.Wwn
    }, {
        id: Mv.Vmw,
        NN: {
            src: ["img/inv-leather-boar-out.png", "img/inv-leather-boar-in.png", "img/inv-leather-boar-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Leather", "Useful to make clothes"),
        stack: 255,
        Nw: Nm.Vmw,
        playerState: 32
    }, {
        id: Mv.mWm,
        NN: {
            src: ["img/inv-shaped-metal-out.png", "img/inv-shaped-metal-in.png", "img/inv-shaped-metal-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Shaped Metal", "To craft improved items.", wn.MwMMN, [
            [Mv.nvM, 2]
        ], 1, [
            [mw.mnm, 3000],
            [mw.mnM, 30000]
        ]),
        stack: 255,
        Nw: Nm.mWm
    }, {
        id: Mv.Wmm,
        NN: {
            src: ["img/inv-raw-steak-out.png", "img/inv-raw-steak-in.png", "img/inv-raw-steak-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Sugar", "#Vegan"),
        stack: 10,
        Nw: Nm.Wmm,
        Mmnmn: 15,
        WmVwv: Mv.mVWVW,
        state: 12,
        wait: 5,
        playerState: 28
    }, {
        id: Mv.VMWnV,
        NN: {
            src: ["img/inv-cooked-steak-out.png", "img/inv-cooked-steak-in.png", "img/inv-cooked-steak-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Sugar Candy", "Rare or medium?", wn.mNm, [
            [Mv.Wmm, 1]
        ], 1, [
            [mw.VmM, 20000],
            [mw.mnM, 10000]
        ]),
        stack: 10,
        Nw: Nm.VMWnV,
        wait: 5,
        Mmnmn: 3,
        WmVwv: Mv.mVWVW,
        state: 13
    }, {
        id: Mv.mVWVW,
        NN: {
            src: ["img/inv-rotten-steak-out.png", "img/inv-rotten-steak-in.png", "img/inv-rotten-steak-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        stack: 10,
        Nw: Nm.mVWVW,
        wait: 5,
        state: 14,
        detail: new nV("Rotten Sugar", "Don't eat that."),
        playerState: 20
    }, {
        id: Mv.vNV,
        NN: {
            src: ["img/inv-orange-out.png", "img/inv-orange-in.png", "img/inv-orange-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Orange", "A little hungry?"),
        stack: 20,
        Nw: Nm.vNV,
        wait: 5,
        Mmnmn: 10,
        WmVwv: Mv.wwwmw,
        state: 15,
        playerState: 24
    }, {
        id: Mv.wwwmw,
        NN: {
            src: ["img/inv-rotten-orange-out.png", "img/inv-rotten-orange-in.png", "img/inv-rotten-orange-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Rotten Orange", "Go on, have a bite!", wn.WNWVW, [
            [Mv.vNV, 4]
        ], 8, [
            [mw.MWV, 40000]
        ]),
        stack: 20,
        Nw: Nm.wwwmw,
        wait: 5,
        state: 16,
        playerState: 20
    }, {
        id: Mv.WwwWW,
        NN: {
            src: ["img/inv-orange-seed-out.png", "img/inv-orange-seed-in.png", "img/inv-orange-seed-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Orange Seed", "Fill up on Vitame C?", wn.WNWVW, [
            [Mv.vNV, 4]
        ], 1, [
            [mw.VmM, 20000],
            [mw.mnM, 15000]
        ]),
        stack: 40,
        Nw: Nm.WwwWW,
        vnNnM: Nm.vNV,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [30, 30, 30, 30],
        height: [30, 30, 30, 30],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [35, 35, 35, 35],
        VwW: [35, 35, 35, 35],
        vvv: {
            src: "img/day-clear-blue-plant2-orange.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-plant2-orange.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 0,
        behavior: Nwv.Mnwvw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.NwWnm,
        mVW: vv.mWM,
        MmV: vv.mWM,
        vN: [{
            src: "img/day-plant0-orange.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant1-orange.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant2-orange.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant3-orange.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant4-orange.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.vNV,
        wmw: 68,
        vmN: ((5 * 8) * 60) * 1000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.wMV,
        NN: {
            src: ["img/inv-hachet-out.png", "img/inv-hachet-in.png", "img/inv-hachet-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Hatchet", "Harvest Wood and Stone.", wn.VMMNM, [
            [Mv.mvm, 10],
            [Mv.NmV, 2]
        ], 1, [
            [mw.wVn, 5000],
            [mw.wVv, 10000]
        ]),
        state: 3,
        stack: 1,
        Nw: Nm.wMV,
        wait: 10
    }, {
        id: Mv.WVv,
        NN: {
            src: ["img/inv-stone-pickaxe-out.png", "img/inv-stone-pickaxe-in.png", "img/inv-stone-pickaxe-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Icy Stone Pickaxe", "Mine Stone and Iron.", wn.VMMNM, [
            [Mv.mvm, 100],
            [Mv.NmV, 30]
        ], 1, [
            [mw.wVv, 30000]
        ]),
        state: 1,
        stack: 1,
        Nw: Nm.WVv,
        wait: 10
    }, {
        id: Mv.MVv,
        NN: {
            src: ["img/inv-steel-pickaxe-out.png", "img/inv-steel-pickaxe-in.png", "img/inv-steel-pickaxe-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Metal Pickaxe", "Mine also Sulfur", wn.VMMNM, [
            [Mv.NmV, 150],
            [Mv.mWm, 6]
        ], 1, [
            [mw.wmW, 60000]
        ], 6),
        state: 2,
        stack: 1,
        Nw: Nm.MVv,
        wait: 10
    }, {
        id: Mv.vwN,
        NN: {
            src: ["img/inv-stone-axe-out.png", "img/inv-stone-axe-in.png", "img/inv-stone-axe-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Candy Axe", "Harvest a lot of Wood", wn.VMMNM, [
            [Mv.mvm, 150],
            [Mv.mWm, 7]
        ], 1, [
            [mw.wmW, 80000]
        ], 5),
        state: 4,
        stack: 1,
        Nw: Nm.vwN,
        wait: 10
    }, {
        id: Mv.wVv,
        NN: {
            src: ["img/inv-workbench-out.png", "img/inv-workbench-in.png", "img/inv-workbench-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Workbench", "Allow you to make new items.", wn.mNm, [
            [Mv.mvm, 40],
            [Mv.NmV, 20]
        ], 1, [
            [mw.wVn, 15000],
            [mw.wVv, 15000]
        ]),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 1,
        wvn: mw.wVv,
        stack: 255,
        Nw: Nm.wVv,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-workbench.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-workbench.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.WMMwM,
        wvv: 16,
        Mmn: {
            src: "img/e-workbench.png",
            n: {
                v: 0
            }
        },
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: {
            src: "img/day-workbench.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mvm,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.nVmmn,
        NN: {
            src: ["img/inv-wood-spear-out.png", "img/inv-wood-spear-in.png", "img/inv-wood-spear-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Icy Spear", "Don't forget to pick it up.", wn.MMN, [
            [Mv.mvm, 70]
        ], 1, [
            [mw.wVn, 15000],
            [mw.wVv, 20000]
        ]),
        state: 5,
        stack: 1,
        Nw: Nm.nVmmn,
        wait: 10
    }, {
        id: Mv.nWWVW,
        NN: {
            src: ["img/inv-wood-bow-out.png", "img/inv-wood-bow-in.png", "img/inv-wood-bow-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wood Bow", "Where are the cowboys?", wn.MMN, [
            [Mv.mvm, 60],
            [Mv.nMWwV, 2]
        ], 1, [
            [mw.wVn, 35000],
            [mw.wVv, 50000]
        ]),
        Wvn: Mv.nMMWV,
        NnnWn: 1,
        state: 6,
        stack: 1,
        Nw: Nm.nWWVW,
        wait: 10
    }, {
        id: Mv.www,
        NN: {
            src: ["img/inv-9mm-out.png", "img/inv-9mm-in.png", "img/inv-9mm-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("9MM", "I hope you know how to aim.", wn.MMN, [
            [Mv.VWv, 6],
            [Mv.mWm, 9]
        ], 1, [
            [mw.wmW, 160000]
        ], 7),
        state: 8,
        Wvn: Mv.MWv,
        stack: 1,
        Nw: Nm.www,
        wait: 10
    }, {
        id: Mv.NmVWW,
        NN: {
            src: ["img/inv-desert-eagle-out.png", "img/inv-desert-eagle-in.png", "img/inv-desert-eagle-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Desert Eagle", "Pretty useful for self-defense.", wn.MMN, [
            [Mv.VWM, 4],
            [Mv.mWm, 2]
        ], 1, [
            [mw.wmW, 180000]
        ], 9, Mv.www),
        state: 9,
        Wvn: Mv.MWv,
        stack: 1,
        Nw: Nm.NmVWW,
        wait: 10
    }, {
        id: Mv.Wnwnm,
        NN: {
            src: ["img/inv-shotgun-out.png", "img/inv-shotgun-in.png", "img/inv-shotgun-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Shotgun", "He's dead now, don't you think?", wn.MMN, [
            [Mv.VWM, 6],
            [Mv.mWm, 6]
        ], 1, [
            [mw.wmW, 200000]
        ], 11),
        state: 7,
        Wvn: Mv.mVMnN,
        stack: 1,
        Nw: Nm.Wnwnm,
        wait: 10
    }, {
        id: Mv.nvmVv,
        NN: {
            src: ["img/inv-ak47-out.png", "img/inv-ak47-in.png", "img/inv-ak47-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("AK47", "Revolution time", wn.MMN, [
            [Mv.VWM, 14],
            [Mv.mWm, 8]
        ], 1, [
            [mw.wmW, 180000]
        ], 12, Mv.WwvMw),
        state: 10,
        Wvn: Mv.Mwwww,
        stack: 1,
        Nw: Nm.nvmVv,
        wait: 10
    }, {
        id: Mv.NnmNm,
        NN: {
            src: ["img/inv-sniper-out.png", "img/inv-sniper-in.png", "img/inv-sniper-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Sniper", "For the very angry shy", wn.MMN, [
            [Mv.VWM, 10],
            [Mv.mWm, 8]
        ], 1, [
            [mw.wmW, 180000]
        ], 13),
        state: 11,
        Wvn: Mv.Mwwww,
        stack: 1,
        Nw: Nm.NnmNm,
        wait: 10
    }, {
        id: Mv.VNn,
        NN: {
            src: ["img/inv-wood-wall-out.png", "img/inv-wood-wall-in.png", "img/inv-wood-wall-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wooden Wall", "Protected from the wind.", wn.MVV, [
            [Mv.mvm, 20]
        ], 1, [
            [mw.wVv, 10000]
        ]),
        state: 21,
        wWV: -1,
        WWn: 1,
        z: 1,
        stack: 255,
        Nw: Nm.VNn,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-wood-wall.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-wood-wall.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.VNn,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.mmV,
        VmMnV: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        Mwv: [{
            src: "img/day-wood-wall-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: [{
            src: "img/day-wood-wall0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-wall46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mvm,
        wmw: 80,
        vmN: 315360000000,
        life: 3000,
        playerState: 0
    }, {
        id: Mv.Vww,
        NN: {
            src: ["img/inv-stone-wall-out.png", "img/inv-stone-wall-in.png", "img/inv-stone-wall-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Stone Wall", "Saved the 3 little pigs.", wn.MVV, [
            [Mv.NmV, 20]
        ], 1, [
            [mw.wVv, 15000]
        ], 3),
        state: 21,
        wWV: -1,
        WWn: 1,
        z: 1,
        stack: 255,
        Nw: Nm.Vww,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-wall.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-wall.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.Vww,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.mmV,
        VmMnV: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        Mwv: [{
            src: "img/day-stone-wall-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mVvWW,
        MmV: vv.NmN,
        vN: [{
            src: "img/day-stone-wall0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-wall46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.NmV,
        wmw: 80,
        vmN: 315360000000,
        life: 7000,
        playerState: 0
    }, {
        id: Mv.wvM,
        NN: {
            src: ["img/inv-steel-wall-out.png", "img/inv-steel-wall-in.png", "img/inv-steel-wall-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gingerbread Wall", "Afraid we'll find you?", wn.MVV, [
            [Mv.mWm, 3]
        ], 1, [
            [mw.wmW, 20000]
        ], 6, Mv.Vww),
        state: 21,
        wWV: -1,
        WWn: 1,
        z: 1,
        stack: 255,
        Nw: Nm.wvM,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-wall.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-wall.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.wvM,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.mmV,
        VmMnV: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        Mwv: [{
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall-broken0.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall-broken1.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall-broken2.png?raw=true",
            n: {
                v: 0
            }
        }],
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall0.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall1.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall2.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall3.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall4.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall5.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall6.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall7.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall8.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall9.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall10.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall11.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall12.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall13.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall14.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall15.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall16.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall17.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "img/day-gingerbread-wall18.png",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall19.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall20.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall21.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall22.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall23.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall24.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall25.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall26.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall27.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall28.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall29.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall30.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall31.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall32.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall110.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall90.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall35.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall36.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall100.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall80.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall39.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall40.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall41.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall42.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall43.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall44.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall45.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-wall46.png?raw=true",
            n: {
                v: 0
            }
        }],
        wMM: Nv.nvM,
        wmw: 80,
        vmN: 315360000000,
        life: 15000,
        playerState: 0
    }, {
        id: Mv.vmwww,
        NN: {
            src: ["img/inv-wood-door-out.png", "img/inv-wood-door-in.png", "img/inv-wood-door-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wooden Low Door", "You can shoot through it.", wn.MVV, [
            [Mv.mvm, 40]
        ], 1, [
            [mw.wVv, 15000]
        ]),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 0,
        stack: 255,
        Nw: Nm.vmwww,
        wait: 10,
        messageHandler: 600,
        width: [100, 35, 100, 35],
        height: [35, 100, 35, 100],
        Mmw: [0, -30, 0, 30],
        NVn: [30, 0, -30, 0],
        VVN: [0, 0, 0, 65],
        VwW: [65, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-wood-door.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-wood-door.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 1,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]] / 2,
        vmwWW: [1, 0, -1, 0],
        mwnmN: [0, -1, 0, 1],
        mNmVV: [0, 0, 65, 0],
        wmwvm: [0, 0, 0, 65],
        VmmNn: [35, 100, 35, 100],
        VMWMN: [100, 35, 100, 35],
        WnVmn: 6,
        vnNvV: 46,
        MW: VN.NvM,
        wvv: 15,
        Mmn: {
            src: "img/e-opendoor.png",
            n: {
                v: 0
            }
        },
        NMMwM: {
            src: "img/e-closedoor.png",
            n: {
                v: 0
            }
        },
        Mwv: [{
            src: "img/day-wood-door-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-door-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-door-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: {
            src: "img/day-wood-door.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mvm,
        wmw: 55,
        vmN: 315360000000,
        life: 2000,
        playerState: 0
    }, {
        id: Mv.nVV,
        NN: {
            src: ["img/inv-stone-door-out.png", "img/inv-stone-door-in.png", "img/inv-stone-door-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Stone Low Door", "You can shoot through it.", wn.MVV, [
            [Mv.NmV, 40]
        ], 1, [
            [mw.wVv, 15000]
        ], 3),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 0,
        stack: 255,
        Nw: Nm.nVV,
        wait: 10,
        messageHandler: 600,
        width: [100, 35, 100, 35],
        height: [35, 100, 35, 100],
        Mmw: [0, -30, 0, 30],
        NVn: [30, 0, -30, 0],
        VVN: [0, 0, 0, 65],
        VwW: [65, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-door.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-door.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 1,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]] / 2,
        vmwWW: [1, 0, -1, 0],
        mwnmN: [0, -1, 0, 1],
        mNmVV: [0, 0, 65, 0],
        wmwvm: [0, 0, 0, 65],
        VmmNn: [35, 100, 35, 100],
        VMWMN: [100, 35, 100, 35],
        WnVmn: 6,
        vnNvV: 46,
        MW: VN.NvM,
        wvv: 15,
        Mmn: {
            src: "img/e-opendoor.png",
            n: {
                v: 0
            }
        },
        NMMwM: {
            src: "img/e-closedoor.png",
            n: {
                v: 0
            }
        },
        Mwv: [{
            src: "img/day-stone-door-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-door-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-door-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mVvWW,
        MmV: vv.NmN,
        vN: {
            src: "img/day-stone-door.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.NmV,
        wmw: 55,
        vmN: 315360000000,
        life: 5000,
        playerState: 0
    }, {
        id: Mv.nmvwv,
        NN: {
            src: ["img/inv-steel-door-out.png", "img/inv-steel-door-in.png", "img/inv-steel-door-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gingerbread Low Door", "Killing at home, for more comfort.", wn.MVV, [
            [Mv.mWm, 6]
        ], 1, [
            [mw.wmW, 30000]
        ], 6, Mv.nVV),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 0,
        stack: 255,
        Nw: Nm.nmvwv,
        wait: 10,
        messageHandler: 600,
        width: [100, 35, 100, 35],
        height: [35, 100, 35, 100],
        Mmw: [0, -30, 0, 30],
        NVn: [30, 0, -30, 0],
        VVN: [0, 0, 0, 65],
        VwW: [65, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-door.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-door.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 1,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]] / 2,
        vmwWW: [1, 0, -1, 0],
        mwnmN: [0, -1, 0, 1],
        mNmVV: [0, 0, 65, 0],
        wmwvm: [0, 0, 0, 65],
        VmmNn: [35, 100, 35, 100],
        VMWMN: [100, 35, 100, 35],
        WnVmn: 6,
        vnNvV: 46,
        MW: VN.NvM,
        wvv: 15,
        Mmn: {
            src: "img/e-opendoor.png",
            n: {
                v: 0
            }
        },
        NMMwM: {
            src: "img/e-closedoor.png",
            n: {
                v: 0
            }
        },
        Mwv: [{
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smalldoors-broken0.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smalldoors-broken1.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smalldoors-broken2.png?raw=true",
            n: {
                v: 0
            }
        }],
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smalldoors-broken0.png?raw=true",
            n: {
                v: 0
            }
        },
        wMM: Nv.nvM,
        wmw: 55,
        vmN: 315360000000,
        life: 10000,
        playerState: 0
    }, {
        id: Mv.NmvMv,
        NN: {
            src: ["img/inv-campfire-out.png", "img/inv-campfire-in.png", "img/inv-campfire-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Campfire", "Warm you when you're cold.", wn.mNm, [
            [Mv.mvm, 30],
            [Mv.NmV, 5]
        ], 1, [
            [mw.wVn, 8000],
            [mw.wVv, 15000]
        ]),
        state: 21,
        wWV: 15000,
        WWn: -1,
        z: 0,
        wvn: mw.VmM,
        stack: 255,
        Nw: Nm.NmvMv,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-campfire.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-campfire.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: VVNww,
        MW: VN.vNmWv,
        NmMnn: VN.VmwWw,
        wvv: 16,
        Mmn: {
            src: "img/e-campfire.png",
            n: {
                v: 0
            }
        },
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: {
            src: "img/day-campfire.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mvm,
        wmw: 80,
        vmN: (1000 * 60) * 10,
        life: 150,
        playerState: 0
    }, {
        id: Mv.MWv,
        NN: {
            src: ["img/inv-bullet-9mm-out.png", "img/inv-bullet-9mm-in.png", "img/inv-bullet-9mm-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Bullet", "For 9MM, Desert Eagle, and MP5 ", wn.MMN, [
            [Mv.MWW, 3],
            [Mv.mWm, 3],
            [Mv.Mnn, 3]
        ], 30, [
            [mw.wmW, 10000]
        ], 6),
        stack: 255,
        Nw: Nm.MWv
    }, {
        id: Mv.mVMnN,
        NN: {
            src: ["img/inv-bullet-shotgun-out.png", "img/inv-bullet-shotgun-in.png", "img/inv-bullet-shotgun-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Cartridge", "For Shotgun", wn.MMN, [
            [Mv.VWM, 1],
            [Mv.mWm, 4],
            [Mv.Mnn, 4]
        ], 15, [
            [mw.wmW, 10000]
        ], 10),
        stack: 255,
        Nw: Nm.mVMnN
    }, {
        id: Mv.Mwwww,
        NN: {
            src: ["img/inv-bullet-sniper-out.png", "img/inv-bullet-sniper-in.png", "img/inv-bullet-sniper-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Heavy Bullet", "For Sniper, and AK47", wn.MMN, [
            [Mv.VWM, 1],
            [Mv.mWm, 4],
            [Mv.Mnn, 4]
        ], 30, [
            [mw.wmW, 10000]
        ], 11),
        stack: 255,
        Nw: Nm.Mwwww
    }, {
        id: Mv.nwVWW,
        NN: {
            src: ["img/inv-medikit-out.png", "img/inv-medikit-in.png", "img/inv-medikit-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Medkit", "Regenerate your life.", wn.mwMnV, [
            [Mv.Wwn, 2],
            [Mv.VVWNV, 1],
            [Mv.Vmw, 2],
            [Mv.mWm, 2]
        ], 1, [
            [mw.wmW, 80000]
        ], 10),
        state: 17,
        stack: 2,
        Nw: Nm.nwVWW,
        wait: 10
    }, {
        id: Mv.VVWNV,
        NN: {
            src: ["img/inv-bandage-out.png", "img/inv-bandage-in.png", "img/inv-bandage-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Bandage", "To heal the boo-boos.", wn.mwMnV, [
            [Mv.Wwn, 1],
            [Mv.Vmw, 2]
        ], 1, [
            [mw.VWN, 20000]
        ]),
        state: 18,
        stack: 5,
        Nw: Nm.VVWNV,
        wait: 10
    }, {
        id: Mv.MvmWw,
        NN: {
            src: ["img/inv-soda-out.png", "img/inv-soda-in.png", "img/inv-soda-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Soda", "Give energy.", wn.mNm, [
            [Mv.NwNVV, 1],
            [Mv.VnM, 1],
            [Mv.WwwVV, 1]
        ], 1, [
            [mw.VmM, 40000],
            [mw.mnM, 40000]
        ], 5),
        state: 19,
        stack: 5,
        Nw: Nm.MvmWw,
        Mmnmn: 2,
        WmVwv: Mv.WwwVV,
        wait: 10
    }, {
        id: Mv.WwvMw,
        NN: {
            src: ["img/inv-MP5-out.png", "img/inv-MP5-in.png", "img/inv-MP5-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("MP5", "Not bad.", wn.MMN, [
            [Mv.VWM, 6],
            [Mv.mWm, 6]
        ], 1, [
            [mw.wmW, 200000]
        ], 10),
        state: 20,
        Wvn: Mv.MWv,
        stack: 1,
        Nw: Nm.WwvMw,
        wait: 10
    }, {
        id: Mv.NMV,
        NN: {
            src: ["img/inv-headscarf-out.png", "img/inv-headscarf-in.png", "img/inv-headscarf-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Deer-hat", "Warm you up.", wn.mNV, [
            [Mv.Wwn, 1],
            [Mv.Vmw, 1]
        ], 1, [
            [mw.VWN, 60000]
        ]),
        attributes: 1,
        stack: 1,
        Nw: Nm.NMV,
        wait: 10,
        WwM: 0.00085,
        Nwm: 0,
        VWm: 0,
        Wmn: 0,
        WvN: 0,
        WwV: 0,
        VMN: 0
    }, {
        id: Mv.NwW,
        NN: {
            src: ["img/inv-chapka-out.png", "img/inv-chapka-in.png", "img/inv-chapka-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Elf-hat", "You look like a real woodcutter.", wn.mNV, [
            [Mv.Wwn, 6],
            [Mv.Vmw, 8],
            [Mv.NMV, 1]
        ], 1, [
            [mw.VWN, 120000]
        ], 7),
        attributes: 2,
        stack: 1,
        Nw: Nm.NwW,
        wait: 10,
        WwM: 0.0017,
        Nwm: 0,
        VWm: 0,
        Wmn: 0,
        WvN: 0,
        WwV: 0,
        VMN: 0
    }, {
        id: Mv.mnwnN,
        NN: {
            src: ["img/inv-coat-out.png", "img/inv-coat-in.png", "img/inv-coat-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Winter Snowman", "Is the weather really that cold?", wn.mNV, [
            [Mv.Wwn, 15],
            [Mv.Vmw, 20],
            [Mv.NwW, 1]
        ], 1, [
            [mw.VWN, 180000]
        ], 9, Mv.NwW),
        attributes: 3,
        stack: 1,
        Nw: Nm.mnwnN,
        wait: 10,
        WwM: 0.0026,
        Nwm: 0,
        VWm: 0,
        Wmn: 0,
        WvN: 0,
        WwV: 0,
        VMN: 0
    }, {
        id: Mv.wvmnM,
        NN: {
            src: ["img/inv-gaz-mask-out.png", "img/inv-gaz-mask-in.png", "img/inv-gaz-mask-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Radiation Mask", "Protect you from Radioactivity.", wn.mNV, [
            [Mv.mWm, 1],
            [Mv.Wwn, 1],
            [Mv.Vmw, 2]
        ], 1, [
            [mw.VWN, 60000]
        ]),
        attributes: 4,
        stack: 1,
        Nw: Nm.wvmnM,
        wait: 10,
        WwM: 0,
        Nwm: 0,
        VWm: 0,
        Wmn: 0,
        WvN: 0,
        WwV: 0.009,
        VMN: 0
    }, {
        id: Mv.mVWMw,
        NN: {
            src: ["img/inv-gaz-protection-out.png", "img/inv-gaz-protection-in.png", "img/inv-gaz-protection-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Min. Radiation Suit", "Previously, on Breaking Bad.", wn.mNV, [
            [Mv.VWM, 2],
            [Mv.mWm, 2],
            [Mv.Wwn, 4],
            [Mv.Vmw, 4],
            [Mv.wvmnM, 1]
        ], 1, [
            [mw.VWN, 90000]
        ], 8),
        attributes: 5,
        stack: 1,
        Nw: Nm.mVWMw,
        wait: 10,
        WwM: 0.0006,
        Nwm: 0,
        VWm: 0,
        Wmn: 0,
        WvN: 0,
        WwV: 0.016,
        VMN: 0
    }, {
        id: Mv.vmMMM,
        NN: {
            src: ["img/inv-radiation-suit-out.png", "img/inv-radiation-suit-in.png", "img/inv-radiation-suit-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Radiation Suit", "Let's not grow a second head.", wn.mNV, [
            [Mv.VWM, 6],
            [Mv.mWm, 4],
            [Mv.Wwn, 8],
            [Mv.Vmw, 20],
            [Mv.mVWMw, 1]
        ], 1, [
            [mw.VWN, 180000]
        ], 10, Mv.mVWMw),
        attributes: 6,
        stack: 1,
        Nw: Nm.vmMMM,
        wait: 10,
        WwM: 0,
        Nwm: 0,
        VWm: 0,
        Wmn: 0,
        WvN: 0,
        WwV: 0.022,
        VMN: -0.01
    }, {
        id: Mv.nMMWV,
        NN: {
            src: ["img/inv-wood-arrow-out.png", "img/inv-wood-arrow-in.png", "img/inv-wood-arrow-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wood Arrow", "Needed to use bow.", wn.MMN, [
            [Mv.mvm, 40]
        ], 5, [
            [mw.wVn, 15000],
            [mw.wVv, 10000]
        ]),
        stack: 255,
        Nw: Nm.nMMWV
    }, {
        id: Mv.nwN,
        NN: {
            src: ["img/inv-campfire-bbq-out.png", "img/inv-campfire-bbq-in.png", "img/inv-campfire-bbq-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Firepit", "Warm up and melt iron slowly.", wn.mNm, [
            [Mv.mvm, 120],
            [Mv.NmV, 20],
            [Mv.nvM, 4]
        ], 1, [
            [mw.wVv, 20000]
        ], 3),
        state: 21,
        wWV: 20000,
        WWn: -1,
        z: 0,
        wvn: mw.mnM,
        stack: 255,
        Nw: Nm.nwN,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-campfire-bbq.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-campfire-bbq.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: VVNww,
        MW: VN.vNmWv,
        NmMnn: VN.VmwWw,
        wvv: 16,
        Mmn: {
            src: "img/e-campfire-bbq.png",
            n: {
                v: 0
            }
        },
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: {
            src: "img/day-campfire-bbq.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mvm,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.mnm,
        NN: {
            src: ["img/inv-smelter-out.png", "img/inv-smelter-in.png", "img/inv-smelter-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Smelter", "Melt iron, uranium and alloys", wn.mNm, [
            [Mv.mWm, 6],
            [Mv.VMn, 1]
        ], 1, [
            [mw.wmW, 100000]
        ], 10),
        state: 21,
        wWV: 42000,
        WWn: 1,
        z: 1,
        wvn: mw.mnm,
        stack: 255,
        Nw: Nm.mnm,
        wait: 10,
        messageHandler: 1000,
        width: [100, 260, 100, 260],
        height: [260, 100, 260, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, -80, 0, -80],
        VwW: [-80, 0, -80, 0],
        WnVMm: [-1, 0, -1, 0],
        WMNMN: [0, -1, 0, -1],
        vvv: {
            src: "img/day-clear-blue-smelter.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-smelter.png",
            n: {
                v: 0
            }
        },
        NNVMW: [-20.5, -101.5, 20.5, 101.5],
        nNWWv: [101.5, -20.5, -101, 20.5],
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.Mwvnn,
        wvv: 16,
        Mmn: {
            src: "img/e-smelter.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-smelter-off.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-smelter-on.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-smelter-light-up.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-smelter-light-down.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 3000,
        playerState: 0
    }, {
        id: Mv.vwWVv,
        NN: {
            src: ["img/inv-wood-door1-out.png", "img/inv-wood-door1-in.png", "img/inv-wood-door1-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wooden Door", "Let's hope it holds.", wn.MVV, [
            [Mv.mvm, 60]
        ], 1, [
            [mw.wVv, 20000]
        ]),
        state: 21,
        wWV: -1,
        WWn: 1,
        z: 1,
        stack: 255,
        Nw: Nm.vwWVv,
        wait: 10,
        messageHandler: 600,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-wood-door1.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-wood-door1.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 1,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]],
        vmwWW: [1, -1, -1, 1],
        mwnmN: [-1, -1, 1, 1],
        mNmVV: [0, 0, 0, 0],
        wmwvm: [0, 0, 0, 0],
        VmmNn: [100, 100, 100, 100],
        VMWMN: [100, 100, 100, 100],
        WnVmn: 17,
        vnNvV: 113,
        MW: VN.NvM,
        wvv: 15,
        Mmn: {
            src: "img/e-opendoor.png",
            n: {
                v: 0
            }
        },
        NMMwM: {
            src: "img/e-closedoor.png",
            n: {
                v: 0
            }
        },
        Mwv: [{
            src: "img/day-wood-door1-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-door1-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-door1-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: {
            src: "img/day-wood-door1.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mvm,
        wmw: 80,
        vmN: 315360000000,
        life: 2500,
        playerState: 0
    }, {
        id: Mv.vvwWM,
        NN: {
            src: ["img/inv-stone-door1-out.png", "img/inv-stone-door1-in.png", "img/inv-stone-door1-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Stone Door", "Not too heavy to open, I hope.", wn.MVV, [
            [Mv.NmV, 60]
        ], 1, [
            [mw.wVv, 20000]
        ], 3),
        state: 21,
        wWV: -1,
        WWn: 1,
        z: 1,
        stack: 255,
        Nw: Nm.vvwWM,
        wait: 10,
        messageHandler: 600,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-door1.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-door1.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 1,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]],
        vmwWW: [1, -1, -1, 1],
        mwnmN: [-1, -1, 1, 1],
        mNmVV: [0, 0, 0, 0],
        wmwvm: [0, 0, 0, 0],
        VmmNn: [100, 100, 100, 100],
        VMWMN: [100, 100, 100, 100],
        WnVmn: 17,
        vnNvV: 113,
        MW: VN.NvM,
        wvv: 15,
        Mmn: {
            src: "img/e-opendoor.png",
            n: {
                v: 0
            }
        },
        NMMwM: {
            src: "img/e-closedoor.png",
            n: {
                v: 0
            }
        },
        Mwv: [{
            src: "img/day-stone-door1-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-door1-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-door1-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mVvWW,
        MmV: vv.NmN,
        vN: {
            src: "img/day-stone-door1.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.NmV,
        wmw: 80,
        vmN: 315360000000,
        life: 6000,
        playerState: 0
    }, {
        id: Mv.NMwmm,
        NN: {
            src: ["img/inv-steel-door1-out.png", "img/inv-steel-door1-in.png", "img/inv-steel-door1-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gingerbread Door", "I guess you're safe.", wn.MVV, [
            [Mv.mWm, 9]
        ], 1, [
            [mw.wmW, 40000]
        ], 6, Mv.vvwWM),
        state: 21,
        wWV: -1,
        WWn: 1,
        z: 1,
        stack: 255,
        Nw: Nm.NMwmm,
        wait: 10,
        messageHandler: 600,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-door1.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-door1.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 1,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]],
        vmwWW: [1, -1, -1, 1],
        mwnmN: [-1, -1, 1, 1],
        mNmVV: [0, 0, 0, 0],
        wmwvm: [0, 0, 0, 0],
        VmmNn: [100, 100, 100, 100],
        VMWMN: [100, 100, 100, 100],
        WnVmn: 17,
        vnNvV: 113,
        MW: VN.NvM,
        wvv: 15,
        Mmn: {
            src: "img/e-opendoor.png",
            n: {
                v: 0
            }
        },
        NMMwM: {
            src: "img/e-closedoor.png",
            n: {
                v: 0
            }
        },
        Mwv: [{
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-steel-door1-broken0.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-steel-door1-broken1.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-steel-door1-broken2.png?raw=true",
            n: {
                v: 0
            }
        }],
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-steel-door1.png?raw=true",
            n: {
                v: 0
            }
        },
        wMM: Nv.nvM,
        wmw: 80,
        vmN: 315360000000,
        life: 12500,
        playerState: 0
    }, {
        id: Mv.MWW,
        NN: {
            src: ["img/inv-sulfur-out.png", "img/inv-sulfur-in.png", "img/inv-sulfur-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Sulfur", "Sulfur in such a cold landscape?", wn.MwMMN, [], 0, [
            [mw.nVm, 240000]
        ]),
        mnmnm: 4,
        mvwNM: 8,
        stack: 255,
        Nw: Nm.MWW,
        playerState: 32
    }, {
        id: Mv.mMN,
        NN: {
            src: ["img/inv-shaped-uranium-out.png", "img/inv-shaped-uranium-in.png", "img/inv-shaped-uranium-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Shaped Uranium", "Are you out of your mind?", wn.MwMMN, [
            [Mv.NMm, 1]
        ], 1, [
            [mw.mnm, 20000]
        ]),
        stack: 255,
        Nw: Nm.mMN,
        playerState: 0
    }, {
        id: Mv.wmW,
        NN: {
            src: ["img/inv-workbench2-out.png", "img/inv-workbench2-in.png", "img/inv-workbench2-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Research Bench", "Allow you to make new items", wn.mNm, [
            [Mv.mWm, 6],
            [Mv.VMn, 1]
        ], 1, [
            [mw.wVv, 50000]
        ], 6),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 1,
        wvn: mw.wmW,
        stack: 255,
        Nw: Nm.wmW,
        wait: 10,
        messageHandler: 1000,
        width: [100, 290, 100, 280],
        height: [280, 100, 280, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, -90, 0, -90],
        VwW: [-90, 0, -90, 0],
        WnVMm: [-1, 0, -1, 0],
        WMNMN: [0, -1, 0, -1],
        vvv: {
            src: "img/day-clear-blue-workbench2.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-workbench2.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.wmVnN,
        wvv: 16,
        Mmn: {
            src: "img/e-workbench2.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "img/day-workbench2.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 400,
        playerState: 0
    }, {
        id: Mv.NMm,
        NN: {
            src: ["img/inv-uranium-out.png", "img/inv-uranium-in.png", "img/inv-uranium-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Uranium", "Do you want to end up as Marie Curie?", wn.MwMMN, [], 0, [
            [mw.nVm, 240000]
        ]),
        mnmnm: 2,
        mvwNM: 4,
        stack: 255,
        Nw: Nm.NMm,
        playerState: 45
    }, {
        id: Mv.VWN,
        NN: {
            src: ["img/inv-weaving-machine-out.png", "img/inv-weaving-machine-in.png", "img/inv-weaving-machine-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Weaving Machine", "Allow you to sew clothes", wn.mNm, [
            [Mv.mvm, 80],
            [Mv.NmV, 20],
            [Mv.Wwn, 2]
        ], 1, [
            [mw.wVv, 60000]
        ]),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 1,
        wvn: mw.VWN,
        stack: 255,
        Nw: Nm.VWN,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-weaving-machine.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-weaving-machine.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.WMMwM,
        wvv: 16,
        Mmn: {
            src: "img/e-weaving-machine.png",
            n: {
                v: 0
            }
        },
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: {
            src: "img/day-weaving-machine.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mvm,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.NWMwm,
        NN: {
            src: ["img/inv-gasoline-out.png", "img/inv-gasoline-in.png", "img/inv-gasoline-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gasoline", "Fuel for Smelter", wn.mNm, [
            [Mv.wwwmw, 4],
            [Mv.MWW, 1]
        ], 1, [
            [mw.wmW, 20000]
        ]),
        stack: 255,
        Nw: Nm.NWMwm
    }, {
        id: Mv.vNv,
        NN: {
            src: ["img/inv-sulfur-pickaxe-out.png", "img/inv-sulfur-pickaxe-in.png", "img/inv-sulfur-pickaxe-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Sulfur Pickaxe", "Mine also Uranium", wn.VMMNM, [
            [Mv.VWM, 2],
            [Mv.mWm, 6],
            [Mv.MWW, 6]
        ], 1, [
            [mw.wmW, 90000]
        ], 9, Mv.MVv),
        state: 22,
        stack: 1,
        Nw: Nm.vNv,
        wait: 10
    }, {
        id: Mv.WWW,
        NN: {
            src: ["img/inv-chest-out.png", "img/inv-chest-in.png", "img/inv-chest-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wood chest", "You can't store food in.", wn.MVV, [
            [Mv.mvm, 50],
            [Mv.NmV, 20]
        ], 1, [
            [mw.wVv, 30000]
        ], 8),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 0,
        stack: 255,
        Nw: Nm.WWW,
        wait: 10,
        WVm: 1,
        messageHandler: 600,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-chest.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-chest.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]] / 2,
        MW: VN.WMMwM,
        wvv: 25,
        Mmn: {
            src: "img/e-chest.png",
            n: {
                v: 0
            }
        },
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: {
            src: "img/day-chest.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mvm,
        wmw: 55,
        vmN: 315360000000,
        life: 300,
        playerState: 0
    }, {
        id: Mv.mwvmN,
        NN: {
            src: ["img/inv-fridge-out.png", "img/inv-fridge-in.png", "img/inv-fridge-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Fridge", "Save your food.", wn.MVV, [
            [Mv.mWm, 5],
            [Mv.nVn, 4]
        ], 1, [
            [mw.wmW, 90000]
        ], 9),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 0,
        stack: 255,
        Nw: Nm.mwvmN,
        wait: 10,
        WVm: 1,
        MVNNM: 1,
        messageHandler: 600,
        width: [50, 100, 50, 100],
        height: [100, 50, 100, 50],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 50, 0],
        VwW: [0, 0, 0, 50],
        vvv: {
            src: "img/day-clear-blue-fridge.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-fridge.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]] / 2,
        MW: VN.WMMwM,
        wvv: 25,
        Mmn: {
            src: "img/e-fridge.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "img/day-fridge.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 55,
        vmN: 315360000000,
        life: 300,
        playerState: 0
    }, {
        id: Mv.WNnvM,
        NN: {
            src: ["img/inv-wood-floor-out.png", "img/inv-wood-floor-in.png", "img/inv-wood-floor-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wood floor", "Players can't spawn on it", wn.MVV, [
            [Mv.mvm, 15]
        ], 2, [
            [mw.wVv, 15000]
        ]),
        stack: 255,
        Nw: Nm.WNnvM,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: 2,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-wood-floor.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-wood-floor.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.WNnvM,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.vwMMN,
        Mwv: [{
            src: "img/day-wood-floor-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mWM,
        MmV: vv.WMm,
        vN: [{
            src: "img/day-wood-floor-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mvm,
        wmw: 80,
        vmN: 315360000000,
        life: 4000,
        playerState: 0
    }, {
        id: Mv.NWnMW,
        NN: {
            src: ["img/inv-hammer-out.png", "img/inv-hammer-in.png", "img/inv-hammer-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Candy Hammer", "Destroy walls quickly.", wn.VMMNM, [
            [Mv.mvm, 100],
            [Mv.mWm, 10]
        ], 1, [
            [mw.wmW, 30000]
        ], 7),
        state: 23,
        stack: 1,
        Nw: Nm.NWnMW,
        wait: 10
    }, {
        id: Mv.wvvvn,
        NN: {
            src: ["img/inv-sleeping-bag-out.png", "img/inv-sleeping-bag-in.png", "img/inv-sleeping-bag-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Sleeping Bag", "Once dead, you keep your base", wn.mNm, [
            [Mv.Vmw, 7],
            [Mv.Mnn, 7],
            [Mv.Wwn, 7]
        ], 1, [
            [mw.VWN, 20000]
        ], 9),
        stack: 255,
        Nw: Nm.wvvvn,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-sleeping-bag.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-sleeping-bag.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.nMVvw,
        mVW: vv.VMW,
        MmV: vv.MNm,
        vN: {
            src: "img/day-sleeping-bag.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.nMVVN,
        wmw: 80,
        vmN: 315360000000,
        life: 500,
        playerState: 0
    }, {
        id: Mv.wnNvW,
        NN: {
            src: ["img/inv-repair-hammer-out.png", "img/inv-repair-hammer-in.png", "img/inv-repair-hammer-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Repair Hammer", "Repair walls but require nails.", wn.VMMNM, [
            [Mv.mvm, 120],
            [Mv.mWm, 2]
        ], 1, [
            [mw.wVv, 30000]
        ], 5),
        state: 24,
        stack: 1,
        Nw: Nm.wnNvW,
        wait: 10
    }, {
        id: Mv.VNVwm,
        NN: {
            src: ["img/inv-nails-out.png", "img/inv-nails-in.png", "img/inv-nails-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Nails", "Needed to repair walls.", wn.mNm, [
            [Mv.mWm, 2]
        ], 85, [
            [mw.wVv, 20000]
        ]),
        stack: 255,
        Nw: Nm.VNVwm
    }, {
        id: Mv.wNvnw,
        NN: {
            src: ["img/inv-wood-floor-light-out.png", "img/inv-wood-floor-light-in.png", "img/inv-wood-floor-light-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Light Wood Floor", "Players can't spawn on it", wn.MVV, [
            [Mv.mvm, 15]
        ], 2, [
            [mw.wVv, 15000]
        ]),
        stack: 255,
        Nw: Nm.wNvnw,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: 2,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-woodlight-floor.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-woodlight-floor.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.wNvnw,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.vwMMN,
        Mwv: [{
            src: "img/day-wood-floor-light-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mWM,
        MmV: vv.WMm,
        vN: [{
            src: "img/day-wood-floor-light-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-floor-light-46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.VnMwV,
        wmw: 80,
        vmN: 315360000000,
        life: 4000,
        playerState: 0
    }, {
        id: Mv.NNmwn,
        NN: {
            src: ["img/inv-wood-smallwall-out.png", "img/inv-wood-smallwall-in.png", "img/inv-wood-smallwall-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wooden Low Wall", "You can shoot through it.", wn.MVV, [
            [Mv.mvm, 10]
        ], 1, [
            [mw.wVv, 10000]
        ]),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 0,
        stack: 255,
        Nw: Nm.NNmwn,
        wait: 10,
        messageHandler: 1000,
        width: [100, 35, 100, 35],
        height: [35, 100, 35, 100],
        Mmw: [0, -30, 0, 30],
        NVn: [30, 0, -30, 0],
        VVN: [0, 0, 0, 65],
        VwW: [65, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-wood-smallwall.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-wood-smallwall.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 1,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]] / 2,
        vmwWW: [1, 0, -1, 0],
        mwnmN: [0, -1, 0, 1],
        mNmVV: [0, 0, 65, 0],
        wmwvm: [0, 0, 0, 65],
        VmmNn: [35, 100, 35, 100],
        VMWMN: [100, 35, 100, 35],
        WnVmn: 6,
        vnNvV: 46,
        wnW: 0,
        MW: VN.wmM,
        Mwv: [{
            src: "img/day-wood-smallwalls-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: [{
            src: "img/day-wood-smallwalls-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-smallwalls-39.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mvm,
        wmw: 80,
        vmN: 315360000000,
        life: 3000,
        playerState: 0
    }, {
        id: Mv.wvWWW,
        NN: {
            src: ["img/inv-stone-smallwall-out.png", "img/inv-stone-smallwall-in.png", "img/inv-stone-smallwall-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Stone Low Wall", "You can shoot through it.", wn.MVV, [
            [Mv.NmV, 10]
        ], 1, [
            [mw.wVv, 15000]
        ], 3),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 0,
        stack: 255,
        Nw: Nm.wvWWW,
        wait: 10,
        messageHandler: 1000,
        width: [100, 35, 100, 35],
        height: [35, 100, 35, 100],
        Mmw: [0, -30, 0, 30],
        NVn: [30, 0, -30, 0],
        VVN: [0, 0, 0, 65],
        VwW: [65, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-smallwalls.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-smallwalls.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 1,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]] / 2,
        vmwWW: [1, 0, -1, 0],
        mwnmN: [0, -1, 0, 1],
        mNmVV: [0, 0, 65, 0],
        wmwvm: [0, 0, 0, 65],
        VmmNn: [35, 100, 35, 100],
        VMWMN: [100, 35, 100, 35],
        WnVmn: 6,
        vnNvV: 46,
        wnW: 0,
        MW: VN.wmM,
        Mwv: [{
            src: "img/day-stone-smallwalls-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mVvWW,
        MmV: vv.NmN,
        vN: [{
            src: "img/day-stone-smallwalls-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-smallwalls-39.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.NmV,
        wmw: 80,
        vmN: 315360000000,
        life: 7000,
        playerState: 0
    }, {
        id: Mv.nnVvn,
        NN: {
            src: ["img/inv-steel-smallwall-out.png", "img/inv-steel-smallwall-in.png", "img/inv-steel-smallwall-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gingerbread Low Wall", "You can shoot through it.", wn.MVV, [
            [Mv.mWm, 2]
        ], 1, [
            [mw.wmW, 20000]
        ], 6, Mv.wvWWW),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 0,
        stack: 255,
        Nw: Nm.nnVvn,
        wait: 10,
        messageHandler: 1000,
        width: [100, 35, 100, 35],
        height: [35, 100, 35, 100],
        Mmw: [0, -30, 0, 30],
        NVn: [30, 0, -30, 0],
        VVN: [0, 0, 0, 65],
        VwW: [65, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-smallwalls.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-smallwalls.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 1,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        angle: Math[networkMappings[179]] / 2,
        vmwWW: [1, 0, -1, 0],
        mwnmN: [0, -1, 0, 1],
        mNmVV: [0, 0, 65, 0],
        wmwvm: [0, 0, 0, 65],
        VmmNn: [35, 100, 35, 100],
        VMWMN: [100, 35, 100, 35],
        WnVmn: 6,
        vnNvV: 46,
        wnW: 0,
        MW: VN.wmM,
        Mwv: [{
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-broken0.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-broken1.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-broken2.png?raw=true",
            n: {
                v: 0
            }
        }],
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-0.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-1.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-2.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-3.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-4.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-5.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-6.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-23.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-8.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-9.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-10.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-11.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-12.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-13.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-14.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-15.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-16.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-17.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-18.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-19.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-20.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-21.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-22.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-23.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-24.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-25.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-26.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-27.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-28.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-29.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-30.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-31.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-32.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-33.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-34.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-35.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-36.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-37.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-38.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-smallwalls-39.png?raw=true",
            n: {
                v: 0
            }
        }],
        wMM: Nv.nvM,
        wmw: 55,
        vmN: 315360000000,
        life: 15000,
        playerState: 0
    }, {
        id: Mv.MVnnm,
        WWn: 0,
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: [],
        detail: {
            WnN: undefined
        },
        wMM: -1,
        MW: VN.WwnMn
    }, {
        id: Mv.wMNww,
        NN: {
            src: ["img/inv-tomato-soup-out.png", "img/inv-tomato-soup-in.png", "img/inv-tomato-soup-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Tomato Soup", "Has not yet been opened.", wn.mNm, [
            [Mv.WwwVV, 1],
            [Mv.nNm, 2]
        ], 1, [
            [mw.VmM, 15000],
            [mw.mnM, 7000]
        ]),
        state: 25,
        stack: 5,
        Nw: Nm.wMNww,
        Mmnmn: 2,
        WmVwv: Mv.WwwVV,
        wait: 10
    }, {
        id: Mv.MVn,
        NN: {
            src: ["img/inv-syringe-out.png", "img/inv-syringe-in.png", "img/inv-syringe-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Syringe", "Useful to make drugs.", wn.mwMnV, [
            [Mv.VWv, 1]
        ], 1, [
            [mw.wmW, 30000]
        ]),
        stack: 20,
        Nw: Nm.MVn,
        playerState: 50
    }, {
        id: Mv.VnM,
        NN: {
            src: ["img/inv-chemical-component-out.png", "img/inv-chemical-component-in.png", "img/inv-chemical-component-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Chemical Component", "Useful to make a drugs."),
        stack: 20,
        Nw: Nm.VnM,
        playerState: 50
    }, {
        id: Mv.mNmWV,
        NN: {
            src: ["img/inv-radaway-out.png", "img/inv-radaway-in.png", "img/inv-radaway-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("RadAway", "Reduce your radioactivity a lot.", wn.mwMnV, [
            [Mv.MVn, 1],
            [Mv.VnM, 1],
            [Mv.mVnMV, 1]
        ], 1, [
            [mw.MWw, 45000]
        ]),
        state: 26,
        stack: 5,
        Nw: Nm.mNmWV,
        wait: 10
    }, {
        id: Mv.NwmNN,
        NN: {
            src: ["img/inv-tomato-seed-out.png", "img/inv-tomato-seed-in.png", "img/inv-tomato-seed-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Tomato Seed", "A fruit or vegetable?", wn.WNWVW, [
            [Mv.nNm, 4]
        ], 1, [
            [mw.VmM, 30000],
            [mw.mnM, 20000]
        ]),
        stack: 40,
        Nw: Nm.NwmNN,
        vnNnM: Nm.nNm,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [30, 30, 30, 30],
        height: [30, 30, 30, 30],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [35, 35, 35, 35],
        VwW: [35, 35, 35, 35],
        vvv: {
            src: "img/day-clear-blue-tomato.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-tomato.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 0,
        behavior: Nwv.Mnwvw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.NwWnm,
        mVW: vv.mWM,
        MmV: vv.mWM,
        vN: [{
            src: "img/day-plant0-tomato.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant1-tomato.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant2-tomato.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant3-tomato.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant4-tomato.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.nNm,
        wmw: 68,
        vmN: ((5 * 8) * 60) * 1000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.nNm,
        NN: {
            src: ["img/inv-tomato-out.png", "img/inv-tomato-in.png", "img/inv-tomato-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Tomato", "Why did the tomato blush?"),
        stack: 20,
        Nw: Nm.nNm,
        wait: 5,
        Mmnmn: 10,
        WmVwv: Mv.wMVVv,
        state: 27,
        playerState: 24
    }, {
        id: Mv.wMVVv,
        NN: {
            src: ["img/inv-rotten-tomato-out.png", "img/inv-rotten-tomato-in.png", "img/inv-rotten-tomato-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Rotten Tomato", "Go on, have a bite!"),
        stack: 20,
        Nw: Nm.wMVVv,
        wait: 5,
        state: 28,
        playerState: 20
    }, {
        id: Mv.WwwVV,
        NN: {
            src: ["img/inv-can-out.png", "img/inv-can-in.png", "img/inv-can-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Can", "Useful to craft food can.", wn.mNm, [
            [Mv.mWm, 1]
        ], 1, [
            [mw.wVv, 20000]
        ]),
        state: 0,
        stack: 255,
        Nw: Nm.WwwVV
    }, {
        id: Mv.WNnMm,
        NN: {
            src: ["img/inv-wood-crossbow-out.png", "img/inv-wood-crossbow-in.png", "img/inv-wood-crossbow-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Wood Crossbow", "Shoot faster, reload slower", wn.MMN, [
            [Mv.mvm, 200],
            [Mv.Wwn, 2],
            [Mv.mWm, 1]
        ], 1, [
            [mw.wVv, 50000]
        ], 6),
        state: 29,
        Wvn: Mv.mNVMN,
        stack: 1,
        Nw: Nm.WNnMm,
        wait: 10
    }, {
        id: Mv.mNVMN,
        NN: {
            src: ["img/inv-wood-crossarrow-out.png", "img/inv-wood-crossarrow-in.png", "img/inv-wood-crossarrow-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Crossbow Arrows", "Needed to use crossbow.", wn.MMN, [
            [Mv.mvm, 40],
            [Mv.mWm, 1]
        ], 10, [
            [mw.wVv, 30000]
        ]),
        stack: 255,
        Nw: Nm.mNVMN
    }, {
        id: Mv.WnnWn,
        NN: {
            src: ["img/inv-nail-gun-out.png", "img/inv-nail-gun-in.png", "img/inv-nail-gun-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Nail Gun", "Repair walls from a distance", wn.VMMNM, [
            [Mv.mWm, 3],
            [Mv.mMv, 1],
            [Mv.VWv, 1],
            [Mv.nVn, 4]
        ], 1, [
            [mw.wmW, 30000]
        ], 7),
        state: 30,
        Wvn: Mv.VNVwm,
        stack: 1,
        Nw: Nm.WnnWn,
        wait: 10
    }, {
        id: Mv.VWVVn,
        NN: {
            src: ["img/inv-sawed-off-shotgun-out.png", "img/inv-sawed-off-shotgun-in.png", "img/inv-sawed-off-shotgun-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Sawed Off", "Shoot less far, do more damages", wn.MMN, [
            [Mv.Wnwnm, 1],
            [Mv.VWM, 6],
            [Mv.mWm, 6]
        ], 1, [
            [mw.wmW, 200000]
        ], 13, Mv.Wnwnm),
        state: 31,
        Wvn: Mv.mVMnN,
        stack: 1,
        Nw: Nm.VWVVn,
        wait: 10
    }, {
        id: Mv.MnmWv,
        NN: {
            src: ["img/inv-stone-floor-out.png", "img/inv-stone-floor-in.png", "img/inv-stone-floor-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Stone floor", "Players can't spawn on it", wn.MVV, [
            [Mv.NmV, 15]
        ], 2, [
            [mw.wVv, 15000]
        ], 4),
        stack: 255,
        Nw: Nm.MnmWv,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: 2,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-floor.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-floor.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.MnmWv,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.vwMMN,
        Mwv: [{
            src: "img/day-stone-floor-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mWM,
        MmV: vv.NmN,
        vN: [{
            src: "img/day-stone-floor-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-floor-46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.NmV,
        wmw: 80,
        vmN: 315360000000,
        life: 8000,
        playerState: 0
    }, {
        id: Mv.WmVWn,
        NN: {
            src: ["img/inv-tiling-floor-out.png", "img/inv-tiling-floor-in.png", "img/inv-tiling-floor-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Tiling floor", "Players can't spawn on it", wn.MVV, [
            [Mv.NmV, 15]
        ], 2, [
            [mw.wVv, 15000]
        ], 4),
        stack: 255,
        Nw: Nm.WmVWn,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: 2,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-tiling-floor.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-tiling-floor.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.WmVWn,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.vwMMN,
        Mwv: [{
            src: "img/day-tiling-floor-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mWM,
        MmV: vv.NmN,
        vN: [{
            src: "img/day-tiling-floor-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tiling-floor-46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.NmV,
        wmw: 80,
        vmN: 315360000000,
        life: 8000,
        playerState: 0
    }, {
        id: Mv.NWnWM,
        WWn: 0,
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: [],
        VwM: [],
        detail: {
            WnN: undefined
        },
        wMM: -1,
        MW: VN.NMvWw
    }, {
        id: Mv.NMMWW,
        NN: {
            src: ["img/inv-chips-out.png", "img/inv-chips-in.png", "img/inv-chips-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Crisps", "You salty?"),
        state: 32,
        stack: 5,
        Nw: Nm.NMMWW,
        Mmnmn: 2,
        WmVwv: Mv.WwWnV,
        wait: 10
    }, {
        id: Mv.WwWnV,
        NN: {
            src: ["img/inv-rotten-chips-out.png", "img/inv-rotten-chips-in.png", "img/inv-rotten-chips-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Expired Crisps", "Go on, have a bite!"),
        stack: 5,
        Nw: Nm.WwWnV,
        wait: 5,
        state: 33,
        playerState: 20
    }, {
        id: Mv.VMn,
        NN: {
            src: ["img/inv-electronic-part-out.png", "img/inv-electronic-part-in.png", "img/inv-electronic-part-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Electronic Parts", "Break TV's and Computers to find it"),
        stack: 255,
        Nw: Nm.VMn,
        playerState: 100
    }, {
        id: Mv.VWv,
        NN: {
            src: ["img/inv-junk-out.png", "img/inv-junk-in.png", "img/inv-junk-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Junk", "Find it in houses"),
        stack: 255,
        Nw: Nm.VWv,
        playerState: 40
    }, {
        id: Mv.wWn,
        NN: {
            src: ["img/inv-wires-out.png", "img/inv-wires-in.png", "img/inv-wires-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Big Wire", "Break big computers in power station (in the city)"),
        stack: 255,
        Nw: Nm.wWn,
        playerState: 40
    }, {
        id: Mv.nVn,
        NN: {
            src: ["img/inv-small-energy-cells-out.png", "img/inv-small-energy-cells-in.png", "img/inv-small-energy-cells-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Energy Cells", "Used for energy weapons/buildings", wn.mNm, [
            [Mv.VWM, 1],
            [Mv.mMN, 1]
        ], 30, [
            [mw.nvw, 28000]
        ], 6),
        stack: 255,
        Nw: Nm.nVn
    }, {
        id: Mv.wmnWN,
        NN: {
            src: ["img/inv-laser-pistol-out.png", "img/inv-laser-pistol-in.png", "img/inv-laser-pistol-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Laser Pistol", "Bullets are faster.", wn.MMN, [
            [Mv.mMN, 2],
            [Mv.wWn, 1],
            [Mv.VMn, 2],
            [Mv.VWM, 1],
            [Mv.mWm, 4]
        ], 1, [
            [mw.nvw, 180000]
        ], 14),
        state: 34,
        Wvn: Mv.nVn,
        stack: 1,
        Nw: Nm.wmnWN,
        wait: 10
    }, {
        id: Mv.nvw,
        NN: {
            src: ["img/inv-workbench3-out.png", "img/inv-workbench3-in.png", "img/inv-workbench3-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Tesla Bench", "Allow you to make powerful items", wn.mNm, [
            [Mv.VWM, 4],
            [Mv.mWm, 6],
            [Mv.VMn, 3],
            [Mv.wWn, 4],
            [Mv.mMN, 2]
        ], 1, [
            [mw.wmW, 120000]
        ], 10, Mv.wmW),
        state: 21,
        wWV: 60000,
        WWn: 0,
        z: 1,
        wvn: mw.nvw,
        stack: 255,
        Nw: Nm.nvw,
        wait: 10,
        messageHandler: 1000,
        width: [100, 260, 100, 260],
        height: [260, 100, 260, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, -80, 0, -80],
        VwW: [-80, 0, -80, 0],
        WnVMm: [-1, 0, -1, 0],
        WMNMN: [0, -1, 0, -1],
        vvv: {
            src: "img/day-clear-blue-workbench3.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-workbench3.png",
            n: {
                v: 0
            }
        },
        NNVMW: [-20.5, -101.5, 20.5, 101.5],
        nNWWv: [101.5, -20.5, -101, 20.5],
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.WmmMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.mWWmV,
        wvv: 16,
        Mmn: {
            src: "img/e-workbench3.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-workbench3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-workbench3-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-workbench3-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-workbench3-3.png",
            n: {
                v: 0
            }
        }],
        wnm: [{
            src: "img/day-tesla-light0.png",
            n: {
                v: 0
            }
        }, 0, {
            src: "img/day-tesla-light1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tesla-light2.png",
            n: {
                v: 0
            }
        }, 0, {
            src: "img/day-tesla-light3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tesla-light4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-tesla-light5.png",
            n: {
                v: 0
            }
        }, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 3000,
        playerState: 0
    }, {
        id: Mv.VWM,
        NN: {
            src: ["img/inv-alloys-out.png", "img/inv-alloys-in.png", "img/inv-alloys-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Alloys", "To craft powerful items", wn.MwMMN, [
            [Mv.nvM, 1],
            [Mv.VWv, 1],
            [Mv.MWW, 1]
        ], 1, [
            [mw.mnm, 10000]
        ]),
        stack: 255,
        Nw: Nm.VWM
    }, {
        id: Mv.wNv,
        NN: {
            src: ["img/inv-sulfur-axe-out.png", "img/inv-sulfur-axe-in.png", "img/inv-sulfur-axe-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Sulfur Axe", "You look cool with it.", wn.VMMNM, [
            [Mv.vwN, 1],
            [Mv.VWM, 8],
            [Mv.mWm, 10],
            [Mv.MWW, 20]
        ], 1, [
            [mw.wmW, 200000]
        ], 10, Mv.vwN),
        state: 35,
        stack: 1,
        Nw: Nm.wNv,
        wait: 10
    }, {
        id: Mv.NMWww,
        NN: {
            src: ["img/inv-landmine-out.png", "img/inv-landmine-in.png", "img/inv-landmine-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Landmine", "When you feel it, it's too late", wn.MMN, [
            [Mv.mWm, 4],
            [Mv.VWv, 1],
            [Mv.MWW, 2],
            [Mv.Mnn, 2]
        ], 1, [
            [mw.wmW, 40000]
        ], 9),
        stack: 20,
        Nw: Nm.NMWww,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [50, 50, 50, 50],
        height: [50, 50, 50, 50],
        VVN: [25, 25, 25, 25],
        VwW: [25, 25, 25, 25],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-landmine.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-landmine.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 1,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        currentDamage: 200,
        maxDamage: 400,
        wnW: 0,
        MW: VN.nvWww,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-landmine-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-landmine-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-landmine-2.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mWwvm,
        wmw: 80,
        vmN: 315360000000,
        life: 5,
        playerState: 0
    }, {
        id: Mv.mVmVm,
        NN: {
            src: ["img/inv-dynamite-out.png", "img/inv-dynamite-in.png", "img/inv-dynamite-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Dynamite", "Get out of here, it gonna blow!", wn.MMN, [
            [Mv.Wwn, 1],
            [Mv.Mnn, 2],
            [Mv.MWW, 2],
            [Mv.VWv, 1]
        ], 1, [
            [mw.wmW, 40000]
        ], 9),
        stack: 10,
        Nw: Nm.mVmVm,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-dynamite.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-dynamite.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 1,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        currentDamage: 180,
        maxDamage: 1400,
        wnW: 0,
        MW: VN.Vmwvw,
        mVW: vv.VMW,
        MmV: vv.mWM,
        vN: [{
            src: "img/day-dynamite.png",
            n: {
                v: 0
            }
        }, {
            src: "img/dynamite-yellow.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.NWnnw,
        wmw: 80,
        vmN: 5000,
        life: 100,
        playerState: 0
    }, {
        id: Mv.vMnWn,
        NN: {
            src: ["img/inv-C4-out.png", "img/inv-C4-in.png", "img/inv-C4-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("C4", "Explode when you hit the trigger!", wn.MMN, [
            [Mv.mVmVm, 2],
            [Mv.mMv, 1],
            [Mv.VWM, 2],
            [Mv.VMn, 1]
        ], 1, [
            [mw.wmW, 60000]
        ], 16, Mv.mVmVm),
        stack: 5,
        Nw: Nm.vMnWn,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-C4.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-C4.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 1,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        currentDamage: 255,
        maxDamage: 6000,
        WNm: 0,
        wnW: 0,
        MW: VN.Vmwvw,
        mVW: vv.VMW,
        MmV: vv.mWM,
        vN: [{
            src: "img/day-C4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/C4-red.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mWwvm,
        wmw: 80,
        vmN: 315360000000,
        life: 100,
        playerState: 0
    }, {
        id: Mv.vWvNv,
        NN: {
            src: ["img/inv-joystick-out.png", "img/inv-joystick-in.png", "img/inv-joystick-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("C4 Trigger", "Don't press the button or else...", wn.MMN, [
            [Mv.mWm, 5],
            [Mv.VMn, 1],
            [Mv.nVn, 8],
            [Mv.mMv, 1]
        ], 1, [
            [mw.wmW, 100000]
        ], 16, Mv.vMnWn),
        stack: 1,
        Nw: Nm.vWvNv,
        wait: 10,
        state: 36,
        playerState: 0
    }, {
        id: Mv.MWV,
        NN: {
            src: ["img/inv-composter-out.png", "img/inv-composter-in.png", "img/inv-composter-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Compost", "Allows to accelerate rotting", wn.mNm, [
            [Mv.mWm, 4],
            [Mv.VMn, 1]
        ], 1, [
            [mw.wmW, 100000]
        ], 8),
        state: 21,
        wWV: 10000,
        WWn: 0,
        z: 1,
        wvn: mw.MWV,
        stack: 255,
        Nw: Nm.MWV,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-composter.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-composter.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.wwmMn,
        wvv: 16,
        Mmn: {
            src: "img/e-composter.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-composter-off.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-composter.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 500,
        playerState: 0
    }, {
        id: Mv.VwmmV,
        NN: {
            src: ["img/inv-metal-helmet-out.png", "img/inv-metal-helmet-in.png", "img/inv-metal-helmet-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Metal Helmet", "Protects you from melee weapons", wn.mNV, [
            [Mv.mWm, 3],
            [Mv.nMWwV, 3],
            [Mv.Vmw, 3],
            [Mv.VNVwm, 80]
        ], 1, [
            [mw.wVv, 70000]
        ]),
        attributes: 7,
        stack: 1,
        Nw: Nm.VwmmV,
        wait: 10,
        WwM: 0,
        Nwm: 0.15,
        VWm: 0,
        Wmn: 0,
        WvN: 0,
        WwV: 0,
        VMN: -0.01
    }, {
        id: Mv.wMmnm,
        NN: {
            src: ["img/inv-welding-helmet-out.png", "img/inv-welding-helmet-in.png", "img/inv-welding-helmet-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Welding Helmet", "Protects you from melee weapons", wn.mNV, [
            [Mv.mWm, 10],
            [Mv.VWM, 2],
            [Mv.Vmw, 3],
            [Mv.VNVwm, 160],
            [Mv.VwmmV, 1]
        ], 1, [
            [mw.wmW, 140000]
        ], 7),
        attributes: 8,
        stack: 1,
        Nw: Nm.wMmnm,
        wait: 10,
        WwM: 0,
        Nwm: 0.4,
        VWm: 0,
        Wmn: 0,
        WvN: 0.05,
        WwV: 0,
        VMN: -0.02
    }, {
        id: Mv.NVVnV,
        NN: {
            src: ["img/inv-gladiator-helmet-out.png", "img/inv-gladiator-helmet-in.png", "img/inv-gladiator-helmet-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gladiator Helmet", "Strength and honor.", wn.mNV, [
            [Mv.mWm, 12],
            [Mv.VWM, 6],
            [Mv.Vmw, 4],
            [Mv.VNVwm, 255],
            [Mv.wMmnm, 1]
        ], 1, [
            [mw.wmW, 300000]
        ], 17, Mv.wMmnm),
        attributes: 9,
        stack: 1,
        Nw: Nm.NVVnV,
        wait: 10,
        WwM: 0,
        Nwm: 0.6,
        VWm: 0.1,
        Wmn: 0,
        WvN: 0.2,
        WwV: 0,
        VMN: -0.03
    }, {
        id: Mv.VMnnN,
        NN: {
            src: ["img/inv-leather-jacket-out.png", "img/inv-leather-jacket-in.png", "img/inv-leather-jacket-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Leather Jacket", "Protects you from guns", wn.mNV, [
            [Mv.Wwn, 2],
            [Mv.Vmw, 4]
        ], 1, [
            [mw.VWN, 70000]
        ]),
        attributes: 10,
        stack: 1,
        Nw: Nm.VMnnN,
        wait: 10,
        WwM: 0.0006,
        Nwm: 0,
        VWm: 0.2,
        Wmn: 0,
        WvN: 0,
        WwV: 0,
        VMN: 0
    }, {
        id: Mv.mMVvm,
        NN: {
            src: ["img/inv-kevlar-suit-out.png", "img/inv-kevlar-suit-in.png", "img/inv-kevlar-suit-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Kevlar Suit", "Protects you from guns", wn.mNV, [
            [Mv.mWm, 6],
            [Mv.Wwn, 4],
            [Mv.Vmw, 6],
            [Mv.VWM, 2],
            [Mv.VMnnN, 1]
        ], 1, [
            [mw.VWN, 100000]
        ], 12),
        attributes: 11,
        stack: 1,
        Nw: Nm.mMVvm,
        wait: 10,
        WwM: 0,
        Nwm: 0,
        VWm: 0.4,
        Wmn: 0,
        WvN: 0,
        WwV: 0,
        VMN: 0
    }, {
        id: Mv.Nwmmm,
        NN: {
            src: ["img/inv-SWAT-suit-out.png", "img/inv-SWAT-suit-in.png", "img/inv-SWAT-suit-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("SWAT Suit", "Protects you from guns", wn.mNV, [
            [Mv.mWm, 10],
            [Mv.Wwn, 10],
            [Mv.Vmw, 10],
            [Mv.VWM, 4],
            [Mv.mMVvm, 1]
        ], 1, [
            [mw.VWN, 200000]
        ], 18, Mv.mMVvm),
        attributes: 12,
        stack: 1,
        Nw: Nm.Nwmmm,
        wait: 10,
        WwM: 0,
        Nwm: 0.1,
        VWm: 0.7,
        Wmn: 0,
        WvN: 0.1,
        WwV: 0,
        VMN: -0.01
    }, {
        id: Mv.nnvvv,
        NN: {
            src: ["img/inv-protective-suit-out.png", "img/inv-protective-suit-in.png", "img/inv-protective-suit-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Protective Suit", "Protects you from explosives", wn.mNV, [
            [Mv.mWm, 6],
            [Mv.Wwn, 6],
            [Mv.Vmw, 6],
            [Mv.VWM, 2]
        ], 1, [
            [mw.VWN, 200000]
        ], 12, Mv.MMNWV),
        attributes: 13,
        stack: 1,
        Nw: Nm.nnvvv,
        wait: 10,
        WwM: 0.00085,
        Nwm: 0,
        VWm: 0,
        Wmn: 0,
        WvN: 0.9,
        WwV: 0,
        VMN: -0.03
    }, {
        id: Mv.nNvmw,
        NN: {
            src: ["img/inv-tesla-0-out.png", "img/inv-tesla-0-in.png", "img/inv-tesla-0-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Power Armor", "Protects you from energy weapons", wn.mNV, [
            [Mv.mWm, 20],
            [Mv.mMN, 2],
            [Mv.VMn, 1],
            [Mv.wWn, 2],
            [Mv.VWM, 2]
        ], 1, [
            [mw.nvw, 150000]
        ], 10),
        attributes: 14,
        stack: 1,
        Nw: Nm.nNvmw,
        wait: 10,
        WwM: 0,
        Nwm: 0,
        VWm: 0,
        Wmn: 0.3,
        WvN: 0,
        WwV: 0,
        VMN: 0
    }, {
        id: Mv.vNWwn,
        NN: {
            src: ["img/inv-tesla-armor-out.png", "img/inv-tesla-armor-in.png", "img/inv-tesla-armor-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Tesla Armor", "Protects you from energy weapons", wn.mNV, [
            [Mv.nNvmw, 1],
            [Mv.mMN, 10],
            [Mv.VMn, 5],
            [Mv.wWn, 5],
            [Mv.VWM, 10]
        ], 1, [
            [mw.nvw, 300000]
        ], 18, Mv.nNvmw, 3),
        attributes: 15,
        stack: 1,
        Nw: Nm.vNWwn,
        wait: 10,
        WwM: 0.00085,
        Nwm: 0.2,
        VWm: 0.2,
        Wmn: 0.75,
        WvN: 0.2,
        WwV: 0.01,
        VMN: -0.02
    }, {
        id: Mv.NNNWv,
        NN: {
            src: ["img/inv-wood-spike-out.png", "img/inv-wood-spike-in.png", "img/inv-wood-spike-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Icy Wooden Spike", "Hurt and slow down", wn.MVV, [
            [Mv.mvm, 80]
        ], 1, [
            [mw.wVv, 25000]
        ]),
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        stack: 40,
        Nw: Nm.NNNWv,
        wait: 10,
        messageHandler: 1000,
        width: [50, 50, 50, 50],
        height: [50, 50, 50, 50],
        VVN: [25, 25, 25, 25],
        VwW: [25, 25, 25, 25],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-wood-spike.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-wood-spike.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.mWwMn,
        hidden: [{
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-wood-spike-cover1.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-wood-spike-cover2.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-wood-spike-cover3.png?raw=true",
            n: {
                v: 0
            }
        }],
        WnwMM: [{
            src: "img/day-wood-spike-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-spike-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-wood-spike-3.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mvm,
        wmw: 80,
        vmN: 315360000000,
        life: 200,
        playerState: 0
    }, {
        id: Mv.wMmmV,
        NN: {
            src: ["img/inv-laser-submachine-out.png", "img/inv-laser-submachine-in.png", "img/inv-laser-submachine-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Laser Snowmachine", "It's the best weapon", wn.MMN, [
            [Mv.VWM, 10],
            [Mv.mWm, 6],
            [Mv.mMN, 6],
            [Mv.wWn, 2],
            [Mv.VMn, 3]
        ], 1, [
            [mw.nvw, 180000]
        ], 14, Mv.wmnWN, 2),
        state: 37,
        Wvn: Mv.nVn,
        stack: 1,
        Nw: Nm.wMmmV,
        wait: 10
    }, {
        id: Mv.Wmwmv,
        NN: {
            src: ["img/inv-grenade-out.png", "img/inv-grenade-in.png", "img/inv-grenade-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Icy Grenade", "Explodes when you throw it away.", wn.MMN, [
            [Mv.mWm, 2],
            [Mv.VWv, 2],
            [Mv.MWW, 2],
            [Mv.Mnn, 2]
        ], 2, [
            [mw.wmW, 30000]
        ], 10),
        state: 38,
        currentDamage: 130,
        maxDamage: 400,
        stack: 10,
        Nw: Nm.Wmwmv,
        wait: 10
    }, {
        id: Mv.wMWVm,
        NN: {
            src: ["img/inv-super-hammer-out.png", "img/inv-super-hammer-in.png", "img/inv-super-hammer-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Super Hammer", "Destroy indestructible walls."),
        state: 39,
        stack: 1,
        Nw: Nm.wMWVm,
        wait: 10
    }, {
        id: Mv.NwNVV,
        NN: {
            src: ["img/inv-ghoul-blood-out.png", "img/inv-ghoul-blood-in.png", "img/inv-ghoul-blood-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Ghoul Blood", "Find it on speedy ghouls"),
        stack: 255,
        Nw: Nm.NwNVV,
        playerState: 100
    }, {
        id: Mv.vvMmW,
        NN: {
            src: ["img/inv-camouflage-gear-out.png", "img/inv-camouflage-gear-in.png", "img/inv-camouflage-gear-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Camouflage Gear", "Hide you in the forest", wn.mNV, [
            [Mv.mvm, 90],
            [Mv.Wwn, 2],
            [Mv.Vmw, 2]
        ], 1, [
            [mw.VWN, 40000]
        ]),
        attributes: 16,
        stack: 1,
        Nw: Nm.vvMmW,
        wait: 10,
        WwM: 0,
        Nwm: 0,
        VWm: 0,
        Wmn: 0,
        WvN: 0,
        WwV: 0,
        VMN: 0
    }, {
        id: Mv.MWw,
        NN: {
            src: ["img/inv-agitator-out.png", "img/inv-agitator-in.png", "img/inv-agitator-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Agitator", "Allows to craft drugs", wn.mNm, [
            [Mv.mWm, 6],
            [Mv.VMn, 1]
        ], 1, [
            [mw.wmW, 100000]
        ], 8),
        state: 21,
        wWV: 100000,
        WWn: 0,
        z: 1,
        wvn: mw.MWw,
        stack: 255,
        Nw: Nm.MWw,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-agitator.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-agitator.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.VNVMN,
        wvv: 16,
        Mmn: {
            src: "img/e-agitator.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-agitator1-off.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-agitator1-on.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-agitator-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-agitator-2.png",
            n: {
                v: 0
            }
        }],
        MVMMm: [
            [-25.5, 21],
            [-21, -25.5],
            [25.5, -21],
            [21, 25.5]
        ],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 500,
        playerState: 0
    }, {
        id: Mv.MWWmV,
        NN: {
            src: ["img/inv-ghoul-drug-out.png", "img/inv-ghoul-drug-in.png", "img/inv-ghoul-drug-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Ghoul Drug", "Ghouls does not attack you.", wn.mwMnV, [
            [Mv.MVn, 1],
            [Mv.VnM, 1],
            [Mv.mVnMV, 1],
            [Mv.mMWmn, 1],
            [Mv.NwNVV, 1]
        ], 1, [
            [mw.MWw, 30000]
        ], 10),
        state: 40,
        stack: 5,
        Nw: Nm.MWWmV,
        wait: 10
    }, {
        id: Mv.mwwMv,
        NN: {
            src: ["img/inv-mushroom1-out.png", "img/inv-mushroom1-in.png", "img/inv-mushroom1-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Amanita", "Poisoned, really dangerous"),
        stack: 20,
        Nw: Nm.mwwMv,
        wait: 5,
        Mmnmn: 10,
        WmVwv: Mv.mNvmm,
        state: 41,
        playerState: 24
    }, {
        id: Mv.mVnMV,
        NN: {
            src: ["img/inv-mushroom2-out.png", "img/inv-mushroom2-in.png", "img/inv-mushroom2-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Boletus", "Can be eaten."),
        stack: 20,
        Nw: Nm.mVnMV,
        wait: 5,
        Mmnmn: 10,
        WmVwv: Mv.MnnvM,
        state: 42,
        playerState: 24
    }, {
        id: Mv.mMWmn,
        NN: {
            src: ["img/inv-mushroom3-out.png", "img/inv-mushroom3-in.png", "img/inv-mushroom3-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Russula", "Can be eaten."),
        stack: 20,
        Nw: Nm.mMWmn,
        wait: 5,
        Mmnmn: 10,
        WmVwv: Mv.NwMNm,
        state: 43,
        playerState: 24
    }, {
        id: Mv.mNvmm,
        NN: {
            src: ["img/inv-rotten-mushroom1-out.png", "img/inv-rotten-mushroom1-in.png", "img/inv-rotten-mushroom1-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Rotten Mushroom", "Go on, have a bite!"),
        stack: 20,
        Nw: Nm.mNvmm,
        wait: 5,
        state: 44,
        playerState: 20
    }, {
        id: Mv.MnnvM,
        NN: {
            src: ["img/inv-rotten-mushroom2-out.png", "img/inv-rotten-mushroom2-in.png", "img/inv-rotten-mushroom2-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Rotten Mushroom", "Go on, have a bite!"),
        stack: 20,
        Nw: Nm.MnnvM,
        wait: 5,
        state: 45,
        playerState: 20
    }, {
        id: Mv.NwMNm,
        NN: {
            src: ["img/inv-rotten-mushroom3-out.png", "img/inv-rotten-mushroom3-in.png", "img/inv-rotten-mushroom3-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Rotten Mushroom", "Go on, have a bite!"),
        stack: 20,
        Nw: Nm.NwMNm,
        wait: 5,
        state: 46,
        playerState: 20
    }, {
        id: Mv.NvMWn,
        NN: {
            src: ["img/inv-lapadoine-out.png", "img/inv-lapadoine-in.png", "img/inv-lapadoine-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Lapadone", "You are faster a certain time.", wn.mwMnV, [
            [Mv.MVn, 1],
            [Mv.VnM, 1],
            [Mv.mwwMv, 1],
            [Mv.NwNVV, 1]
        ], 1, [
            [mw.MWw, 45000]
        ], 14),
        state: 47,
        stack: 5,
        Nw: Nm.NvMWn,
        wait: 10
    }, {
        id: Mv.vwWmW,
        NN: {
            src: ["img/inv-lapabot-out.png", "img/inv-lapabot-in.png", "img/inv-lapabot-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Christmas LapaBot", "Repair your base for you", wn.mNm, [
            [Mv.mWm, 6],
            [Mv.VMn, 1],
            [Mv.mMv, 1],
            [Mv.VWM, 1]
        ], 1, [
            [mw.wmW, 100000]
        ], 8),
        stack: 5,
        Nw: Nm.vwWmW,
        vnNnM: Nm.nNm,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [30, 30, 30, 30],
        height: [30, 30, 30, 30],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [35, 35, 35, 35],
        VwW: [35, 35, 35, 35],
        vvv: {
            src: "img/clear-blue-lapabot.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-lapabot.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 0,
        behavior: Nwv.WmmMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.VmMmw,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/lapabot0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/lapabot1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/lapabot2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/lapabot3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/lapabot4.png",
            n: {
                v: 0
            }
        }],
        wMWVw: {
            src: "img/day-lapabot-builder.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 68,
        vmN: ((5 * 8) * 60) * 1000,
        life: 250,
        playerState: 0,
        vvvNV: 315360000000,
        MMVvv: NWM.vwWmW,
        Wnwvn: 20000,
        MMmMw: 4,
        mVVvw: 1
    }, {
        id: Mv.mMv,
        NN: {
            src: ["img/inv-small-wire-out.png", "img/inv-small-wire-in.png", "img/inv-small-wire-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Small Wire", "Find it on TV's and computers in abandonned houses"),
        stack: 255,
        Nw: Nm.mMv,
        playerState: 40
    }, {
        id: Mv.wWnNV,
        NN: {
            src: ["img/inv-pumpkin-out.png", "img/inv-pumpkin-in.png", "img/inv-pumpkin-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Pumpkin", "Eat it or craft a pumpkin ghoul"),
        stack: 20,
        Nw: Nm.wWnNV,
        wait: 5,
        Mmnmn: 10,
        WmVwv: Mv.mNNwW,
        state: 48,
        playerState: 24
    }, {
        id: Mv.mNNwW,
        NN: {
            src: ["img/inv-rotten-pumpkin-out.png", "img/inv-rotten-pumpkin-in.png", "img/inv-rotten-pumpkin-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Rotten Pumpkin", "You should not click"),
        stack: 20,
        Nw: Nm.mNNwW,
        wait: 5,
        state: 49,
        playerState: 20
    }, {
        id: Mv.nNNmW,
        NN: {
            src: ["img/inv-ghoul5-out.png", "img/inv-ghoul5-in.png", "img/inv-ghoul5-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Ghoul Seed", "Plant your pumpkin pet", -1, [
            [Mv.wWnNV, 1],
            [Mv.NwNVV, 1]
        ], 1, [
            [mw.VmM, 30000],
            [mw.mnM, 20000]
        ], 99),
        stack: 40,
        Nw: Nm.nNNmW,
        vnNnM: Nm.nNm,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [30, 30, 30, 30],
        height: [30, 30, 30, 30],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [35, 35, 35, 35],
        VwW: [35, 35, 35, 35],
        vvv: {
            src: "img/clear-blue-root.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-root.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 0,
        behavior: Nwv.WmmMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.NwWnm,
        mVW: vv.VMW,
        MmV: vv.MNm,
        vN: [{
            src: "img/day-root0-ghoul.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-root1-ghoul.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-root2-ghoul.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-root3-ghoul.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-root4-ghoul.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.vNV,
        wmw: 68,
        vmN: ((5 * 8) * 60) * 1000,
        life: 250,
        playerState: 0,
        vvvNV: 120000,
        MMVvv: NWM.wMvvM,
        Wnwvn: 15000,
        MMmMw: 3,
        mVVvw: 0
    }, {
        id: Mv.nVm,
        NN: {
            src: ["img/inv-extractor-out.png", "img/inv-extractor-in.png", "img/inv-extractor-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Extractor", "Allows you to extract minerals from the ground", wn.mNm, [
            [Mv.VWM, 2],
            [Mv.mWm, 10],
            [Mv.mMN, 2],
            [Mv.mMv, 2],
            [Mv.VMn, 1]
        ], 1, [
            [mw.wmW, 100000]
        ], 12),
        state: 21,
        wWV: 740000,
        WWn: 0,
        z: 1,
        wvn: mw.nVm,
        stack: 255,
        Nw: Nm.nVm,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-extractor.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-extractor.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.Wwwwn,
        wvv: 16,
        Mmn: {
            src: "img/e-extractor.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-extractor.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-extractor-rotate.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-extractor-off.png",
            n: {
                v: 0
            }
        }],
        MVMMm: [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0]
        ],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 500,
        playerState: 0
    }, {
        id: Mv.NvMwv,
        NN: {
            src: ["img/inv-antidote-out.png", "img/inv-antidote-in.png", "img/inv-antidote-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Antidote", "Remove the withdrawal effects (pink skin)", wn.mwMnV, [
            [Mv.MVn, 1],
            [Mv.VnM, 1],
            [Mv.mwwMv, 1],
            [Mv.vmvVm, 1]
        ], 1, [
            [mw.MWw, 45000]
        ], 14),
        state: 50,
        stack: 5,
        Nw: Nm.NvMwv,
        wait: 10
    }, {
        id: Mv.vmvVm,
        NN: {
            src: ["img/inv-antidote-flower-out.png", "img/inv-antidote-flower-in.png", "img/inv-antidote-flower-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Rare Flower", "Use it to make an antidote"),
        stack: 5,
        Nw: Nm.vmvVm,
        playerState: 400
    }, {
        id: Mv.nMMVw,
        NN: {
            src: ["img/inv-seed-tree-out.png", "img/inv-seed-tree-in.png", "img/inv-seed-tree-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Tree Seed", "Plant your forest", wn.WNWVW, [
            [Mv.NmvmN, 1]
        ], 5, [
            [mw.VmM, 60000],
            [mw.mnM, 40000]
        ]),
        stack: 100,
        Nw: Nm.nMMVw,
        vnNnM: Nm.vNV,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [30, 30, 30, 30],
        height: [30, 30, 30, 30],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [35, 35, 35, 35],
        VwW: [35, 35, 35, 35],
        vvv: {
            src: "img/clear-blue-plant-tree.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-plant-tree.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 0,
        behavior: Nwv.MwNMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.WmVVm,
        mVW: vv.Mvm,
        MmV: vv.WMm,
        vN: [{
            src: "img/day-plant-tree0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant-tree1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant-tree2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant-tree3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-plant4-orange.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mvm,
        wmw: 68,
        vmN: ((5 * 8) * 60) * 1000,
        life: 150,
        playerState: 0
    }, {
        id: Mv.NmvmN,
        NN: {
            src: ["img/inv-acorn-out.png", "img/inv-acorn-in.png", "img/inv-acorn-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Acorn", "Eat it or plant a tree"),
        stack: 20,
        Nw: Nm.NmvmN,
        wait: 5,
        Mmnmn: 3,
        WmVwv: Mv.MMNNn,
        state: 51,
        playerState: 24
    }, {
        id: Mv.MMNNn,
        NN: {
            src: ["img/inv-rotten-acorn-out.png", "img/inv-rotten-acorn-in.png", "img/inv-rotten-acorn-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Rotten Acorn", "Not really good"),
        stack: 20,
        Nw: Nm.MMNNn,
        wait: 5,
        state: 52,
        playerState: 20
    }, {
        id: Mv.vvnnn,
        NN: {
            src: ["img/inv-laser-sniper-out.png", "img/inv-laser-sniper-in.png", "img/inv-laser-sniper-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Laser Sniper", "Faster than a sniper", wn.MMN, [
            [Mv.VWM, 8],
            [Mv.mWm, 6],
            [Mv.mMN, 5],
            [Mv.wWn, 3],
            [Mv.VMn, 3]
        ], 1, [
            [mw.nvw, 180000]
        ], 14, Mv.wmnWN, 2),
        state: 53,
        Wvn: Mv.nVn,
        stack: 1,
        Nw: Nm.vvnnn,
        wait: 10
    }, {
        id: Mv.VnMnW,
        NN: {
            src: ["img/inv-hal-bot-out.png", "img/inv-hal-bot-in.png", "img/inv-hal-bot-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Christmas HAL Bot", "Protect you", wn.mNm, [
            [Mv.mWm, 6],
            [Mv.VMn, 1],
            [Mv.mMv, 1],
            [Mv.VWM, 1]
        ], 1, [
            [mw.wmW, 100000]
        ], 8),
        stack: 5,
        Nw: Nm.VnMnW,
        vnNnM: Nm.nNm,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [30, 30, 30, 30],
        height: [30, 30, 30, 30],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [35, 35, 35, 35],
        VwW: [35, 35, 35, 35],
        vvv: {
            src: "img/clear-blue-hal-bot.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-hal-bot.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 0,
        behavior: Nwv.WmmMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.VmMmw,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/hal-bot0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/hal-bot1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/hal-bot2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/hal-bot3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/hal-bot4.png",
            n: {
                v: 0
            }
        }],
        wMWVw: {
            src: "img/day-hal-bot-builder.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 68,
        vmN: ((5 * 8) * 60) * 1000,
        life: 400,
        playerState: 0,
        vvvNV: 315360000000,
        MMVvv: NWM.VnMnW,
        Wnwvn: 8000,
        MMmMw: 4,
        mVVvw: 1
    }, {
        id: Mv.wvMvm,
        NN: {
            src: ["img/inv-tesla-bot-out.png", "img/inv-tesla-bot-in.png", "img/inv-tesla-bot-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Christmas Tesla Bot", "Protect you", wn.mNm, [
            [Mv.mMN, 3],
            [Mv.VMn, 1],
            [Mv.mMv, 3],
            [Mv.wWn, 3],
            [Mv.VWM, 3]
        ], 1, [
            [mw.nvw, 200000]
        ], 16),
        stack: 5,
        Nw: Nm.wvMvm,
        vnNnM: Nm.nNm,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [30, 30, 30, 30],
        height: [30, 30, 30, 30],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [35, 35, 35, 35],
        VwW: [35, 35, 35, 35],
        vvv: {
            src: "img/clear-blue-tesla-bot.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-tesla-bot.png",
            n: {
                v: 0
            }
        },
        NvM: 0,
        identifier: 0,
        behavior: Nwv.WmmMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.VmMmw,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/tesla-bot0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/tesla-bot1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/tesla-bot2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/tesla-bot3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/tesla-bot4.png",
            n: {
                v: 0
            }
        }],
        wMWVw: {
            src: "img/day-lapabot-builder.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 68,
        vmN: ((5 * 8) * 60) * 1000,
        life: 500,
        playerState: 0,
        vvvNV: 315360000000,
        MMVvv: NWM.wvMvm,
        Wnwvn: 20000,
        MMmMw: 4,
        mVVvw: 1
    }, {
        id: Mv.nnmNW,
        NN: {
            src: ["img/inv-wire0-out.png", "img/inv-wire0-in.png", "img/inv-wire0-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Cable", "Create automatic mechanisms", wn.Wnv, [
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.nnmNW,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-wire0.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-wire0.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 0,
        wmN: [
            [1, 1, 0, 0],
            [0, 0, 1, 1],
            [1, 1, 0, 0],
            [0, 0, 1, 1]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.WvvvM,
        mVW: vv.VMW,
        MmV: vv.MNm,
        vN: {
            src: "img/day-wire0.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.NMMWN,
        wmw: 40,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.NNMnv,
        NN: {
            src: ["img/inv-wire1-out.png", "img/inv-wire1-in.png", "img/inv-wire1-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Cable", "Create automatic mechanisms", wn.Wnv, [
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.NNMnv,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-wire1.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-wire1.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 0,
        wmN: [
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.WvvvM,
        mVW: vv.VMW,
        MmV: vv.MNm,
        vN: {
            src: "img/day-wire1.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.NMMWN,
        wmw: 40,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.mmvNn,
        NN: {
            src: ["img/inv-wire2-out.png", "img/inv-wire2-in.png", "img/inv-wire2-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Cable", "Create automatic mechanisms", wn.Wnv, [
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.mmvNn,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-wire2.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-wire2.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 0,
        wmN: [
            [0, 1, 0, 1],
            [0, 1, 1, 0],
            [1, 0, 1, 0],
            [1, 0, 0, 1]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.WvvvM,
        mVW: vv.VMW,
        MmV: vv.MNm,
        vN: {
            src: "img/day-wire2.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.NMMWN,
        wmw: 40,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.VNMmn,
        NN: {
            src: ["img/inv-wire3-out.png", "img/inv-wire3-in.png", "img/inv-wire3-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Cable", "Create automatic mechanisms", wn.Wnv, [
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.VNMmn,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-wire3.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-wire3.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 0,
        wmN: [
            [0, 1, 1, 1],
            [1, 1, 1, 0],
            [1, 0, 1, 1],
            [1, 1, 0, 1]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.WvvvM,
        mVW: vv.VMW,
        MmV: vv.MNm,
        vN: {
            src: "img/day-wire3.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.NMMWN,
        wmw: 40,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.NVWnw,
        NN: {
            src: ["img/inv-switch-out.png", "img/inv-switch-in.png", "img/inv-switch-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Switch", "Turn on/off mechanisms", wn.Wnv, [
            [Mv.mWm, 1],
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.NVWnw,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-switch.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-switch.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 1,
        wmN: [
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.MWwwM,
        wvv: 37,
        Mmn: {
            src: "img/e-turnon.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-switch-off.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-switch-on.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.wVmMw,
        NN: {
            src: ["img/inv-switch-or-out.png", "img/inv-switch-or-in.png", "img/inv-switch-or-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gate OR", "Activate only if an entry is on.", wn.Wnv, [
            [Mv.mWm, 1],
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.wVmMw,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-switch-or.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-switch-or.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 1,
        wmN: [
            [1, 0, 0, 0],
            [0, 0, 0, 1],
            [0, 1, 0, 0],
            [0, 0, 1, 0]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.WvvvM,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "img/day-switch-or.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.mmwWm,
        NN: {
            src: ["img/inv-switch-and-out.png", "img/inv-switch-and-in.png", "img/inv-switch-and-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gate AND", "Activate only if all entries are on.", wn.Wnv, [
            [Mv.mWm, 1],
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.mmwWm,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-switch-and.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-switch-and.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 1,
        wmN: [
            [1, 0, 0, 0],
            [0, 0, 0, 1],
            [0, 1, 0, 0],
            [0, 0, 1, 0]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.WvvvM,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "img/day-switch-and.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.WmmWm,
        NN: {
            src: ["img/inv-switch-reverse-out.png", "img/inv-switch-reverse-in.png", "img/inv-switch-reverse-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gate NOT", "Activate only if no entry is on.", wn.Wnv, [
            [Mv.mWm, 1],
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.WmmWm,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-switch-reverse.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-switch-reverse.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 1,
        wmN: [
            [1, 0, 1, 1],
            [1, 1, 0, 1],
            [0, 1, 1, 1],
            [1, 1, 1, 0]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.WvvvM,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "img/day-switch-reverse.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.nnVnN,
        NN: {
            src: ["img/inv-lamp-white-out.png", "img/inv-lamp-white-in.png", "img/inv-lamp-white-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Lamp", "Turn on when connected, damage ghoul", wn.Wnv, [
            [Mv.mWm, 1],
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.nnVnN,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-lamp.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-lamp.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 0,
        wmN: [
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1]
        ],
        wVm: 0,
        WNm: 2,
        Vwn: 22,
        wnW: 0,
        MW: VN.Wvnnv,
        NmMnn: VN.wMWMw,
        wvv: 36,
        Mmn: {
            src: "img/e-light.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "img/day-lamp-off.png",
            n: {
                v: 0
            }
        },
        WVmwV: [{
            src: "img/day-lamp-white.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-yellow.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-green.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-clear-blue.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-purple.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-pink.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-orange.png",
            n: {
                v: 0
            }
        }],
        Vwmmv: [{
            src: "img/day-lamp-light-white.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-light-yellow.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-light-green.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-light-clear-blue.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-light-purple.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-light-pink.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-lamp-light-orange.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 600,
        playerState: 0
    }, {
        id: Mv.VMWww,
        NN: {
            src: ["img/inv-cable-wall-out.png", "img/inv-cable-wall-in.png", "img/inv-cable-wall-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Cable - Wall", "Wall that can be connected to a cable", wn.Wnv, [
            [Mv.mWm, 8],
            [Mv.mMv, 1]
        ], 1, [
            [mw.Www, 15000]
        ], 7),
        stack: 255,
        Nw: Nm.VMWww,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 1,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-cable-wall.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-cable-wall.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 0,
        wmN: [
            [1, 1, 0, 0],
            [0, 0, 1, 1],
            [1, 1, 0, 0],
            [0, 0, 1, 1]
        ],
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.mMNmv,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-cable-gingerbread-wall1.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-cable-gingerbread-wall-breake1.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-cable-gingerbread-wall-breake2.png?raw=true",
            n: {
                v: 0
            }
        }, {
            src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-cable-gingerbread-wall-breake3.png?raw=true",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mVM,
        wmw: 40,
        vmN: 315360000000,
        life: 15000,
        playerState: 0
    }, {
        id: Mv.mMWNN,
        NN: {
            src: ["img/inv-automatic-door-out.png", "img/inv-automatic-door-in.png", "img/inv-automatic-door-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Automatic Door", "Connect it to a switch to open and close it.", wn.Wnv, [
            [Mv.mWm, 8],
            [Mv.mMv, 2],
            [Mv.VMn, 1]
        ], 1, [
            [mw.Www, 15000]
        ], 7),
        stack: 255,
        Nw: Nm.mMWNN,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 1,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-automatic-door.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-automatic-door.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 0,
        wmN: [
            [0, 1, 1, 1],
            [1, 1, 1, 0],
            [1, 0, 1, 1],
            [1, 1, 0, 1]
        ],
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.wmwVW,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [
            [{
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-automatic-door-off.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-automatic-door-off1.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-automatic-door-off2.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-automatic-door-off3.png?raw=true",
                n: {
                    v: 0
                }
            }],
            [{
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-automatic-door-on.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-automatic-door-on1.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-automatic-door-on2.png?raw=true",
                n: {
                    v: 0
                }
            }, {
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gingerbread-automatic-door-on3.png?raw=true",
                n: {
                    v: 0
                }
            }]
        ],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 15000,
        playerState: 0
    }, {
        id: Mv.Mvnvv,
        NN: {
            src: ["img/inv-platform-out.png", "img/inv-platform-in.png", "img/inv-platform-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Platform", "Weight detector", wn.Wnv, [
            [Mv.mWm, 1],
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.Mvnvv,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-platform-off.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-platform-off.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 1,
        wmN: [
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.nMVvw,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "img/day-platform-off.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mwvmN,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.nNVNn,
        NN: {
            src: ["img/inv-stone-cave-out.png", "img/inv-stone-cave-in.png", "img/inv-stone-cave-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Stone Cave", "Build mountains.", -1, [
            [Mv.NmV, 140]
        ], 1, [
            [mw.wVv, 30000]
        ], 99),
        state: 21,
        wWV: -1,
        WWn: 1,
        z: 1,
        stack: 255,
        Nw: Nm.nNVNn,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-stone-cave.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-stone-cave.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.nNVNn,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.mmV,
        VmMnV: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        Mwv: [{
            src: "img/day-stone-cave-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mVvWW,
        MmV: vv.NmN,
        vN: [{
            src: "img/day-stone-cave0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-stone-cave46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.NmV,
        wmw: 80,
        vmN: 315360000000,
        life: 300,
        playerState: 0
    }, {
        id: Mv.wWVMN,
        NN: {
            src: ["img/inv-bunker-wall-out.png", "img/inv-bunker-wall-in.png", "img/inv-bunker-wall-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Bunker Wall", "Good old memory of the wasteland.", -1, [
            [Mv.NmV, 150],
            [Mv.mWm, 12]
        ], 1, [
            [mw.wVv, 30000]
        ], 99),
        state: 21,
        wWV: -1,
        WWn: 1,
        z: 1,
        stack: 255,
        Nw: Nm.wWVMN,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-bunker-wall.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-bunker-wall.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.nNVNn,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.mmV,
        VmMnV: [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        Mwv: [{
            src: "img/day-bunker-wall-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-bunker-wall0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-bunker-wall46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.nvM,
        wmw: 80,
        vmN: 315360000000,
        life: 10000,
        playerState: 0
    }, {
        id: Mv.VnWWM,
        NN: {
            src: ["img/inv-mustard-floor-out.png", "img/inv-mustard-floor-in.png", "img/inv-mustard-floor-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Golden Floor", "Players can't spawn on it", wn.MVV, [
            [Mv.Vmw, 2]
        ], 2, [
            [mw.wVv, 15000]
        ]),
        stack: 255,
        Nw: Nm.VnWWM,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: 2,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-floor.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-floor.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.VnWWM,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.vwMMN,
        Mwv: [{
            src: "img/day-mustard-floor-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mWM,
        MmV: vv.MNm,
        vN: [{
            src: "img/day-mustard-floor-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-mustard-floor-46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.NmWmV,
        wmw: 80,
        vmN: 315360000000,
        life: 3000,
        playerState: 0
    }, {
        id: Mv.wvvVv,
        NN: {
            src: ["img/inv-red-floor-out.png", "img/inv-red-floor-in.png", "img/inv-red-floor-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Red floor", "Players can't spawn on it", wn.MVV, [
            [Mv.Vmw, 2]
        ], 2, [
            [mw.wVv, 15000]
        ]),
        stack: 255,
        Nw: Nm.wvvVv,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: 2,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/day-clear-blue-stone-floor.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/day-redprint-stone-floor.png",
            n: {
                v: 0
            }
        },
        mmV: 1,
        nMnmN: Mv.wvvVv,
        wmM: 0,
        NvM: 0,
        mmN: 1,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.vwMMN,
        Mwv: [{
            src: "img/day-red-floor-broken0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-broken1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-broken2.png",
            n: {
                v: 0
            }
        }],
        mVW: vv.mWM,
        MmV: vv.MNm,
        vN: [{
            src: "img/day-red-floor-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-3.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-4.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-5.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-6.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-7.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-8.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-9.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-10.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-11.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-12.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-13.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-14.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-15.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-16.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-17.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-18.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-19.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-20.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-21.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-22.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-23.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-24.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-25.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-26.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-27.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-28.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-29.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-30.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-31.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-32.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-33.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-34.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-35.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-36.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-37.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-38.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-39.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-40.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-41.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-42.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-43.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-44.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-45.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-red-floor-46.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mwwMv,
        wmw: 80,
        vmN: 315360000000,
        life: 3000,
        playerState: 0
    }, {
        id: Mv.Www,
        NN: {
            src: ["img/inv-welding-machine-out.png", "img/inv-welding-machine-in.png", "img/inv-welding-machine-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Welding Machine", "Allow you to make logic gates", wn.mNm, [
            [Mv.VWv, 2],
            [Mv.mWm, 4],
            [Mv.VMn, 1]
        ], 1, [
            [mw.wVv, 50000]
        ]),
        state: 21,
        wWV: -1,
        WWn: 0,
        z: 1,
        wvn: mw.Www,
        stack: 255,
        Nw: Nm.Www,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-welding-machine.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-welding-machine.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 1,
        wnW: 0,
        MW: VN.WMMwM,
        wvv: 16,
        Mmn: {
            src: "img/e-welding-machine.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "img/day-welding-machine.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 500,
        playerState: 0
    }, {
        id: Mv.NwMvV,
        NN: {
            src: ["img/inv-wire4-out.png", "img/inv-wire4-in.png", "img/inv-wire4-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Cable - Bridge", "Create automatic mechanisms", wn.Wnv, [
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.NwMvV,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-wire4.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-wire4.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 0,
        wmN: [
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.WvvvM,
        mVW: vv.VMW,
        MmV: vv.MNm,
        vN: {
            src: "img/day-wire4.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.NMMWN,
        wmw: 40,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.vNWnW,
        NN: {
            src: ["img/inv-timer-out.png", "img/inv-timer-in.png", "img/inv-timer-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gate Timer", "Emit a signal regularly.", wn.Wnv, [
            [Mv.mWm, 1],
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.vNWnW,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-timer.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-timer.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 1,
        wmN: [
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.NVwwM,
        wvv: 38,
        Mmn: {
            src: "img/e-light.png",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-timer-0.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-timer-1.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-timer-2.png",
            n: {
                v: 0
            }
        }, {
            src: "img/day-timer-3.png",
            n: {
                v: 0
            }
        }],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.Nvvnm,
        NN: {
            src: ["img/inv-xor-out.png", "img/inv-xor-in.png", "img/inv-xor-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Gate Xor", "Activate only if only one entry is on.", wn.Wnv, [
            [Mv.mWm, 1],
            [Mv.mMv, 1]
        ], 3, [
            [mw.Www, 15000]
        ]),
        stack: 255,
        Nw: Nm.Nvvnm,
        wait: 10,
        state: 21,
        wWV: -1,
        WWn: -1,
        z: 0,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-xor.png",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-xor.png",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.Wnv,
        wMv: 1,
        wmN: [
            [1, 0, 0, 0],
            [0, 0, 0, 1],
            [0, 1, 0, 0],
            [0, 0, 1, 0]
        ],
        wVm: 0,
        WNm: 0,
        wnW: 0,
        MW: VN.WvvvM,
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: {
            src: "img/day-xor.png",
            n: {
                v: 0
            }
        },
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }, {
        id: Mv.mmMVm,
        NN: {
            src: ["img/skill-builder1-out.png", "img/skill-builder1-in.png", "img/skill-builder1-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Builder 1", "Multiplies some craft by two", wn.WNvWM, undefined, undefined, undefined, 6, undefined, 2)
    }, {
        id: Mv.NnwmN,
        NN: {
            src: ["img/skill-builder2-out.png", "img/skill-builder2-in.png", "img/skill-builder2-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Builder 2", "Repair much faster", wn.WNvWM, undefined, undefined, undefined, 18, Mv.mmMVm)
    }, {
        id: Mv.nnnVN,
        NN: {
            src: ["img/skill-inv1-out.png", "img/skill-inv1-in.png", "img/skill-inv1-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Inventory 1", "Add a slot in your inventory", wn.WNvWM, undefined, undefined, undefined, 0),
        vVnwn: 1
    }, {
        id: Mv.vNmNm,
        NN: {
            src: ["img/skill-inv2-out.png", "img/skill-inv2-in.png", "img/skill-inv2-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Inventory 2", "Add a slot in your inventory", wn.WNvWM, undefined, undefined, undefined, 5, Mv.nnnVN),
        vVnwn: 1
    }, {
        id: Mv.wnMwM,
        NN: {
            src: ["img/skill-inv3-out.png", "img/skill-inv3-in.png", "img/skill-inv3-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Inventory 3", "Add a slot in your bag", wn.WNvWM, undefined, undefined, undefined, 7, Mv.vNmNm),
        vVnwn: 1
    }, {
        id: Mv.MvVnn,
        NN: {
            src: ["img/skill-inv4-out.png", "img/skill-inv4-in.png", "img/skill-inv4-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Inventory 4", "Add two slots in your bag", wn.WNvWM, undefined, undefined, undefined, 10, Mv.wnMwM, 2),
        vVnwn: 2
    }, {
        id: Mv.wnMNm,
        NN: {
            src: ["img/skill-inv5-out.png", "img/skill-inv5-in.png", "img/skill-inv5-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Inventory 5", "Add three slots in your bag", wn.WNvWM, undefined, undefined, undefined, 12, Mv.MvVnn, 3),
        vVnwn: 3
    }, {
        id: Mv.MMNWV,
        NN: {
            src: ["img/skill-lightweight-out.png", "img/skill-lightweight-in.png", "img/skill-lightweight-click.png"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Light Weight", "Less likely to trigger traps.", wn.WNvWM, undefined, undefined, undefined, 8)
    }, {
        id: Mv.nwW,
        NN: {
            src: ["img/inv-feeder-out.png?2", "img/inv-feeder-in.png?2", "img/inv-feeder-click.png?2"],
            n: [{
                v: 0
            }, {
                v: 0
            }, {
                v: 0
            }]
        },
        detail: new nV("Feeder", "Allows you to feed automatically", wn.mNm, [
            [Mv.VWM, 4],
            [Mv.mWm, 20],
            [Mv.mMN, 8],
            [Mv.mMv, 4],
            [Mv.VMn, 2]
        ], 1, [
            [mw.nvw, 100000]
        ], 12),
        state: 21,
        wWV: 180000,
        WWn: 0,
        z: 1,
        wvn: mw.nwW,
        stack: 255,
        Nw: Nm.nwW,
        wait: 10,
        messageHandler: 1000,
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        Mmw: [0, 0, 0, 0],
        NVn: [0, 0, 0, 0],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        vvv: {
            src: "img/clear-blue-feeder.png?2",
            n: {
                v: 0
            }
        },
        nNV: {
            src: "img/redprint-feeder.png?2",
            n: {
                v: 0
            }
        },
        mmV: 0,
        wmM: 0,
        NvM: 0,
        mmN: 0,
        identifier: 0,
        behavior: Nwv.NMw,
        wmN: 0,
        wVm: 0,
        WNm: 0,
        wnW: MVvMm,
        MW: VN.nWWvm,
        wvv: 16,
        Mmn: {
            src: "img/e-feeder.png?2",
            n: {
                v: 0
            }
        },
        mVW: vv.wVV,
        MmV: vv.MNv,
        vN: [{
            src: "img/day-feeder.png?2",
            n: {
                v: 0
            }
        }, {
            src: "img/day-feeder-rotate.png?2",
            n: {
                v: 0
            }
        }, {
            src: "img/day-feeder-off.png?2",
            n: {
                v: 0
            }
        }],
        MVMMm: [
            [0, 0],
            [0, 0],
            [0, 0],
            [0, 0]
        ],
        wMM: Nv.mVM,
        wmw: 80,
        vmN: 315360000000,
        life: 250,
        playerState: 0
    }];
    vm = 0;
    var VV = {
        Wvw: vm++,
        wnVMv: vm++,
        vMwww: vm++,
        vwvmv: vm++,
        MMWWM: vm++,
        nvWWw: vm++,
        NmNNN: vm++,
        wNVnv: vm++,
        MmNvm: vm++,
        NNnmV: vm++,
        mwnMN: vm++,
        vNNmn: vm++,
        vnw: vm++,
        NnnmV: vm++,
        vVV: vm++,
        NnWVN: vm++,
        VwMMM: vm++,
        mvwwM: vm++,
        wVWNn: vm++,
        VVnvw: vm++,
        wwwWW: vm++,
        VnV: vm++,
        MNNvv: vm++,
        MvVwM: vm++,
        WVM: vm++,
        mvN: vm++,
        nvNWw: vm++,
        Vnnvw: vm++,
        WMWMw: vm++,
        vmNMn: vm++,
        mnvmm: vm++,
        wNVVv: vm++,
        wWWnN: vm++,
        wNwMM: vm++,
        MVvWv: vm++,
        WmM: vm++,
        vnmwn: vm++,
        nVmWm: vm++,
        vwmvn: vm++,
        WWnvN: vm++,
        nVVNv: vm++,
        vNvvM: vm++,
        NVmwm: vm++,
        WNVMV: vm++,
        NMwnm: vm++,
        Mvnnw: vm++,
        VWWNm: vm++,
        nVnVW: vm++,
        wMvVn: vm++,
        vWmwn: vm++,
        nmvVW: vm++,
        MWMmm: vm++,
        WMMnv: vm++,
        WVVwW: vm++,
        Vwnvn: vm++,
        vNvvv: vm++,
        wWWMn: vm++,
        wmNVw: vm++,
        NmNvM: vm++
    };
    vm = 0;
    var mWVWn = Mww[Mv.NWnWM].wVm;
    mWVWn[vm] = {
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        mVW: vv.mWM,
        MmV: vv.mWM,
        vN: {
            src: "img/day-road0.png",
            n: {
                v: 0
            }
        },
        detail: new nV("", "", -1, [
            [Mv.NmV, 100]
        ]),
        life: 100000000,
        playerState: 0,
        wMM: Nv.mWWMM,
        wmw: 70,
        angle: Math[networkMappings[179]],
        vMvwW: 0,
        MVNNM: 0,
        Nw: null,
        WNm: 0,
        z: 0,
        WWn: 2,
        wnW: 0,
        vmN: 315360000000
    };
    for (var vM = 0; vM < 45; vM++) {
        vm++;
        mWVWn[vm] = JSON[networkMappings[20]](JSON[networkMappings[185]](mWVWn[0]));
        mWVWn[vm].vN[networkMappings[10]] = ("img/day-road" + vm) + ".png";
    }
    var wV = Mww[Mv.MVnnm].wVm;
    wV[VV.Wvw] = {
        width: [100, 100, 100, 100],
        height: [100, 100, 100, 100],
        VVN: [0, 0, 0, 0],
        VwW: [0, 0, 0, 0],
        mVW: vv.VMW,
        MmV: vv.MNm,
        vN: {
            src: "img/day-sofa0.png",
            n: {
                v: 0
            }
        },
        detail: new nV("", "", -1, [
            [Mv.mvm, 99],
            [Mv.Vmw, 9],
            [Mv.Wwn, 6]
        ]),
        life: 450,
        playerState: 0,
        wMM: Nv.Wvw,
        wmw: 70,
        angle: Math[networkMappings[179]],
        vMvwW: 0,
        MVNNM: 0,
        Nw: null,
        WNm: 1,
        z: 1,
        WWn: 0,
        wnW: 0,
        wvv: 25,
        identifier: 0,
        currentDamage: 0,
        maxDamage: 0,
        vmN: 315360000000
    };
    wV[VV.wnVMv] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.Wvw]));
    wV[VV.wnVMv].vN[networkMappings[10]] = "img/day-sofa1.png";
    wV[VV.wnVMv].wMM = Nv.wnVMv;
    wV[VV.vMwww] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.wnVMv]));
    wV[VV.vMwww].vN[networkMappings[10]] = "img/day-sofa2.png";
    wV[VV.vwvmv] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.Wvw]));
    wV[VV.vwvmv].vN[networkMappings[10]] = "img/day-sofa3.png";
    wV[VV.vwvmv].wMM = Nv.vMwww;
    wV[VV.MMWWM] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vwvmv]));
    wV[VV.MMWWM].vN[networkMappings[10]] = "img/day-sofa4.png";
    wV[VV.NVmwm] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vwvmv]));
    wV[VV.NVmwm].vN[networkMappings[10]] = "img/day-sofa6.png";
    wV[VV.vNvvM] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.Wvw]));
    wV[VV.vNvvM].vN[networkMappings[10]] = "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-renforced-door.png?raw=true";
    wV[VV.vNvvM].wMM = Nv.nvM;
    wV[VV.vNvvM][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 40]
    ]);
    wV[VV.vNvvM].life = 7000;
    wV[VV.wNwMM] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.Wvw]));
    wV[VV.wNwMM].vN[networkMappings[10]] = "img/day-electronic-box0.png";
    wV[VV.wNwMM].mVW = vv.wVV;
    wV[VV.wNwMM].MmV = vv.MNv;
    wV[VV.wNwMM].wMM = Nv.nvM;
    wV[VV.wNwMM][networkMappings[79]] = new nV("", "", -1, [
        [Mv.nVn, 8],
        [Mv.VMn, 4],
        [Mv.mWm, 4],
        [Mv.VWv, 12]
    ]);
    wV[VV.wNwMM][networkMappings[65]] = [100, 100, 100, 100];
    wV[VV.wNwMM][networkMappings[12]] = [100, 100, 100, 100];
    wV[VV.wNwMM].VVN = [0, 0, 0, 0];
    wV[VV.wNwMM].VwW = [0, 0, 0, 0];
    wV[VV.wNwMM].life = 800;
    wV[VV.MVvWv] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.wNwMM]));
    wV[VV.MVvWv].vN[networkMappings[10]] = "img/day-electronic-box1.png";
    wV[VV.MVvWv][networkMappings[65]] = [120, 120, 120, 120];
    wV[VV.MVvWv][networkMappings[12]] = [120, 120, 120, 120];
    wV[VV.MVvWv].VVN = [-10, -10, -10, -10];
    wV[VV.MVvWv].VwW = [-10, -10, -10, -10];
    wV[VV.MVvWv][networkMappings[79]] = new nV("", "", -1, [
        [Mv.nVn, 16],
        [Mv.VMn, 16],
        [Mv.wWn, 8],
        [Mv.mWm, 16]
    ]);
    wV[VV.MVvWv].life = 1400;
    wV[VV.nvWWw] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.Wvw]));
    wV[VV.nvWWw].vN[networkMappings[10]] = "img/day-bed0.png";
    wV[VV.nvWWw].wMM = Nv.nvWWw;
    wV[VV.nvWWw][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mvm, 200],
        [Mv.Vmw, 20]
    ]);
    wV[VV.NmNNN] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.nvWWw]));
    wV[VV.NmNNN].vN[networkMappings[10]] = "img/day-bed1.png";
    wV[VV.NmNNN].wMM = Nv.NmNNN;
    wV[VV.wMvVn] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.nvWWw]));
    wV[VV.wMvVn].vN[networkMappings[10]] = "img/day-bed2.png";
    wV[VV.wMvVn].wMM = Nv.NnMvw;
    wV[VV.wMvVn][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 12],
        [Mv.Vmw, 20],
        [Mv.Mnn, 12]
    ]);
    wV[VV.wNVnv] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.Wvw]));
    wV[VV.wNVnv].vN[networkMappings[10]] = "img/day-table0.png";
    wV[VV.wNVnv].mVW = vv.Mvm;
    wV[VV.wNVnv].MmV = vv.WMm;
    wV[VV.wNVnv].wMM = Nv.mvm;
    wV[VV.wNVnv][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mvm, 200]
    ]);
    wV[VV.VWWNm] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.wNVnv]));
    wV[VV.VWWNm].vN[networkMappings[10]] = "img/day-table1.png";
    wV[VV.VWWNm][networkMappings[65]] = [100, 290, 100, 280];
    wV[VV.VWWNm][networkMappings[12]] = [280, 100, 280, 100];
    wV[VV.VWWNm].WnVMm = [-1, 0, -1, 0];
    wV[VV.VWWNm].WMNMN = [0, -1, 0, -1];
    wV[VV.VWWNm].VVN = [0, -90, 0, -90];
    wV[VV.VWWNm].VwW = [-90, 0, -90, 0];
    wV[VV.wWWMn] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.wNVnv]));
    wV[VV.wWWMn].vN[networkMappings[10]] = "img/day-table2.png";
    wV[VV.wWWMn].mVW = vv.wVV;
    wV[VV.wWWMn].MmV = vv.MNv;
    wV[VV.wWWMn].wMM = Nv.nvM;
    wV[VV.wWWMn][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 8]
    ]);
    wV[VV.MmNvm] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.Wvw]));
    wV[VV.MmNvm].vN[networkMappings[10]] = "img/day-tv0.png";
    wV[VV.MmNvm].mVW = vv.wVV;
    wV[VV.MmNvm].MmV = vv.MNv;
    wV[VV.MmNvm].wMM = Nv.wVWNn;
    wV[VV.MmNvm][networkMappings[79]] = new nV("", "", -1, [
        [Mv.VMn, 4],
        [Mv.mWm, 16],
        [Mv.mMv, 4],
        [Mv.VWv, 12]
    ]);
    wV[VV.NNnmV] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.Wvw]));
    wV[VV.NNnmV].vN[networkMappings[10]] = "img/day-computer0.png";
    wV[VV.NNnmV].mVW = vv.wVV;
    wV[VV.NNnmV].MmV = vv.MNv;
    wV[VV.NNnmV].wMM = Nv.mVM;
    wV[VV.NNnmV][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mMv, 4],
        [Mv.mWm, 16],
        [Mv.VWv, 12],
        [Mv.VMn, 4]
    ]);
    wV[VV.mwnMN] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.NNnmV]));
    wV[VV.mwnMN].vN[networkMappings[10]] = "img/day-chair0.png";
    wV[VV.mwnMN][networkMappings[79]] = new nV("", "", -1, [
        [Mv.Vmw, 8],
        [Mv.mWm, 8]
    ]);
    wV[VV.WMMnv] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.NNnmV]));
    wV[VV.WMMnv].vN[networkMappings[10]] = "img/day-chair1.png";
    wV[VV.WMMnv][networkMappings[79]] = new nV("", "", -1, [
        [Mv.Vmw, 8],
        [Mv.mWm, 8]
    ]);
    wV[VV.WVVwW] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.NNnmV]));
    wV[VV.WVVwW].vN[networkMappings[10]] = "img/day-chair2.png";
    wV[VV.WVVwW][networkMappings[79]] = new nV("", "", -1, [
        [Mv.Vmw, 8],
        [Mv.mWm, 8]
    ]);
    wV[VV.vNNmn] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.Wvw]));
    wV[VV.vNNmn].vN[networkMappings[10]] = "img/day-washbasin0.png";
    wV[VV.vNNmn].mVW = vv.Mvm;
    wV[VV.vNNmn].MmV = vv.WMm;
    wV[VV.vNNmn].wMM = Nv.VnMwV;
    wV[VV.vNNmn][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mvm, 150],
        [Mv.mWm, 8]
    ]);
    wV[VV.WMWMw] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vNNmn]));
    wV[VV.WMWMw].vN[networkMappings[10]] = "img/day-pharma0.png";
    wV[VV.WMWMw][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 8],
        [Mv.NmV, 60]
    ]);
    wV[VV.WMWMw].mVW = vv.mVvWW;
    wV[VV.WMWMw].MmV = vv.NmN;
    wV[VV.WMWMw].wMM = Nv.VWVmN;
    wV[VV.WMWMw].vMvwW = 1;
    wV[VV.WMWMw].Nw = [
        [Mv.VVWNV, 1, 0.1],
        [Mv.nwVWW, 1, 0.03],
        [Mv.mNmWV, 1, 0.05],
        [Mv.VnM, 2, 0.2],
        [Mv.MVn, 1, 0.1]
    ];
    wV[VV.vNvvv] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vNNmn]));
    wV[VV.vNvvv].vN[networkMappings[10]] = "img/day-shower0.png";
    wV[VV.vNvvv][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 8],
        [Mv.NmV, 60]
    ]);
    wV[VV.vNvvv].mVW = vv.mVvWW;
    wV[VV.vNvvv].MmV = vv.NmN;
    wV[VV.vNvvv].wMM = Nv.VWVmN;
    wV[VV.vNvvv][networkMappings[65]] = [70, 100, 70, 100];
    wV[VV.vNvvv][networkMappings[12]] = [100, 70, 100, 70];
    wV[VV.vNvvv].VVN = [0, 0, 30, 0];
    wV[VV.vNvvv].VwW = [0, 0, 0, 30];
    wV[VV.vnw] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vNNmn]));
    wV[VV.vnw].vN[networkMappings[10]] = "img/day-furniture0.png";
    wV[VV.vnw][networkMappings[65]] = [50, 100, 50, 100];
    wV[VV.vnw][networkMappings[12]] = [100, 50, 100, 50];
    wV[VV.vnw].VVN = [0, 0, 50, 0];
    wV[VV.vnw].VwW = [0, 0, 0, 50];
    wV[VV.vnw][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mvm, 200]
    ]);
    wV[VV.vnw].vMvwW = 1;
    wV[VV.vnw].Nw = [
        [Mv.NMV, 1, 0.004],
        [Mv.wvmnM, 1, 0.004],
        [Mv.www, 1, 0.005],
        [Mv.MWv, 30, 0.02],
        [Mv.VVWNV, 1, 0.05],
        [Mv.NwmNN, 1, 0.08],
        [Mv.VNVwm, 40, 0.1],
        [Mv.WwwWW, 2, 0.1],
        [Mv.wvvvn, 1, 0.01],
        [Mv.nVn, 4, 0.05],
        [Mv.VWv, 1, 0.2],
        [Mv.Wwn, 2, 0.1]
    ];
    wV[VV.NnnmV] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vnw]));
    wV[VV.NnnmV].vN[networkMappings[10]] = "img/day-furniture1.png";
    wV[VV.NnnmV][networkMappings[65]] = [70, 100, 70, 100];
    wV[VV.NnnmV][networkMappings[12]] = [100, 70, 100, 70];
    wV[VV.NnnmV].VVN = [0, 0, 30, 0];
    wV[VV.NnnmV].VwW = [0, 0, 0, 30];
    wV[VV.vVV] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vnw]));
    wV[VV.vVV].vN[networkMappings[10]] = "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gift4.png?raw=true";
    wV[VV.vVV][networkMappings[65]] = [70, 70, 70, 70];
    wV[VV.vVV][networkMappings[12]] = [70, 70, 70, 70];
    wV[VV.vVV].VVN = [15, 15, 15, 15];
    wV[VV.vVV].VwW = [15, 15, 15, 15];
    wV[VV.vVV][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mvm, 100]
    ]);
    wV[VV.NnWVN] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vVV]));
    wV[VV.NnWVN].vN[networkMappings[10]] = "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gift4.png?raw=true";
    wV[VV.vWmwn] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.NnnmV]));
    wV[VV.vWmwn].vN[networkMappings[10]] = "img/day-furniture4.png";
    wV[VV.vWmwn].mVW = vv.wVV;
    wV[VV.vWmwn].MmV = vv.MNv;
    wV[VV.vWmwn].wMM = Nv.NnMvw;
    wV[VV.vWmwn].Nw = [
        [Mv.NMV, 1, 0.004],
        [Mv.wvmnM, 1, 0.004],
        [Mv.www, 1, 0.005],
        [Mv.MWv, 30, 0.02],
        [Mv.VVWNV, 1, 0.05],
        [Mv.mMv, 4, 0.1],
        [Mv.nnVnN, 1, 0.08],
        [Mv.Mvnvv, 1, 0.08],
        [Mv.wvvvn, 1, 0.01],
        [Mv.nVn, 8, 0.05],
        [Mv.VWv, 2, 0.2],
        [Mv.Wwn, 2, 0.1]
    ];
    wV[VV.nmvVW] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vVV]));
    wV[VV.nmvVW].vN[networkMappings[10]] = "img/day-furniture5.png";
    wV[VV.nmvVW].mVW = vv.wVV;
    wV[VV.nmvVW].MmV = vv.MNv;
    wV[VV.nmvVW].wMM = Nv.NnMvw;
    wV[VV.nmvVW].Nw = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vWmwn].Nw));
    wV[VV.MWMmm] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.nmvVW]));
    wV[VV.MWMmm].vN[networkMappings[10]] = "img/day-furniture6.png";
    wV[VV.VwMMM] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vVV]));
    wV[VV.VwMMM].mVW = vv.VMW;
    wV[VV.VwMMM].MmV = vv.MNm;
    wV[VV.VwMMM].vN[networkMappings[10]] = "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gift0.png?raw=true";
    wV[VV.VwMMM][networkMappings[79]] = new nV("", "", -1, []);
    wV[VV.VwMMM].vMvwW = 1;
    wV[VV.VwMMM].Nw = [
        [Mv.WwwVV, 1, 0.1],
        [Mv.VWv, 2, 0.2],
        [Mv.NMV, 1, 0.003],
        [Mv.wvmnM, 1, 0.003],
        [Mv.WnnWn, 1, 0.01],
        [Mv.www, 1, 0.005],
        [Mv.MWv, 30, 0.02],
        [Mv.VVWNV, 1, 0.08],
        [Mv.NwmNN, 1, 0.1],
        [Mv.VNVwm, 40, 0.02],
        [Mv.WwwWW, 2, 0.1],
        [Mv.nVn, 4, 0.08],
        [Mv.VMn, 1, 0.1]
    ];
    wV[VV.mvwwM] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.VwMMM]));
    wV[VV.mvwwM].vN[networkMappings[10]] = "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gift1.png?raw=true";
    wV[VV.WNVMV] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.VwMMM]));
    wV[VV.WNVMV].vN[networkMappings[10]] = "img/day-gold-chair0.png";
    wV[VV.WNVMV][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mvm, 40]
    ]);
    wV[VV.WNVMV].vMvwW = 0;
    wV[VV.WNVMV].wMM = Nv.NmWmV;
    wV[VV.NMwnm] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.WNVMV]));
    wV[VV.NMwnm].vN[networkMappings[10]] = "img/day-green-chair0.png";
    wV[VV.NMwnm].wMM = Nv.mWwvm;
    wV[VV.Mvnnw] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.WNVMV]));
    wV[VV.Mvnnw].vN[networkMappings[10]] = "img/day-wood-chair0.png";
    wV[VV.Mvnnw].mVW = vv.Mvm;
    wV[VV.Mvnnw].MmV = vv.WMm;
    wV[VV.Mvnnw].wMM = Nv.VnMwV;
    wV[VV.MvVwM] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vVV]));
    wV[VV.MvVwM].vN[networkMappings[10]] = "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-plot0.png?raw=true";
    wV[VV.MvVwM].wMM = Nv.mVNWM;
    wV[VV.MvVwM].WNm = 2;
    wV[VV.MvVwM].Vwn = 30;
    wV[VV.MvVwM][networkMappings[79]] = new nV("", "", -1, [
        [Mv.NmV, 40],
        [Mv.mvm, 40]
    ]);
    wV[VV.MvVwM].vMvwW = 0;
    wV[VV.wmNVw] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.MvVwM]));
    wV[VV.wmNVw].mVW = vv.wVV;
    wV[VV.wmNVw].MmV = vv.MNv;
    wV[VV.wmNVw].vN[networkMappings[10]] = "img/day-blood-transfusion.png";
    wV[VV.wmNVw].wMM = Nv.NnMvw;
    wV[VV.wmNVw][networkMappings[79]] = new nV("", "", -1, [
        [Mv.VWv, 2],
        [Mv.mWm, 1],
        [Mv.MVn, 1]
    ]);
    wV[VV.WVM] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vVV]));
    wV[VV.WVM].vN[networkMappings[10]] = "img/day-barel0.png";
    wV[VV.WVM].mVW = vv.wVV;
    wV[VV.WVM].MmV = vv.mWM;
    wV[VV.WVM].wMM = Nv.NMMWN;
    wV[VV.WVM].identifier = 1;
    wV[VV.WVM].currentDamage = 250;
    wV[VV.WVM].maxDamage = 5000;
    wV[VV.WVM].WNm = 2;
    wV[VV.WVM].Vwn = 30;
    wV[VV.WVM][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 8]
    ]);
    wV[VV.WVM].vMvwW = 1;
    wV[VV.WVM].life = 100;
    wV[VV.WVM].Nw = [
        [Mv.NWMwm, 1, 0.2]
    ];
    wV[VV.mvN] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vVV]));
    wV[VV.mvN].vN[networkMappings[10]] = "img/day-barel1.png";
    wV[VV.mvN].mVW = vv.wVV;
    wV[VV.mvN].MmV = vv.mWM;
    wV[VV.mvN].wMM = Nv.vwWww;
    wV[VV.mvN].identifier = 1;
    wV[VV.mvN].currentDamage = 300;
    wV[VV.mvN].maxDamage = 10000;
    wV[VV.mvN].WNm = 2;
    wV[VV.mvN].Vwn = 30;
    wV[VV.mvN].life = 300;
    wV[VV.mvN][networkMappings[79]] = new nV("", "", -1, [
        [Mv.NMm, 8],
        [Mv.mWm, 8]
    ]);
    wV[VV.mvN].vMvwW = 0;
    wV[VV.mvN].wnW = NVwNM;
    wV[VV.nvNWw] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vVV]));
    wV[VV.nvNWw].vN[networkMappings[10]] = "img/day-garbage-bag0.png";
    wV[VV.nvNWw].mVW = vv.VMW;
    wV[VV.nvNWw].MmV = vv.MNm;
    wV[VV.nvNWw].wMM = Nv.nvNWw;
    wV[VV.nvNWw].WNm = 2;
    wV[VV.nvNWw].Vwn = 30;
    wV[VV.nvNWw][networkMappings[79]] = new nV("", "", -1, []);
    wV[VV.nvNWw].Nw = [
        [Mv.WwwVV, 1, 0.08],
        [Mv.MVn, 1, 0.05],
        [Mv.wvmnM, 1, 0.02],
        [Mv.www, 1, 0.01],
        [Mv.MWv, 30, 0.02],
        [Mv.VNVwm, 40, 0.1],
        [Mv.WwwWW, 2, 0.1],
        [Mv.NwmNN, 1, 0.1],
        [Mv.wMVVv, 1, 0.15],
        [Mv.wwwmw, 1, 0.15],
        [Mv.mVWVW, 1, 0.15],
        [Mv.VWv, 3, 0.4]
    ];
    var mWnnw = 660;
    wV[VV.VVnvw] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vnw]));
    wV[VV.VVnvw].vN[networkMappings[10]] = "img/day-fridge0.png";
    wV[VV.VVnvw].mVW = vv.wVV;
    wV[VV.VVnvw].MmV = vv.MNv;
    wV[VV.VVnvw].wMM = Nv.mVM;
    wV[VV.VVnvw][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 16],
        [Mv.MWW, 16]
    ]);
    wV[VV.VVnvw].MVNNM = 1;
    wV[VV.VVnvw].Nw = [
        [Mv.MvmWw, 1, 0.1],
        [Mv.wMNww, 1, 0.1],
        [Mv.NMMWW, 1, 0.01],
        [Mv.wMVVv, 1, 0.15],
        [Mv.wwwmw, 1, 0.15],
        [Mv.mVWVW, 1, 0.15],
        [Mv.WwWnV, 1, 0.01]
    ];
    wV[VV.wwwWW] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.VVnvw]));
    wV[VV.wwwWW].vN[networkMappings[10]] = "img/day-fridge1.png";
    wV[VV.wwwWW].wMM = Nv.mwvmN;
    wV[VV.WWnvN] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vnw]));
    wV[VV.WWnvN].vN[networkMappings[10]] = "img/day-vending-machine0.png";
    wV[VV.WWnvN].mVW = vv.wVV;
    wV[VV.WWnvN].MmV = vv.MNv;
    wV[VV.WWnvN].wMM = Nv.NWnnw;
    wV[VV.WWnvN][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 16],
        [Mv.MWW, 16]
    ]);
    wV[VV.WWnvN].MVNNM = 1;
    wV[VV.WWnvN].Nw = [
        [Mv.MvmWw, 1, 0.04],
        [Mv.NMMWW, 1, 0.04]
    ];
    wV[VV.Vwnvn] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.WWnvN]));
    wV[VV.Vwnvn].vN[networkMappings[10]] = "img/day-distributor0.png";
    wV[VV.Vwnvn].wMM = Nv.NnMvw;
    wV[VV.Vwnvn][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 16],
        [Mv.MWW, 16]
    ]);
    wV[VV.Vwnvn].MVNNM = 1;
    wV[VV.Vwnvn].Nw = [
        [Mv.MvmWw, 1, 0.04],
        [Mv.NMMWW, 1, 0.04],
        [Mv.wMNww, 1, 0.04]
    ];
    wV[VV.nVVNv] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.NnnmV]));
    wV[VV.nVVNv].vN[networkMappings[10]] = "img/day-cash-machine0.png";
    wV[VV.nVVNv].mVW = vv.wVV;
    wV[VV.nVVNv].MmV = vv.MNv;
    wV[VV.nVVNv].wMM = Nv.NnMvw;
    wV[VV.nVVNv][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 16],
        [Mv.VMn, 4]
    ]);
    wV[VV.nVVNv].Nw = [
        [Mv.VWv, 1, 0.05]
    ];
    wV[VV.Vnnvw] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vnw]));
    wV[VV.Vnnvw].vN[networkMappings[10]] = "img/day-cupboard0.png";
    wV[VV.Vnnvw].wMM = Nv.mvm;
    wV[VV.WmM] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vnw]));
    wV[VV.WmM].mVW = vv.wVV;
    wV[VV.WmM].MmV = vv.MNv;
    wV[VV.WmM].vN[networkMappings[10]] = "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gift2.png?raw=true";
    wV[VV.WmM].wMM = Nv.nvM;
    wV[VV.WmM][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 16]
    ]);
    wV[VV.WmM][networkMappings[65]] = [70, 70, 70, 70];
    wV[VV.WmM][networkMappings[12]] = [70, 70, 70, 70];
    wV[VV.WmM].VVN = [15, 15, 15, 15];
    wV[VV.WmM].VwW = [15, 15, 15, 15];
    wV[VV.WmM].Nw = [
        [Mv.VMn, 2, 0.1],
        [Mv.VWv, 2, 0.1],
        [Mv.nVn, 20, 0.05],
        [Mv.MVn, 2, 0.1],
        [Mv.VnM, 4, 0.1],
        [Mv.mNmWV, 1, 0.03],
        [Mv.VWM, 1, 0.01]
    ];
    wV[VV.vnmwn] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.WmM]));
    wV[VV.vnmwn].vN[networkMappings[10]] = "img/day-electronic-box3.png";
    wV[VV.vnmwn][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 16],
        [Mv.VMn, 4]
    ]);
    wV[VV.vnmwn].Nw = [
        [Mv.VMn, 2, 0.1],
        [Mv.VWv, 4, 0.1],
        [Mv.nVn, 20, 0.05],
        [Mv.wWn, 1, 0.03],
        [Mv.mMN, 5, 0.01],
        [Mv.mNmWV, 2, 0.1],
        [Mv.MVn, 3, 0.1],
        [Mv.VnM, 5, 0.1],
        [Mv.wmnWN, 1, 0.005],
        [Mv.VWM, 2, 0.05]
    ];
    wV[VV.NmNvM] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vnmwn]));
    wV[VV.NmNvM].vN[networkMappings[10]] = "img/day-energy-box0.png";
    wV[VV.NmNvM].wMM = Nv.mWwvm;
    wV[VV.NmNvM][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 16],
        [Mv.VMn, 4]
    ]);
    wV[VV.NmNvM].Nw = [
        [Mv.VMn, 2, 0.1],
        [Mv.VWv, 4, 0.1],
        [Mv.nVn, 20, 0.05],
        [Mv.mMv, 8, 0.03],
        [Mv.mMN, 5, 0.01],
        [Mv.mNmWV, 2, 0.1],
        [Mv.MVn, 3, 0.1],
        [Mv.VnM, 5, 0.1],
        [Mv.wmnWN, 1, 0.005],
        [Mv.VWM, 2, 0.05]
    ];
    wV[VV.nVmWm] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.WmM]));
    wV[VV.nVmWm].vN[networkMappings[10]] = "img/day-electronic-box4.png";
    wV[VV.nVmWm].Nw = [
        [Mv.VMn, 2, 0.1],
        [Mv.VWv, 4, 0.1],
        [Mv.nVn, 20, 0.05],
        [Mv.wWn, 1, 0.03],
        [Mv.mMN, 2, 0.01],
        [Mv.mNmWV, 1, 0.1],
        [Mv.MVn, 3, 0.1],
        [Mv.VnM, 5, 0.1],
        [Mv.VWM, 1, 0.01],
        [Mv.mVmVm, 1, 0.008]
    ];
    wV[VV.vwmvn] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.WmM]));
    wV[VV.vwmvn].vN[networkMappings[10]] = "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-gift3.png?raw=true";
    wV[VV.vmNMn] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vnw]));
    wV[VV.vmNMn].vN[networkMappings[10]] = "img/day-ammo-box.png";
    wV[VV.vmNMn].wMM = Nv.VnMwV;
    wV[VV.vmNMn].Nw = [
        [Mv.WwvMw, 1, 0.001],
        [Mv.nvmVv, 1, 0.001],
        [Mv.Wnwnm, 1, 0.001],
        [Mv.VWVVn, 1, 0.001],
        [Mv.NmVWW, 1, 0.001],
        [Mv.NnmNm, 1, 0.001],
        [Mv.Mwwww, 50, 0.01],
        [Mv.nVn, 20, 0.01],
        [Mv.wmnWN, 1, 0.0008],
        [Mv.mVmVm, 2, 0.005],
        [Mv.vMnWn, 1, 0.001],
        [Mv.vWvNv, 1, 0.001],
        [Mv.NMWww, 3, 0.005],
        [Mv.mVMnN, 30, 0.01],
        [Mv.www, 1, 0.003],
        [Mv.MWv, 50, 0.01],
        [Mv.WNnMm, 1, 0.003],
        [Mv.mNVMN, 50, 0.01],
        [Mv.vwN, 1, 0.005],
        [Mv.VwmmV, 1, 0.005],
        [Mv.wMmnm, 1, 0.002],
        [Mv.NVVnV, 1, 0.001],
        [Mv.VMnnN, 1, 0.005],
        [Mv.mMVvm, 1, 0.002],
        [Mv.Nwmmm, 1, 0.001],
        [Mv.nNvmw, 1, 0.002],
        [Mv.vNWwn, 1, 0.001],
        [Mv.NvMWn, 1, 0.0005],
        [Mv.wMmmV, 1, 0.0005]
    ];
    wV[VV.wNVVv] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vmNMn]));
    wV[VV.wNVVv].mVW = vv.wVV;
    wV[VV.wNVVv].MmV = vv.MNv;
    wV[VV.wNVVv].vN[networkMappings[10]] = "img/day-ammo-locker1.png";
    wV[VV.wNVVv].wMM = Nv.NnMvw;
    wV[VV.wNVVv][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 32],
        [Mv.MWW, 12]
    ]);
    wV[VV.wWWnN] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vmNMn]));
    wV[VV.wWWnN].mVW = vv.wVV;
    wV[VV.wWWnN].MmV = vv.MNv;
    wV[VV.wWWnN].vN[networkMappings[10]] = "img/day-ammo-locker2.png";
    wV[VV.wWWnN].wMM = Nv.NnMvw;
    wV[VV.wWWnN][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 32],
        [Mv.MWW, 12]
    ]);
    wV[VV.mnvmm] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vmNMn]));
    wV[VV.mnvmm].mVW = vv.wVV;
    wV[VV.mnvmm].MmV = vv.MNv;
    wV[VV.mnvmm].vN[networkMappings[10]] = "img/day-ammo-locker0.png";
    wV[VV.mnvmm].wMM = Nv.wnNMW;
    wV[VV.mnvmm][networkMappings[65]] = [70, 50, 70, 50];
    wV[VV.mnvmm][networkMappings[12]] = [50, 70, 50, 70];
    wV[VV.mnvmm].VVN = [0, 25, 30, 25];
    wV[VV.mnvmm].VwW = [25, 0, 25, 30];
    wV[VV.mnvmm][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 32],
        [Mv.MWW, 12]
    ]);
    wV[VV.wVWNn] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vnw]));
    wV[VV.wVWNn].mVW = vv.wVV;
    wV[VV.wVWNn].MmV = vv.MNv;
    wV[VV.wVWNn].vN[networkMappings[10]] = "img/day-safe0.png";
    wV[VV.wVWNn].wMM = Nv.wVWNn;
    wV[VV.wVWNn][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 32],
        [Mv.MWW, 32]
    ]);
    wV[VV.wVWNn].Nw = [
        [Mv.NwW, 1, 0.008],
        [Mv.mnwnN, 1, 0.002],
        [Mv.vmMMM, 1, 0.002],
        [Mv.mVWMw, 1, 0.02],
        [Mv.VWVVn, 1, 0.002],
        [Mv.WwvMw, 1, 0.002],
        [Mv.nvmVv, 1, 0.002],
        [Mv.Wnwnm, 1, 0.002],
        [Mv.NmVWW, 1, 0.002],
        [Mv.NnmNm, 1, 0.002],
        [Mv.Mwwww, 50, 0.02],
        [Mv.mVMnN, 30, 0.02],
        [Mv.mVmVm, 1, 0.01],
        [Mv.NMWww, 1, 0.01],
        [Mv.www, 1, 0.04],
        [Mv.MWv, 40, 0.06],
        [Mv.WNnMm, 1, 0.05],
        [Mv.mNVMN, 50, 0.05]
    ];
    wV[VV.MNNvv] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.VVnvw]));
    wV[VV.MNNvv].vN[networkMappings[10]] = "img/day-little-table0.png";
    wV[VV.MNNvv][networkMappings[65]] = [50, 50, 50, 50];
    wV[VV.MNNvv][networkMappings[12]] = [50, 50, 50, 50];
    wV[VV.MNNvv].VVN = [25, 25, 25, 25];
    wV[VV.MNNvv].VwW = [25, 25, 25, 25];
    wV[VV.MNNvv][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 8]
    ]);
    wV[VV.MNNvv].vMvwW = 0;
    wV[VV.nVnVW] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.vVV]));
    wV[VV.nVnVW].vN[networkMappings[10]] = "img/day-small-light-off.png";
    wV[VV.nVnVW].wMM = Nv.NnMvw;
    wV[VV.VnV] = JSON[networkMappings[20]](JSON[networkMappings[185]](wV[VV.VVnvw]));
    wV[VV.VnV].mVW = vv.mVvWW;
    wV[VV.VnV].MmV = vv.NmN;
    wV[VV.VnV].wMM = Nv.VWVmN;
    wV[VV.VnV].vN[networkMappings[10]] = "img/day-toilet0.png";
    wV[VV.VnV][networkMappings[65]] = [50, 70, 50, 70];
    wV[VV.VnV][networkMappings[12]] = [70, 50, 70, 50];
    wV[VV.VnV].VVN = [25, 30, 25, 0];
    wV[VV.VnV].VwW = [0, 25, 30, 25];
    wV[VV.VnV].wMM = Nv.VWVmN;
    wV[VV.VnV][networkMappings[79]] = new nV("", "", -1, [
        [Mv.mWm, 4],
        [Mv.NmV, 100]
    ]);
    wV[VV.VnV].vMvwW = 1;
    wV[VV.VnV].Nw = [
        [Mv.MVn, 1, 0.2],
        [Mv.VnM, 1, 0.02],
        [Mv.NwNVV, 1, 0.005],
        [Mv.NvMWn, 1, 0.002]
    ];
    var wNN = [{
        id: Nm.mnNWm,
        n: {
            v: 0
        },
        src: "img/day-ground-wood0.png",
        Mm: Mv.mvm,
        nW: 1,
        scale: 0.85,
        angle: 0
    }, {
        id: Nm.VVNmM,
        n: {
            v: 0
        },
        src: "img/day-ground-wood1.png",
        Mm: Mv.mvm,
        nW: 2,
        scale: 0.85,
        angle: 0
    }, {
        id: Nm.nNWVn,
        n: {
            v: 0
        },
        src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-ground-wood2.png?raw=true",
        Mm: Mv.mvm,
        nW: 3,
        scale: 0.85,
        angle: 0
    }, {
        id: Nm.nNwNW,
        n: {
            v: 0
        },
        src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-ground-stone0.png?raw=true",
        Mm: Mv.NmV,
        nW: 1,
        scale: 1.2,
        angle: 0
    }, {
        id: Nm.wNVMn,
        n: {
            v: 0
        },
        src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-ground-stone1.png?raw=true",
        Mm: Mv.NmV,
        nW: 2,
        scale: 1.2,
        angle: 0
    }, {
        id: Nm.MMnvv,
        n: {
            v: 0
        },
        src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-ground-stone2.png?raw=true",
        Mm: Mv.NmV,
        nW: 3,
        scale: 1.2,
        angle: 0
    }, {
        id: Nm.nvM,
        n: {
            v: 0
        },
        src: "img/day-ground-steel.png",
        Mm: Mv.nvM,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.Mnn,
        n: {
            v: 0
        },
        src: "img/day-ground-animal-fat.png",
        Mm: Mv.Mnn,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.nMWwV,
        n: {
            v: 0
        },
        src: "img/day-ground-animal-tendon.png",
        Mm: Mv.nMWwV,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.Wwn,
        n: {
            v: 0
        },
        src: "img/day-ground-string.png",
        Mm: Mv.Wwn,
        nW: 1,
        scale: 0.7,
        angle: 0
    }, {
        id: Nm.Vmw,
        n: {
            v: 0
        },
        src: "img/day-ground-leather-boar.png",
        Mm: Mv.Vmw,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.mWm,
        n: {
            v: 0
        },
        src: "img/day-ground-shaped-metal.png",
        Mm: Mv.mWm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.Wmm,
        n: {
            v: 0
        },
        src: "img/day-ground-raw-steak.png",
        Mm: Mv.Wmm,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.VMWnV,
        n: {
            v: 0
        },
        src: "img/day-ground-cooked-steak.png",
        Mm: Mv.VMWnV,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.mVWVW,
        n: {
            v: 0
        },
        src: "img/day-ground-rotten-steak.png",
        Mm: Mv.mVWVW,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.vNV,
        n: {
            v: 0
        },
        src: "img/day-ground-orange.png",
        Mm: Mv.vNV,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.wwwmw,
        n: {
            v: 0
        },
        src: "img/day-ground-rotten-orange.png",
        Mm: Mv.wwwmw,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.WwwWW,
        n: {
            v: 0
        },
        src: "img/day-ground-seed-orange.png",
        Mm: Mv.WwwWW,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.wMV,
        n: {
            v: 0
        },
        src: "img/day-ground-hachet.png",
        Mm: Mv.wMV,
        nW: 1,
        scale: 0.9,
        angle: 0.5
    }, {
        id: Nm.WVv,
        n: {
            v: 0
        },
        src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-ground-stone-pickaxe.png?raw=true",
        Mm: Mv.WVv,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.MVv,
        n: {
            v: 0
        },
        src: "img/day-ground-steel-pickaxe.png",
        Mm: Mv.MVv,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.vwN,
        n: {
            v: 0
        },
        src: "img/day-ground-stone-axe.png",
        Mm: Mv.vwN,
        nW: 1,
        scale: 0.7,
        angle: 0.5
    }, {
        id: Nm.wVv,
        n: {
            v: 0
        },
        src: "img/day-ground-workbench.png",
        Mm: Mv.wVv,
        nW: 1,
        scale: 0.7,
        angle: 0
    }, {
        id: Nm.nVmmn,
        n: {
            v: 0
        },
        src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-ground-wood-spear.png?raw=true",
        Mm: Mv.nVmmn,
        nW: 1,
        scale: 0.6,
        angle: 0.6
    }, {
        id: Nm.nWWVW,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-bow.png",
        Mm: Mv.nWWVW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.www,
        n: {
            v: 0
        },
        src: "img/day-ground-9mm.png",
        Mm: Mv.www,
        nW: 1,
        scale: 1,
        angle: -0.1
    }, {
        id: Nm.NmVWW,
        n: {
            v: 0
        },
        src: "img/day-ground-desert-eagle.png",
        Mm: Mv.NmVWW,
        nW: 1,
        scale: 1,
        angle: -0.1
    }, {
        id: Nm.Wnwnm,
        n: {
            v: 0
        },
        src: "img/day-ground-shotgun.png",
        Mm: Mv.Wnwnm,
        nW: 1,
        scale: 0.7,
        angle: -0.5
    }, {
        id: Nm.nvmVv,
        n: {
            v: 0
        },
        src: "img/day-ground-ak47.png",
        Mm: Mv.nvmVv,
        nW: 1,
        scale: 0.7,
        angle: -0.5
    }, {
        id: Nm.NnmNm,
        n: {
            v: 0
        },
        src: "img/day-ground-sniper.png",
        Mm: Mv.NnmNm,
        nW: 1,
        scale: 0.7,
        angle: -0.5
    }, {
        id: Nm.VNn,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-wall.png",
        Mm: Mv.VNn,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.Vww,
        n: {
            v: 0
        },
        src: "img/day-ground-stone-wall.png",
        Mm: Mv.Vww,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.wvM,
        n: {
            v: 0
        },
        src: "img/day-ground-steel-wall.png",
        Mm: Mv.wvM,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.vmwww,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-door.png",
        Mm: Mv.vmwww,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.nVV,
        n: {
            v: 0
        },
        src: "img/day-ground-stone-door.png",
        Mm: Mv.nVV,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.nmvwv,
        n: {
            v: 0
        },
        src: "img/day-ground-steel-door.png",
        Mm: Mv.nmvwv,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.NmvMv,
        n: {
            v: 0
        },
        src: "img/day-ground-campfire.png",
        Mm: Mv.NmvMv,
        nW: 1,
        scale: 0.7,
        angle: 0
    }, {
        id: Nm.MWv,
        n: {
            v: 0
        },
        src: "img/day-ground-bullet-9mm.png",
        Mm: Mv.MWv,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.mVMnN,
        n: {
            v: 0
        },
        src: "img/day-ground-bullet-shotgun.png",
        Mm: Mv.mVMnN,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.Mwwww,
        n: {
            v: 0
        },
        src: "img/day-ground-bullet-sniper.png",
        Mm: Mv.Mwwww,
        nW: 1,
        scale: 1.1,
        angle: 0
    }, {
        id: Nm.nwVWW,
        n: {
            v: 0
        },
        src: "img/day-ground-medikit.png",
        Mm: Mv.nwVWW,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.VVWNV,
        n: {
            v: 0
        },
        src: "img/day-ground-bandage.png",
        Mm: Mv.VVWNV,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.MvmWw,
        n: {
            v: 0
        },
        src: "img/day-ground-soda.png",
        Mm: Mv.MvmWw,
        nW: 1,
        scale: 1.2,
        angle: 0
    }, {
        id: Nm.WwvMw,
        n: {
            v: 0
        },
        src: "img/day-ground-MP5.png",
        Mm: Mv.WwvMw,
        nW: 1,
        scale: 0.8,
        angle: -0.5
    }, {
        id: Nm.NMV,
        n: {
            v: 0
        },
        src: "img/day-ground-elf-hat.png",
        Mm: Mv.NMV,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NwW,
        n: {
            v: 0
        },
        src: "img/day-ground-deer-hat.png",
        Mm: Mv.NwW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mnwnN,
        n: {
            v: 0
        },
        src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-ground-snowman-hat.png?raw=true",
        Mm: Mv.mnwnN,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wvmnM,
        n: {
            v: 0
        },
        src: "img/day-ground-gaz-mask.png",
        Mm: Mv.wvmnM,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mVWMw,
        n: {
            v: 0
        },
        src: "img/day-ground-gaz-protection.png",
        Mm: Mv.mVWMw,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.vmMMM,
        n: {
            v: 0
        },
        src: "img/day-ground-radiation-suit.png",
        Mm: Mv.vmMMM,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nMMWV,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-arrow.png",
        Mm: Mv.nMMWV,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nwN,
        n: {
            v: 0
        },
        src: "img/day-ground-campfire-bbq.png",
        Mm: Mv.nwN,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mnm,
        n: {
            v: 0
        },
        src: "img/day-ground-smelter.png",
        Mm: Mv.mnm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.vwWVv,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-door1.png",
        Mm: Mv.vwWVv,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.vvwWM,
        n: {
            v: 0
        },
        src: "img/day-ground-stone-door1.png",
        Mm: Mv.vvwWM,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.NMwmm,
        n: {
            v: 0
        },
        src: "img/day-ground-steel-door1.png",
        Mm: Mv.NMwmm,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.MWW,
        n: {
            v: 0
        },
        src: "img/day-ground-sulfur.png",
        Mm: Mv.MWW,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.mMN,
        n: {
            v: 0
        },
        src: "img/day-ground-shaped-uranium.png",
        Mm: Mv.mMN,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.wmW,
        n: {
            v: 0
        },
        src: "img/day-ground-workbench2.png",
        Mm: Mv.wmW,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.NMm,
        n: {
            v: 0
        },
        src: "img/day-ground-uranium.png",
        Mm: Mv.NMm,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.VWN,
        n: {
            v: 0
        },
        src: "img/day-ground-weaving-machine.png",
        Mm: Mv.VWN,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.NWMwm,
        n: {
            v: 0
        },
        src: "img/day-ground-gasoline.png",
        Mm: Mv.NWMwm,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.vNv,
        n: {
            v: 0
        },
        src: "img/day-ground-sulfur-pickaxe.png",
        Mm: Mv.vNv,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.WWW,
        n: {
            v: 0
        },
        src: "img/day-ground-chest.png",
        Mm: Mv.WWW,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.mwvmN,
        n: {
            v: 0
        },
        src: "img/day-ground-fridge.png",
        Mm: Mv.mwvmN,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.WNnvM,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-floor.png",
        Mm: Mv.WNnvM,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.NWnMW,
        n: {
            v: 0
        },
        src: "img/day-ground-hammer.png",
        Mm: Mv.NWnMW,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.wvvvn,
        n: {
            v: 0
        },
        src: "img/day-ground-sleeping-bag.png",
        Mm: Mv.wvvvn,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.wnNvW,
        n: {
            v: 0
        },
        src: "img/day-ground-repair-hammer.png",
        Mm: Mv.wnNvW,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.VNVwm,
        n: {
            v: 0
        },
        src: "img/day-ground-nails.png",
        Mm: Mv.VNVwm,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.wNvnw,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-floor-light.png",
        Mm: Mv.wNvnw,
        nW: 1,
        scale: 0.7,
        angle: 0.3
    }, {
        id: Nm.NNmwn,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-smallwall.png",
        Mm: Mv.NNmwn,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.wvWWW,
        n: {
            v: 0
        },
        src: "img/day-ground-stone-smallwall.png",
        Mm: Mv.wvWWW,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.nnVvn,
        n: {
            v: 0
        },
        src: "img/day-ground-steel-smallwall.png",
        Mm: Mv.nnVvn,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.wMNww,
        n: {
            v: 0
        },
        src: "img/day-ground-tomato-soup.png",
        Mm: Mv.wMNww,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.MVn,
        n: {
            v: 0
        },
        src: "img/day-ground-syringe.png",
        Mm: Mv.MVn,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.VnM,
        n: {
            v: 0
        },
        src: "img/day-ground-chemical-component.png",
        Mm: Mv.VnM,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.mNmWV,
        n: {
            v: 0
        },
        src: "img/day-ground-radaway.png",
        Mm: Mv.mNmWV,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.NwmNN,
        n: {
            v: 0
        },
        src: "img/day-ground-seed-tomato.png",
        Mm: Mv.NwmNN,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.nNm,
        n: {
            v: 0
        },
        src: "img/day-ground-tomato.png",
        Mm: Mv.nNm,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.wMVVv,
        n: {
            v: 0
        },
        src: "img/day-ground-rotten-tomato.png",
        Mm: Mv.wMVVv,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.WwwVV,
        n: {
            v: 0
        },
        src: "img/day-ground-can.png",
        Mm: Mv.WwwVV,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.WNnMm,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-crossbow.png",
        Mm: Mv.WNnMm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mNVMN,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-crossarrow.png",
        Mm: Mv.mNVMN,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.WnnWn,
        n: {
            v: 0
        },
        src: "img/day-ground-nail-gun.png",
        Mm: Mv.WnnWn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.VWVVn,
        n: {
            v: 0
        },
        src: "img/day-ground-sawed-off-shotgun.png",
        Mm: Mv.VWVVn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.MnmWv,
        n: {
            v: 0
        },
        src: "img/day-ground-stone-floor.png",
        Mm: Mv.MnmWv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.WmVWn,
        n: {
            v: 0
        },
        src: "img/day-ground-tiling-floor.png",
        Mm: Mv.WmVWn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NMMWW,
        n: {
            v: 0
        },
        src: "img/day-ground-chips.png",
        Mm: Mv.NMMWW,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.WwWnV,
        n: {
            v: 0
        },
        src: "img/day-ground-rotten-chips.png",
        Mm: Mv.WwWnV,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.VMn,
        n: {
            v: 0
        },
        src: "img/day-ground-electronic-part.png",
        Mm: Mv.VMn,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.VWv,
        n: {
            v: 0
        },
        src: "img/day-ground-junk.png",
        Mm: Mv.VWv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wWn,
        n: {
            v: 0
        },
        src: "img/day-ground-wires.png",
        Mm: Mv.wWn,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.nVn,
        n: {
            v: 0
        },
        src: "img/day-ground-small-energy-cells.png",
        Mm: Mv.nVn,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.wmnWN,
        n: {
            v: 0
        },
        src: "img/day-ground-laser-pistol.png",
        Mm: Mv.wmnWN,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.nvw,
        n: {
            v: 0
        },
        src: "img/day-ground-workbench3.png",
        Mm: Mv.nvw,
        nW: 1,
        scale: 0.9,
        angle: 0
    }, {
        id: Nm.VWM,
        n: {
            v: 0
        },
        src: "img/day-ground-alloys.png",
        Mm: Mv.VWM,
        nW: 1,
        scale: 1,
        angle: 0
    }, {
        id: Nm.wNv,
        n: {
            v: 0
        },
        src: "img/day-ground-sulfur-axe.png",
        Mm: Mv.wNv,
        nW: 1,
        scale: 0.7,
        angle: 0.5
    }, {
        id: Nm.NMWww,
        n: {
            v: 0
        },
        src: "img/day-ground-landmine.png",
        Mm: Mv.NMWww,
        nW: 1,
        scale: 0.7,
        angle: 0.5
    }, {
        id: Nm.mVmVm,
        n: {
            v: 0
        },
        src: "img/day-ground-dynamite.png",
        Mm: Mv.mVmVm,
        nW: 1,
        scale: 0.7,
        angle: 0.5
    }, {
        id: Nm.vMnWn,
        n: {
            v: 0
        },
        src: "img/day-ground-C4.png",
        Mm: Mv.vMnWn,
        nW: 1,
        scale: 0.7,
        angle: 0.5
    }, {
        id: Nm.vWvNv,
        n: {
            v: 0
        },
        src: "img/day-ground-joystick.png",
        Mm: Mv.vWvNv,
        nW: 1,
        scale: 0.7,
        angle: 0.5
    }, {
        id: Nm.MWV,
        n: {
            v: 0
        },
        src: "img/day-ground-composter.png",
        Mm: Mv.MWV,
        nW: 1,
        scale: 0.7,
        angle: 0.5
    }, {
        id: Nm.VwmmV,
        n: {
            v: 0
        },
        src: "img/day-ground-metal-helmet.png",
        Mm: Mv.VwmmV,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wMmnm,
        n: {
            v: 0
        },
        src: "img/day-ground-welding-helmet.png",
        Mm: Mv.wMmnm,
        nW: 1,
        scale: 0.7,
        angle: 0
    }, {
        id: Nm.NVVnV,
        n: {
            v: 0
        },
        src: "img/day-ground-gladiator-helmet.png",
        Mm: Mv.NVVnV,
        nW: 1,
        scale: 0.7,
        angle: 0
    }, {
        id: Nm.VMnnN,
        n: {
            v: 0
        },
        src: "img/day-ground-leather-jacket.png",
        Mm: Mv.VMnnN,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mMVvm,
        n: {
            v: 0
        },
        src: "img/day-ground-kevlar-suit.png",
        Mm: Mv.mMVvm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.Nwmmm,
        n: {
            v: 0
        },
        src: "img/day-ground-SWAT-suit.png",
        Mm: Mv.Nwmmm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nnvvv,
        n: {
            v: 0
        },
        src: "img/day-ground-protective-suit.png",
        Mm: Mv.nnvvv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nNvmw,
        n: {
            v: 0
        },
        src: "img/day-ground-tesla-0.png",
        Mm: Mv.nNvmw,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.vNWwn,
        n: {
            v: 0
        },
        src: "img/day-ground-tesla-armor.png",
        Mm: Mv.vNWwn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NNNWv,
        n: {
            v: 0
        },
        src: "img/day-ground-wood-spike.png",
        Mm: Mv.NNNWv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wMmmV,
        n: {
            v: 0
        },
        src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-ground-laser-submachine.png?raw=true",
        Mm: Mv.wMmmV,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.Wmwmv,
        n: {
            v: 0
        },
        src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-ground-grenade.png?raw=true",
        Mm: Mv.Wmwmv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wMWVm,
        n: {
            v: 0
        },
        src: "img/day-ground-super-hammer.png",
        Mm: Mv.wMWVm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NwNVV,
        n: {
            v: 0
        },
        src: "img/day-ground-ghoul-blood.png",
        Mm: Mv.NwNVV,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.vvMmW,
        n: {
            v: 0
        },
        src: "img/day-ground-camouflage-gear.png",
        Mm: Mv.vvMmW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.MWw,
        n: {
            v: 0
        },
        src: "img/day-ground-agitator.png",
        Mm: Mv.MWw,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.MWWmV,
        n: {
            v: 0
        },
        src: "img/day-ground-ghoul-drug.png",
        Mm: Mv.MWWmV,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mwwMv,
        n: {
            v: 0
        },
        src: "img/day-ground-mushroom1.png",
        Mm: Mv.mwwMv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mVnMV,
        n: {
            v: 0
        },
        src: "img/day-ground-mushroom2.png",
        Mm: Mv.mVnMV,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mMWmn,
        n: {
            v: 0
        },
        src: "img/day-ground-mushroom3.png",
        Mm: Mv.mMWmn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mNvmm,
        n: {
            v: 0
        },
        src: "img/day-ground-rotten-mushroom1.png",
        Mm: Mv.mNvmm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.MnnvM,
        n: {
            v: 0
        },
        src: "img/day-ground-rotten-mushroom2.png",
        Mm: Mv.MnnvM,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NwMNm,
        n: {
            v: 0
        },
        src: "img/day-ground-rotten-mushroom3.png",
        Mm: Mv.NwMNm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NvMWn,
        n: {
            v: 0
        },
        src: "img/day-ground-lapadoine.png",
        Mm: Mv.NvMWn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.vwWmW,
        n: {
            v: 0
        },
        src: "img/day-ground-lapabot.png",
        Mm: Mv.vwWmW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mMv,
        n: {
            v: 0
        },
        src: "img/day-ground-small-wire.png",
        Mm: Mv.mMv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wWnNV,
        n: {
            v: 0
        },
        src: "img/day-ground-pumpkin.png",
        Mm: Mv.wWnNV,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mNNwW,
        n: {
            v: 0
        },
        src: "img/day-ground-rotten-pumpkin.png",
        Mm: Mv.mNNwW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nNNmW,
        n: {
            v: 0
        },
        src: "img/day-ground-ghoul5.png",
        Mm: Mv.nNNmW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nVm,
        n: {
            v: 0
        },
        src: "img/day-ground-extractor.png",
        Mm: Mv.nVm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NvMwv,
        n: {
            v: 0
        },
        src: "img/day-ground-antidote.png",
        Mm: Mv.NvMwv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.vmvVm,
        n: {
            v: 0
        },
        src: "img/day-ground-antidote-flower.png",
        Mm: Mv.vmvVm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nMMVw,
        n: {
            v: 0
        },
        src: "img/day-ground-seed-tree.png",
        Mm: Mv.nMMVw,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NmvmN,
        n: {
            v: 0
        },
        src: "img/day-ground-acorn.png",
        Mm: Mv.NmvmN,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.MMNNn,
        n: {
            v: 0
        },
        src: "img/day-ground-rotten-acorn.png",
        Mm: Mv.MMNNn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.vvnnn,
        n: {
            v: 0
        },
        src: "img/day-ground-laser-sniper.png",
        Mm: Mv.vvnnn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.VnMnW,
        n: {
            v: 0
        },
        src: "img/day-ground-hal-bot.png",
        Mm: Mv.VnMnW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wvMvm,
        n: {
            v: 0
        },
        src: "img/day-ground-tesla-bot.png",
        Mm: Mv.wvMvm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nnmNW,
        n: {
            v: 0
        },
        src: "img/day-ground-wire0.png",
        Mm: Mv.nnmNW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NNMnv,
        n: {
            v: 0
        },
        src: "img/day-ground-wire1.png",
        Mm: Mv.NNMnv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mmvNn,
        n: {
            v: 0
        },
        src: "img/day-ground-wire2.png",
        Mm: Mv.mmvNn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.VNMmn,
        n: {
            v: 0
        },
        src: "img/day-ground-wire3.png",
        Mm: Mv.VNMmn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NVWnw,
        n: {
            v: 0
        },
        src: "img/day-ground-switch.png",
        Mm: Mv.NVWnw,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wVmMw,
        n: {
            v: 0
        },
        src: "img/day-ground-switch-or.png",
        Mm: Mv.wVmMw,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mmwWm,
        n: {
            v: 0
        },
        src: "img/day-ground-switch-and.png",
        Mm: Mv.mmwWm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.WmmWm,
        n: {
            v: 0
        },
        src: "img/day-ground-switch-reverse.png",
        Mm: Mv.WmmWm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nnVnN,
        n: {
            v: 0
        },
        src: "img/day-ground-lamp-white.png",
        Mm: Mv.nnVnN,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.VMWww,
        n: {
            v: 0
        },
        src: "img/day-ground-cable-wall.png",
        Mm: Mv.VMWww,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.mMWNN,
        n: {
            v: 0
        },
        src: "img/day-ground-automatic-door.png",
        Mm: Mv.mMWNN,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.Mvnvv,
        n: {
            v: 0
        },
        src: "img/day-ground-platform.png",
        Mm: Mv.Mvnvv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nNVNn,
        n: {
            v: 0
        },
        src: "img/day-ground-stone-cave.png",
        Mm: Mv.nNVNn,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wWVMN,
        n: {
            v: 0
        },
        src: "img/day-ground-bunker-wall.png",
        Mm: Mv.wWVMN,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.VnWWM,
        n: {
            v: 0
        },
        src: "img/day-ground-mustard-floor.png",
        Mm: Mv.VnWWM,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.wvvVv,
        n: {
            v: 0
        },
        src: "img/day-ground-red-floor.png",
        Mm: Mv.wvvVv,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.Www,
        n: {
            v: 0
        },
        src: "img/day-ground-welding-machine.png",
        Mm: Mv.Www,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.NwMvV,
        n: {
            v: 0
        },
        src: "img/day-ground-wire4.png",
        Mm: Mv.NwMvV,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.vNWnW,
        n: {
            v: 0
        },
        src: "img/day-ground-timer.png",
        Mm: Mv.vNWnW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.Nvvnm,
        n: {
            v: 0
        },
        src: "img/day-ground-xor.png",
        Mm: Mv.Nvvnm,
        nW: 1,
        scale: 0.8,
        angle: 0
    }, {
        id: Nm.nwW,
        n: {
            v: 0
        },
        src: "img/day-ground-feeder.png",
        Mm: Mv.nwW,
        nW: 1,
        scale: 0.8,
        angle: 0
    }];
    var vm = 0;
    var vMv = {
        wmwWm: vm++,
        MmnwV: vm++,
        wnnMV: vm++,
        MWmww: vm++,
        MMmnN: vm++,
        WWV: vm++,
        NnWWn: vm++,
        vwvWv: vm++,
        VMvMW: vm++,
        mvwwv: vm++,
        WnNMV: vm++,
        NwNvM: vm++,
        nvWnm: vm++,
        Vnwnm: vm++
    };
    var nwv = [];
    var NVmnm = 8;
    var VNN = 9;
    var mvmwM = 10;
    if (NV.mWnnw) {
        var wvnmm = NV['Math'][networkMappings[244]];
        NV['Math'][networkMappings[244]] = NV['Math'][networkMappings[251]];
        NV['Math'][networkMappings[251]] = wvnmm;
    };
    var MWNwv = 11;
    nwv[vMv.wmwWm] = {
        Nw: [Nm.nNWVn, Nm.VVNmM, Nm.mnNWm],
        Mvn: [0.2, 0.4, 1],
        wwm: [-1, Mv.wMV, Mv.vwN, Mv.wNv],
        mWw: [1, 2, 4, 5],
        wnW: 0,
        type: [{
            life: 200,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-wood1.png"
            },
            wmw: 100,
            Vnv: 5,
            VNV: 0,
            vMm: 80,
            WNm: 1,
            z: NVmnm,
            Vwn: 80
        }, {
            life: 150,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-wood0.png"
            },
            wmw: 75,
            Vnv: 5,
            VNV: 0,
            vMm: 80,
            WNm: 1,
            z: NVmnm,
            Vwn: 55
        }, {
            life: 120,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-wood2.png"
            },
            wmw: 70,
            Vnv: 5,
            VNV: 0,
            vMm: 80,
            WNm: 1,
            z: NVmnm,
            Vwn: 48
        }, {
            life: 100,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-wood3.png"
            },
            wmw: 60,
            Vnv: 5,
            VNV: 0,
            vMm: 80,
            WNm: 1,
            z: NVmnm,
            Vwn: 37
        }, {
            life: 75,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-wood4.png"
            },
            wmw: 50,
            Vnv: 5,
            VNV: 0,
            vMm: 80,
            WNm: 1,
            z: NVmnm,
            Vwn: 30
        }],
        wMM: Nv.mvm,
        mVW: vv.Mvm,
        MmV: vv.WMm,
        playerState: 5
    };
    nwv[vMv.WWV] = {
        Nw: [Nm.NmvmN, Nm.nNWVn, Nm.VVNmM, Nm.mnNWm],
        Mvn: [0.015, 0.2, 0.4, 1],
        wwm: [-1, Mv.wMV, Mv.vwN, Mv.wNv],
        mWw: [1, 2, 4, 5],
        wnW: 0,
        type: [{
            life: 250,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-tree0.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-treeleaf0.png?raw=true"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-tree-and-leaf0.png?raw=true"
            },
            wmw: 145,
            Vnv: 5,
            VNV: 0,
            vMm: 800,
            WNm: 1,
            z: MWNwv,
            Vwn: 70
        }, {
            life: 250,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-tree1.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-treeleaf1.png?raw=true"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-tree-and-leaf1.png?raw=true"
            },
            wmw: 128,
            Vnv: 5,
            VNV: 0,
            vMm: 800,
            WNm: 1,
            z: MWNwv,
            Vwn: 52
        }, {
            life: 150,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-tree2.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-treeleaf2.png?raw=true"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-tree-and-leaf2.png?raw=true"
            },
            wmw: 114,
            Vnv: 5,
            VNV: 0,
            vMm: 800,
            WNm: 1,
            z: MWNwv,
            Vwn: 42
        }, {
            life: 75,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-tree3.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-treeleaf3.png?raw=true"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-tree-and-leaf3.png?raw=true"
            },
            wmw: 90,
            Vnv: 5,
            VNV: 0,
            vMm: 800,
            WNm: 1,
            z: MWNwv,
            Vwn: 34
        }, {
            life: 250,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-tree4.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-treeleaf4.png?raw=true"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "https://github.com/ultrasmesharik/DevastTextures/blob/main/day-tree-and-leaf4.png?raw=true"
            },
            wmw: 147,
            Vnv: 5,
            VNV: 0,
            vMm: 800,
            WNm: 1,
            z: MWNwv,
            Vwn: 54
        }],
        wMM: Nv.vWMvm,
        mVW: vv.Mvm,
        MmV: vv.WMm,
        playerState: 5
    };
    nwv[vMv.MmnwV] = {
        Nw: [Nm.MMnvv, Nm.wNVMn, Nm.nNwNW],
        Mvn: [0.1, 0.3, 1],
        wwm: [Mv.wMV, Mv.WVv, Mv.MVv, Mv.vNv],
        mWw: [1, 3, 4, 5],
        wnW: 0,
        type: [{
            life: 1000,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/YhI6HA8.png"
            },
            wmw: 80,
            Vnv: 5,
            VNV: 0,
            vMm: 115,
            WNm: 1,
            z: mvmwM,
            Vwn: 60
        }, {
            life: 800,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/k8UkPum.png"
            },
            wmw: 80,
            Vnv: 5,
            VNV: 0,
            vMm: 115,
            WNm: 1,
            z: mvmwM,
            Vwn: 58
        }, {
            life: 600,
            n: {
                n: {
                    v: 0
                },
                src: "https://imgur.com/weHnvuS.png"
            },
            wmw: 74,
            Vnv: 5,
            VNV: 0,
            vMm: 115,
            WNm: 1,
            z: mvmwM,
            Vwn: 54
        }, {
            life: 400,
            n: {
                n: {
                    v: 0
                },
                src: "https://imgur.com/4IbV7aS.png"
            },
            wmw: 65,
            Vnv: 5,
            VNV: 0,
            vMm: 115,
            WNm: 1,
            z: VNN,
            Vwn: 45
        }, {
            life: 200,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/2kOlsQ8.png"
            },
            wmw: 63,
            Vnv: 5,
            VNV: 0,
            vMm: 115,
            WNm: 1,
            z: VNN,
            Vwn: 43
        }, {
            life: 150,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/xjfSWk8.png"
            },
            wmw: 61,
            Vnv: 5,
            VNV: 0,
            vMm: 115,
            WNm: 1,
            z: VNN,
            Vwn: 41
        }],
        wMM: Nv.NmV,
        mVW: vv.NWVwv,
        MmV: vv.NmN,
        playerState: 15
    };
    nwv[vMv.wnnMV] = {
        Nw: [Nm.nvM, Nm.MMnvv, Nm.wNVMn, Nm.nNwNW],
        Mvn: [0.4, 0.45, 0.6, 1],
        wwm: [Mv.WVv, Mv.MVv, Mv.vNv],
        mWw: [1, 2, 3],
        wnW: 0,
        type: [{
            life: 1200,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/2cKWmXV.png"
            },
            wmw: 81,
            Vnv: 5,
            VNV: 0,
            vMm: 22,
            WNm: 1,
            z: mvmwM,
            Vwn: 61
        }, {
            life: 1000,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/FhsCjyQ.png"
            },
            wmw: 81,
            Vnv: 5,
            VNV: 0,
            vMm: 22,
            WNm: 1,
            z: mvmwM,
            Vwn: 61
        }, {
            life: 300,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/B35IbDx.png"
            },
            wmw: 62,
            Vnv: 5,
            VNV: 0,
            vMm: 22,
            WNm: 1,
            z: VNN,
            Vwn: 42
        }, {
            life: 500,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/gN2PYj4.png"
            },
            wmw: 70,
            Vnv: 5,
            VNV: 0,
            vMm: 22,
            WNm: 1,
            z: mvmwM,
            Vwn: 50
        }],
        wMM: Nv.nvM,
        mVW: vv.NWVwv,
        MmV: vv.NmN,
        playerState: 40
    };
    nwv[vMv.MMmnN] = {
        Nw: [Nm.MWW, Nm.MMnvv, Nm.wNVMn, Nm.nNwNW],
        Mvn: [0.4, 0.45, 0.6, 1],
        wwm: [Mv.MVv, Mv.vNv],
        mWw: [1, 2],
        wnW: 0,
        type: [{
            life: 1000,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/uzEoPWe.png"
            },
            wmw: 62,
            Vnv: 5,
            VNV: 0,
            vMm: 22,
            WNm: 1,
            z: mvmwM,
            Vwn: 42
        }, {
            life: 400,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/bvdeuV5.png"
            },
            wmw: 70,
            Vnv: 5,
            VNV: 0,
            vMm: 22,
            WNm: 1,
            z: VNN,
            Vwn: 50
        }, {
            life: 400,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/J0bozHj.png"
            },
            wmw: 58,
            Vnv: 5,
            VNV: 0,
            vMm: 22,
            WNm: 1,
            z: VNN,
            Vwn: 38
        }],
        wMM: Nv.MWW,
        mVW: vv.NWVwv,
        MmV: vv.NmN,
        playerState: 70
    };
    nwv[vMv.MWmww] = {
        Nw: [Nm.NMm, Nm.MMnvv, Nm.wNVMn, Nm.nNwNW],
        Mvn: [0.3, 0.45, 0.6, 1],
        wwm: [Mv.vNv],
        mWw: [1],
        wnW: NVwNM,
        type: [{
            life: 6000,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/q3cTwmo.png"
            },
            wmw: 104,
            Vnv: 5,
            VNV: 0,
            vMm: 5,
            WNm: 1,
            z: mvmwM,
            Vwn: 75
        }, {
            life: 4000,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/3u7pn9h.png"
            },
            wmw: 75,
            Vnv: 5,
            VNV: 0,
            vMm: 5,
            WNm: 1,
            z: mvmwM,
            Vwn: 55
        }, {
            life: 2000,
            n: {
                n: {
                    v: 0
                },
                src: "https://i.imgur.com/tZYF6U4.png"
            },
            wmw: 62,
            Vnv: 5,
            VNV: 0,
            vMm: 5,
            WNm: 1,
            z: VNN,
            Vwn: 42
        }],
        wMM: Nv.NMm,
        mVW: vv.NWVwv,
        MmV: vv.NmN,
        playerState: 140
    };
    nwv[vMv.NnWWn] = {
        Nw: [Nm.WwwWW, Nm.vNV],
        Mvn: [0.05, 1],
        wwm: [-1],
        mWw: [1],
        wnW: 0,
        type: [{
            life: 80,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-orange-tree-leaf0.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "img/day-orange0.png"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "img/day-orange-tree0.png"
            },
            wmw: 68,
            Vnv: 5,
            VNV: 0,
            vMm: 20,
            WNm: 1,
            z: VNN,
            Vwn: 38
        }, {
            life: 100,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-orange-tree-leaf1.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "img/day-orange1.png"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "img/day-orange-tree1.png"
            },
            wmw: 70,
            Vnv: 5,
            VNV: 0,
            vMm: 20,
            WNm: 1,
            z: VNN,
            Vwn: 37
        }, {
            life: 120,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-orange-tree-leaf2.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "img/day-orange2.png"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "img/day-orange-tree2.png"
            },
            wmw: 78,
            Vnv: 5,
            VNV: 0,
            vMm: 20,
            WNm: 1,
            z: VNN,
            Vwn: 45
        }],
        wMM: Nv.vNV,
        mVW: vv.mWM,
        MmV: vv.mWM,
        playerState: 50
    };
    nwv[vMv.vwvWv] = {
        Nw: [Nm.NwmNN, Nm.nNm],
        Mvn: [0.05, 1],
        wwm: [-1],
        mWw: [1],
        wnW: 0,
        type: [{
            life: 80,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-tomato-tree-leaf0.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "img/day-tomato0.png"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "img/day-tomato-tree0.png"
            },
            wmw: 68,
            Vnv: 5,
            VNV: 0,
            vMm: 16,
            WNm: 1,
            z: VNN,
            Vwn: 38
        }, {
            life: 100,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-tomato-tree-leaf1.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "img/day-tomato1.png"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "img/day-tomato-tree1.png"
            },
            wmw: 70,
            Vnv: 5,
            VNV: 0,
            vMm: 16,
            WNm: 1,
            z: VNN,
            Vwn: 37
        }, {
            life: 120,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-tomato-tree-leaf2.png"
            },
            VmW: {
                n: {
                    v: 0
                },
                src: "img/day-tomato2.png"
            },
            nNnMN: {
                n: {
                    v: 0
                },
                src: "img/day-tomato-tree2.png"
            },
            wmw: 78,
            Vnv: 5,
            VNV: 0,
            vMm: 16,
            WNm: 1,
            z: VNN,
            Vwn: 45
        }],
        wMM: Nv.nNm,
        mVW: vv.mWM,
        MmV: vv.mWM,
        playerState: 50
    };
    nwv[vMv.VMvMW] = {
        Nw: [Nm.Wmm, Nm.Mnn, Nm.Vmw],
        Mvn: [0.25, 0.85, 1],
        wwm: [Mv.wMV, Mv.vwN, Mv.wNv],
        mWw: [1, 3, 4],
        wnW: 0,
        type: [{
            life: 250,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-boar-dead-christmas.png"
            },
            wmw: 70,
            Vnv: 5,
            VNV: 0,
            vMm: 18,
            WNm: 1,
            z: VNN,
            Vwn: 47
        }],
        wMM: Nv.VVNMN,
        mVW: vv.mWM,
        MmV: vv.mWM,
        playerState: 40
    };
    nwv[vMv.mvwwv] = {
        Nw: [Nm.Wmm, Nm.nMWwV, Nm.Vmw, Nm.Mnn],
        Mvn: [0.28, 0.7, 0.85, 1],
        wwm: [Mv.wMV, Mv.vwN, Mv.wNv],
        mWw: [1, 3, 4],
        wnW: 0,
        type: [{
            life: 200,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-deer-dead-christmas.png"
            },
            wmw: 73,
            Vnv: 5,
            VNV: 0,
            vMm: 18,
            WNm: 1,
            z: VNN,
            Vwn: 53
        }],
        wMM: Nv.VVNMN,
        mVW: vv.mWM,
        MmV: vv.mWM,
        playerState: 40
    };
    nwv[vMv.WnNMV] = {
        Nw: [Nm.mwwMv],
        Mvn: [1],
        wwm: [-1],
        mWw: [1],
        wnW: 0,
        type: [{
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom1.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 2,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }, {
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom2.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 2,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }, {
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom3.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 2,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }, {
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom4.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 2,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }],
        wMM: Nv.mwwMv,
        mVW: vv.mWM,
        MmV: vv.mWM,
        playerState: 40
    };
    nwv[vMv.Vnwnm] = {
        Nw: [Nm.vmvVm],
        Mvn: [1],
        wwm: [-1],
        mWw: [1],
        wnW: 0,
        type: [{
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-antidote-tree.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 1,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }],
        wMM: Nv.WWwNW,
        mVW: vv.mWM,
        MmV: vv.mWM,
        playerState: 1000
    };
    nwv[vMv.NwNvM] = {
        Nw: [Nm.mVnMV],
        Mvn: [1],
        wwm: [-1],
        mWw: [1],
        wnW: 0,
        type: [{
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom5.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 6,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }, {
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom6.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 6,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }, {
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom7.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 6,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }, {
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom8.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 6,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }],
        wMM: Nv.mVnMV,
        mVW: vv.mWM,
        MmV: vv.mWM,
        playerState: 40
    };
    nwv[vMv.nvWnm] = {
        Nw: [Nm.mMWmn],
        Mvn: [1],
        wwm: [-1],
        mWw: [1],
        wnW: 0,
        type: [{
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom9.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 6,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }, {
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom10.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 6,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }, {
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom11.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 6,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }, {
            life: 1,
            n: {
                n: {
                    v: 0
                },
                src: "img/day-mushroom12.png"
            },
            wmw: 18,
            Vnv: 2,
            VNV: 0,
            vMm: 6,
            WNm: 0,
            z: VNN,
            Vwn: 32
        }],
        wMM: Nv.mMWmn,
        mVW: vv.mWM,
        MmV: vv.mWM,
        playerState: 40
    };
    var NNVwM = [-26, 25, -7, 0];
    var mNWnw = [-28, -15, 25, 0];
    var vNmWV = [{
        src: "img/day-campfire-light-1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-campfire-light-2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-campfire-light-3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/day-campfire-light-down.png",
        n: {
            v: 0
        }
    }];
    var nmVVN = [{
        src: "img/karma4.png",
        n: {
            v: 0
        }
    }, {
        src: "img/karma3.png",
        n: {
            v: 0
        }
    }, {
        src: "img/karma2.png",
        n: {
            v: 0
        }
    }, {
        src: "img/karma1.png",
        n: {
            v: 0
        }
    }, {
        src: "img/karma0.png",
        n: {
            v: 0
        }
    }, {
        src: "img/karma5.png",
        n: {
            v: 0
        }
    }];
    var vm = 0;
    var nVM = {
        vNmnW: vm++,
        WNwVn: vm++,
        wnvMN: vm++,
        nwNwn: vm++,
        vmNVW: vm++,
        VWNvm: vm++,
        NnVvV: vm++,
        vnvnm: vm++,
        nnwwV: vm++,
        nWWNv: vm++,
        NNVvV: vm++,
        WwVVn: vm++
    };
    var VwV = [];
    var vWnmmmM = {};
    try {
        if (WnM !== undefined) {
            mM = {
                M: 0,
                b: 0,
                W: -1,
                r: 0
            };
            mW = {
                M: Mv.WNnvM,
                b: 0,
                W: -1,
                r: 0
            };
            wN = {
                M: Mv.wNvnw,
                b: 0,
                W: -1,
                r: 0
            };
            VVw = {
                M: Mv.MnmWv,
                b: 0,
                W: -1,
                r: 0
            };
            nVw = {
                M: Mv.WmVWn,
                b: 0,
                W: -1,
                r: 0
            };
            vvWVMnM = {
                M: Mv.VnWWM,
                b: 0,
                W: -1,
                r: 0
            };
            WvvNmnn = {
                M: Mv.wvvVv,
                b: 0,
                W: -1,
                r: 0
            };
            Vmmnn = {
                M: 0,
                b: Mv.VNn,
                W: -1,
                r: 0
            };
            wNn = {
                M: Mv.WNnvM,
                b: Mv.VNn,
                W: -1,
                r: 0
            };
            MmM = {
                M: Mv.wNvnw,
                b: Mv.VNn,
                W: -1,
                r: 0
            };
            wVvvnMm = {
                M: Mv.MnmWv,
                b: Mv.VNn,
                W: -1,
                r: 0
            };
            MVnnVWN = {
                M: Mv.WmVWn,
                b: Mv.VNn,
                W: -1,
                r: 0
            };
            mvmnWnm = {
                M: Mv.VnWWM,
                b: Mv.VNn,
                W: -1,
                r: 0
            };
            WvmvWWn = {
                M: Mv.wvvVv,
                b: Mv.VNn,
                W: -1,
                r: 0
            };
            WMM = {
                M: 0,
                b: Mv.Vww,
                W: -1,
                r: 0
            };
            vV = {
                M: Mv.WNnvM,
                b: Mv.Vww,
                W: -1,
                r: 0
            };
            mWv = {
                M: Mv.wNvnw,
                b: Mv.Vww,
                W: -1,
                r: 0
            };
            VwNVNMM = {
                M: Mv.MnmWv,
                b: Mv.Vww,
                W: -1,
                r: 0
            };
            VwmWn = {
                M: Mv.WmVWn,
                b: Mv.Vww,
                W: -1,
                r: 0
            };
            mNWnmWV = {
                M: Mv.VnWWM,
                b: Mv.Vww,
                W: -1,
                r: 0
            };
            VVMVmWn = {
                M: Mv.wvvVv,
                b: Mv.Vww,
                W: -1,
                r: 0
            };
            nnV = {
                M: 0,
                b: Mv.wvM,
                W: -1,
                r: 0
            };
            VnW = {
                M: Mv.WNnvM,
                b: Mv.wvM,
                W: -1,
                r: 0
            };
            WmN = {
                M: Mv.wNvnw,
                b: Mv.wvM,
                W: -1,
                r: 0
            };
            Vvv = {
                M: Mv.MnmWv,
                b: Mv.wvM,
                W: -1,
                r: 0
            };
            MMV = {
                M: Mv.WmVWn,
                b: Mv.wvM,
                W: -1,
                r: 0
            };
            MmmMVVW = {
                M: Mv.VnWWM,
                b: Mv.wvM,
                W: -1,
                r: 0
            };
            mWNMWmW = {
                M: Mv.wvvVv,
                b: Mv.wvM,
                W: -1,
                r: 0
            };
            Wm = {
                M: 0,
                b: Mv.nNVNn,
                W: -1,
                r: 0
            };
            vWnNwMm = {
                M: Mv.MnmWv,
                b: Mv.nNVNn,
                W: -1,
                r: 0
            };
            MVnnWMm = {
                M: Mv.WmVWn,
                b: Mv.nNVNn,
                W: -1,
                r: 0
            };
            WvMnw = {
                M: 0,
                b: Mv.wWVMN,
                W: -1,
                r: 0
            };
            MwnVw = {
                M: Mv.MnmWv,
                b: Mv.wWVMN,
                W: -1,
                r: 0
            };
            MMM = {
                M: Mv.WmVWn,
                b: Mv.wWVMN,
                W: -1,
                r: 0
            };
            VwV[nVM.vNmnW] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, wNn, wNn, wNn, {
                        M: 62,
                        b: 30,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 30,
                        W: -1,
                        r: 2
                    }, wNn, wNn],
                    [mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 0,
                        r: 3
                    }, mW, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 13,
                        r: 1
                    }, wNn],
                    [mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 22,
                        r: 3
                    }, mW, mW, mW, mW, {
                        M: 62,
                        b: 30,
                        W: -1,
                        r: 3
                    }],
                    [mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 1
                    }, mW, mW, mW, {
                        M: 62,
                        b: 30,
                        W: -1,
                        r: 3
                    }],
                    [mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 17,
                        r: 0
                    }, mW, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 19,
                        r: 2
                    }, wNn],
                    [mM, wNn, wNn, wNn, wNn, wNn, wNn, wNn]
                ]
            };
            VwV[nVM.WNwVn] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, mWv, mWv, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 2
                    }, mWv, mWv, mWv],
                    [mM, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 1
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mWv, {
                        M: 67,
                        b: 71,
                        W: 28,
                        r: 3
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 21,
                        r: 1
                    }, mWv],
                    [mM, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 1
                    }, mW, mW, mWv, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 0
                    }, wN, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 1
                    }, mW, mW, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 3
                    }, wN, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 15,
                        r: 1
                    }, mWv],
                    [mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, vV, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 0
                    }, mWv, wN, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 1
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 5,
                        r: 1
                    }, mWv],
                    [mM, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, vV, mW, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, vV],
                    [mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, vV, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 2
                    }, mW, mW, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 14,
                        r: 1
                    }, vV],
                    [mM, mM, vV, {
                        M: 67,
                        b: 71,
                        W: 27,
                        r: 0
                    }, wN, wN, {
                        M: 62,
                        b: 71,
                        W: 8,
                        r: 3
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 1,
                        r: 1
                    }, vV],
                    [mM, mM, vV, {
                        M: 67,
                        b: 71,
                        W: 27,
                        r: 0
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 7,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 2,
                        r: 1
                    }, vV],
                    [mM, mM, vV, {
                        M: 67,
                        b: 71,
                        W: 20,
                        r: 0
                    }, wN, wN, mW, mW, mW, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 1
                    }, vV, vV, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 0
                    }, vV, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 0
                    }, vV, vV],
                    [mM, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 2
                    }, mM, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 0
                    }]
                ]
            };
            VwV[nVM.wnvMN] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, mM, mM, vV, vV, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, vV, vV, mWv, mWv, mWv, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, mM, mM, vV, {
                        M: 67,
                        b: 71,
                        W: 27,
                        r: 0
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 3
                    }, vV, {
                        M: 67,
                        b: 71,
                        W: 5,
                        r: 0
                    }, {
                        M: 67,
                        b: 71,
                        W: 13,
                        r: 1
                    }, mWv, mW, mW, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, vV, {
                        M: 67,
                        b: 71,
                        W: 20,
                        r: 0
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 7,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 16,
                        r: 2
                    }, vV, wN, wN, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 3
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 1
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, mW, {
                        M: 62,
                        b: 71,
                        W: 2,
                        r: 1
                    }, vV, {
                        M: 67,
                        b: 71,
                        W: 11,
                        r: 3
                    }, wN, wN, wN, vV, wN, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 2
                    }, mWv, mWv, mWv, WMM],
                    [mM, mW, mW, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 1
                    }, mW, mW, mW, mW, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 3
                    }, wN, wN, mWv, {
                        M: 67,
                        b: 71,
                        W: 25,
                        r: 2
                    }, {
                        M: 67,
                        b: 71,
                        W: 3,
                        r: 1
                    }, mWv],
                    [mM, mW, mW, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 1
                    }, mW, mW, mW, mW, vV, wN, wN, {
                        M: 67,
                        b: 51,
                        W: -1,
                        r: 1
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 18,
                        r: 2
                    }, mWv],
                    [mM, mW, mW, WMM, {
                        M: 62,
                        b: 71,
                        W: 3,
                        r: 3
                    }, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 16,
                        r: 2
                    }, vV, mWv, mWv, mWv, mWv, mWv, mWv],
                    [mM, mW, {
                        M: 62,
                        b: 71,
                        W: 26,
                        r: 0
                    }, vV, {
                        M: 0,
                        b: 71,
                        W: 4,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 22,
                        r: 1
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 8,
                        r: 1
                    }, vV, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 1
                    }, mM, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 0
                    }],
                    [mM, mW, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 0
                    }, vV, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 1
                    }, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 14,
                        r: 1
                    }, vV, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 1
                    }],
                    [mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, vV, vV, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 0
                    }, vV, vV, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 1
                    }]
                ]
            };
            VwV[nVM.nwNwn] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, mWv, mWv, mWv, mWv],
                    [mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 71,
                        W: 23,
                        r: 2
                    }, mM, mM, mM, mM, mM, mWv, {
                        M: 67,
                        b: 71,
                        W: 21,
                        r: 0
                    }, {
                        M: 67,
                        b: 71,
                        W: 28,
                        r: 0
                    }, mWv],
                    [mM, vV, vV, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, vV, vV, mM, mWv, wN, wN, mWv],
                    [mM, vV, {
                        M: 62,
                        b: 71,
                        W: 12,
                        r: 0
                    }, mW, mW, mW, vV, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, mWv, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 0
                    }, mWv, mWv],
                    [mM, vV, mW, {
                        M: 62,
                        b: 71,
                        W: 2,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 14,
                        r: 1
                    }, vV, mW, mW, mW, mW, vV],
                    [mM, vV, {
                        M: 62,
                        b: 71,
                        W: 0,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 7,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 8,
                        r: 1
                    }, vV, mW, {
                        M: 62,
                        b: 71,
                        W: 14,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 5,
                        r: 2
                    }, mW, vV],
                    [mM, vV, mW, {
                        M: 62,
                        b: 71,
                        W: 1,
                        r: 2
                    }, mW, mW, vV, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, vV, vV, vV, vV, mWv],
                    [mM, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 1
                    }, mW, mW, mW, mW, mW, mW, mW, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 3
                    }, wN, wN, mWv],
                    [mM, vV, mW, mW, mW, mW, mW, mW, mW, mWv, {
                        M: 67,
                        b: 71,
                        W: 25,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 18,
                        r: 3
                    }, mWv],
                    [mM, vV, vV, vV, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, vV, vV, vV, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 2
                    }, mWv, mWv, mWv, mWv],
                    [mM, vV, {
                        M: 62,
                        b: 71,
                        W: 20,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 11,
                        r: 0
                    }, mW, mW, vV, {
                        M: 67,
                        b: 71,
                        W: 24,
                        r: 0
                    }, wN, wN, wN, wN, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 3
                    }],
                    [mM, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 1
                    }, mW, mW, mW, mW, vV, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 0
                    }, wN, wN, wN, wN, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 3
                    }],
                    [mM, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 1
                    }, mW, mW, mW, mW, vV, vV, vV, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }],
                    [mM, vV, {
                        M: 62,
                        b: 71,
                        W: 14,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 13,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 12,
                        r: 3
                    }, mW, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 2
                    }, vV],
                    [mM, vV, vV, vV, vV, vV, mWv, vV, vV]
                ]
            };
            VwV[nVM.vmNVW] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, mWv, mWv, mWv, mWv, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 2
                    }, mWv, mWv, mWv, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, WMM],
                    [mM, mWv, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 0
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 5,
                        r: 0
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 11,
                        r: 1
                    }, mWv, {
                        M: 67,
                        b: 71,
                        W: 13,
                        r: 0
                    }, wN, wN, mWv],
                    [mM, mWv, {
                        M: 67,
                        b: 71,
                        W: 13,
                        r: 0
                    }, wN, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 19,
                        r: 2
                    }, mWv, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 21,
                        r: 1
                    }, mWv],
                    [mM, mWv, {
                        M: 67,
                        b: 71,
                        W: 9,
                        r: 3
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 7,
                        r: 1
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 26,
                        r: 3
                    }, mWv, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 28,
                        r: 1
                    }, mWv],
                    [mM, mWv, {
                        M: 67,
                        b: 71,
                        W: 13,
                        r: 0
                    }, wN, wN, wN, wN, mWv, wN, mWv, mWv, mWv],
                    [mM, mWv, {
                        M: 67,
                        b: 71,
                        W: 9,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 10,
                        r: 1
                    }, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 3
                    }, wN, wN, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 1
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 27,
                        r: 2
                    }, mWv],
                    [mM, mWv, mWv, mWv, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, mWv, mWv, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 0
                    }, mWv, mWv, mWv],
                    [mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 3
                    }, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 3
                    }]
                ]
            };
            VwV[nVM.VWNvm] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, vV, vV, vV, vV, vV, vV, vV, vV, vV, vV, vV, vV, vV, vV, vV, vV],
                    [mM, vV, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 0
                    }, mW, vV, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 1,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 2,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 1
                    }, vV, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 1
                    }],
                    [mM, vV, wN, wN, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 2
                    }, mW, vV, {
                        M: 62,
                        b: 71,
                        W: 39,
                        r: 0
                    }, mW, mW, mW, mW, mW, vV],
                    [mM, vV, {
                        M: 67,
                        b: 71,
                        W: 39,
                        r: 3
                    }, wN, wN, wN, wN, wN, wN, {
                        M: 62,
                        b: 150,
                        W: -1,
                        r: 3
                    }, wN, wN, wN, wN, wN, wN, {
                        M: 67,
                        b: 51,
                        W: -1,
                        r: 1
                    }],
                    [mM, vV, {
                        M: 85,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 85,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }, wN, wN, wN, wN, {
                        M: 62,
                        b: 150,
                        W: -1,
                        r: 3
                    }, wN, wN, wN, wN, wN, wN, {
                        M: 67,
                        b: 51,
                        W: -1,
                        r: 3
                    }],
                    [mM, vV, {
                        M: 85,
                        b: 71,
                        W: 28,
                        r: 3
                    }, nVw, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 0
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 149,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 40,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 7,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 7,
                        r: 1
                    }, vV],
                    [mM, vV, {
                        M: 85,
                        b: 71,
                        W: 21,
                        r: 3
                    }, nVw, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 2
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 142,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 144,
                        W: -1,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 8,
                        r: 1
                    }, vV],
                    [mM, vV, vV, vV, vV, vV, vV, vV, vV, VwmWn, {
                        M: 0,
                        b: 71,
                        W: 41,
                        r: 2
                    }, VwmWn, VwmWn, VwmWn, vV, vV, vV],
                    [mM, mM, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 3
                    }, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 3
                    }, mM, mM, mM, VwmWn, nVw, nVw, {
                        M: 85,
                        b: 71,
                        W: 18,
                        r: 2
                    }, VwmWn, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 0
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, VwmWn, {
                        M: 85,
                        b: 71,
                        W: 25,
                        r: 1
                    }, nVw, {
                        M: 85,
                        b: 71,
                        W: 19,
                        r: 2
                    }, VwmWn],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, VwmWn, VwmWn, VwmWn, VwmWn, VwmWn]
                ]
            };
            VwV[nVM.NnVvV] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, wNn, wNn, wNn, {
                        M: 67,
                        b: 50,
                        W: -1,
                        r: 2
                    }, wNn, wNn, wNn],
                    [mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 8,
                        r: 0
                    }, wN, {
                        M: 62,
                        b: 71,
                        W: 13,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 6,
                        r: 0
                    }, wNn],
                    [mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 2
                    }, mW, wN, mW, mW, wNn],
                    [mM, {
                        M: 67,
                        b: 50,
                        W: -1,
                        r: 1
                    }, wN, wN, {
                        M: 67,
                        b: 148,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 144,
                        W: -1,
                        r: 0
                    }, wN, {
                        M: 67,
                        b: 50,
                        W: -1,
                        r: 3
                    }],
                    [mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 28,
                        r: 3
                    }, mW, wN, mW, {
                        M: 62,
                        b: 71,
                        W: 19,
                        r: 2
                    }, wNn],
                    [mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 21,
                        r: 3
                    }, mW, wN, mW, {
                        M: 62,
                        b: 71,
                        W: 26,
                        r: 2
                    }, wNn],
                    [mM, wNn, wNn, wNn, {
                        M: 67,
                        b: 50,
                        W: -1,
                        r: 0
                    }, wNn, wNn, wNn]
                ]
            };
            VwV[nVM.vnvnm] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, WMM, WMM, WMM, WMM, WMM, WMM, WMM, WMM],
                    [mM, WMM, {
                        M: 62,
                        b: 148,
                        W: -1,
                        r: 1
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 16,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 39,
                        r: 1
                    }, mW, {
                        M: 62,
                        b: 148,
                        W: -1,
                        r: 1
                    }, WMM],
                    [mM, WMM, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, WMM],
                    [mM, WMM, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 69,
                        W: -1,
                        r: 1
                    }, VVw, VVw, {
                        M: 84,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, WMM],
                    [mM, WMM, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 69,
                        W: -1,
                        r: 1
                    }, VVw, VVw, {
                        M: 84,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, WMM],
                    [mM, WMM, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 69,
                        W: -1,
                        r: 1
                    }, VVw, VVw, {
                        M: 84,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, WMM],
                    [mM, WMM, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 0
                    }, WMM],
                    [mM, WMM, {
                        M: 62,
                        b: 148,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 144,
                        W: -1,
                        r: 0
                    }, mW, mW, {
                        M: 62,
                        b: 144,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 148,
                        W: -1,
                        r: 1
                    }, WMM],
                    [mM, WMM, WMM, WMM, {
                        M: 84,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 84,
                        b: 31,
                        W: -1,
                        r: 2
                    }, WMM, WMM, WMM, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 1
                    }],
                    [mM, WMM, {
                        M: 84,
                        b: 71,
                        W: 8,
                        r: 0
                    }, {
                        M: 84,
                        b: 71,
                        W: 8,
                        r: 0
                    }, VVw, VVw, {
                        M: 84,
                        b: 71,
                        W: 8,
                        r: 0
                    }, {
                        M: 84,
                        b: 71,
                        W: 8,
                        r: 0
                    }, WMM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 1
                    }],
                    [mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }]
                ]
            };
            VwV[nVM.nnwwV] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, wN, {
                        M: 67,
                        b: 148,
                        W: -1,
                        r: 0
                    }, wN, wN, wN, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 148,
                        W: -1,
                        r: 3
                    }, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 3
                    }, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 3
                    }],
                    [mM, WmN, {
                        M: 67,
                        b: 149,
                        W: -1,
                        r: 0
                    }, WmN, {
                        M: 67,
                        b: 150,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 150,
                        W: -1,
                        r: 0
                    }, WmN, {
                        M: 67,
                        b: 149,
                        W: -1,
                        r: 0
                    }, VnW, VnW, nnV, nnV, nnV, nnV],
                    [mM, nnV, {
                        M: 62,
                        b: 148,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 151,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 143,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 143,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 148,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 0
                    }, VnW, {
                        M: 84,
                        b: 71,
                        W: 23,
                        r: 0
                    }, {
                        M: 84,
                        b: 71,
                        W: 28,
                        r: 0
                    }, {
                        M: 84,
                        b: 71,
                        W: 28,
                        r: 0
                    }, nnV, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 3
                    }],
                    [mM, nnV, mW, wN, wN, wN, wN, {
                        M: 62,
                        b: 142,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 146,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 32,
                        W: -1,
                        r: 3
                    }, VVw, VVw, VVw, nnV],
                    [mM, nnV, {
                        M: 62,
                        b: 71,
                        W: 4,
                        r: 3
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 7,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 7,
                        r: 3
                    }, wN, {
                        M: 62,
                        b: 71,
                        W: 3,
                        r: 1
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, nnV, nnV, nVw, nVw, nnV],
                    [mM, nnV, {
                        M: 62,
                        b: 71,
                        W: 3,
                        r: 3
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 7,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 7,
                        r: 3
                    }, wN, {
                        M: 62,
                        b: 71,
                        W: 4,
                        r: 1
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 71,
                        W: 21,
                        r: 3
                    }, {
                        M: 85,
                        b: 32,
                        W: -1,
                        r: 3
                    }, nVw, nVw, nnV],
                    [mM, nnV, mW, wN, wN, wN, wN, mW, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, nnV, nnV, nnV, nnV, nnV],
                    [mM, nnV, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 3
                    }, mW, mW, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 3
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, nnV],
                    [mM, WmN, WmN, WmN, {
                        M: 67,
                        b: 52,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 52,
                        W: -1,
                        r: 2
                    }, WmN, WmN, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, WmN],
                    [mM, WmN, {
                        M: 67,
                        b: 71,
                        W: 27,
                        r: 1
                    }, wN, wN, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 16,
                        r: 1
                    }, {
                        M: 67,
                        b: 144,
                        W: -1,
                        r: 3
                    }, WmN],
                    [mM, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 1
                    }, wN, mW, mW, mW, wN, {
                        M: 67,
                        b: 71,
                        W: 13,
                        r: 0
                    }, wN, WmN],
                    [mM, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 1
                    }, wN, {
                        M: 62,
                        b: 71,
                        W: 4,
                        r: 3
                    }, mW, mW, wN, {
                        M: 67,
                        b: 71,
                        W: 9,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 10,
                        r: 1
                    }, WmN, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 3
                    }],
                    [mM, WmN, {
                        M: 67,
                        b: 71,
                        W: 27,
                        r: 0
                    }, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 3,
                        r: 2
                    }, wN, wN, wN, WmN, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 2
                    }],
                    [mM, WmN, {
                        M: 67,
                        b: 71,
                        W: 18,
                        r: 0
                    }, wN, wN, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 0
                    }, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 3
                    }, WmN],
                    [mM, WmN, WmN, WmN, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 0
                    }, WmN, WmN, WmN, WmN]
                ]
            };
            VwV[nVM.nWWNv] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 151,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 148,
                        W: -1,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 148,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 151,
                        W: -1,
                        r: 0
                    }],
                    [mM, Vmmnn, Vmmnn, {
                        M: 0,
                        b: 30,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 30,
                        W: -1,
                        r: 2
                    }, MMV, MMV, {
                        M: 67,
                        b: 149,
                        W: -1,
                        r: 2
                    }, {
                        M: 67,
                        b: 150,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 149,
                        W: -1,
                        r: 0
                    }, MMV],
                    [mM, Vmmnn, {
                        M: 0,
                        b: 71,
                        W: 23,
                        r: 3
                    }, mM, mM, MMV, {
                        M: 67,
                        b: 71,
                        W: 9,
                        r: 0
                    }, {
                        M: 67,
                        b: 143,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 146,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 143,
                        W: -1,
                        r: 1
                    }, MMV, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 2
                    }],
                    [mM, Vmmnn, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 3
                    }, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 3
                    }, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 3
                    }, MMV, {
                        M: 67,
                        b: 71,
                        W: 10,
                        r: 2
                    }, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 1
                    }, wN, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 1
                    }, MMV, MMV, MMV],
                    [mM, Vmmnn, {
                        M: 0,
                        b: 144,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 144,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 144,
                        W: -1,
                        r: 3
                    }, MMV, wN, wN, wN, wN, {
                        M: 62,
                        b: 71,
                        W: 20,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 11,
                        r: 0
                    }, {
                        M: 62,
                        b: 70,
                        W: -1,
                        r: 3
                    }],
                    [mM, MMV, {
                        M: 85,
                        b: 149,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 149,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 149,
                        W: -1,
                        r: 0
                    }, MMV, {
                        M: 62,
                        b: 32,
                        W: -1,
                        r: 2
                    }, VnW, {
                        M: 67,
                        b: 71,
                        W: 8,
                        r: 0
                    }, wN, mW, mW, {
                        M: 62,
                        b: 70,
                        W: -1,
                        r: 3
                    }],
                    [mM, {
                        M: 85,
                        b: 70,
                        W: -1,
                        r: 1
                    }, {
                        M: 85,
                        b: 147,
                        W: -1,
                        r: 2
                    }, {
                        M: 85,
                        b: 146,
                        W: -1,
                        r: 2
                    }, {
                        M: 85,
                        b: 140,
                        W: -1,
                        r: 2
                    }, MMV, mW, {
                        M: 62,
                        b: 70,
                        W: -1,
                        r: 3
                    }, wN, wN, mW, mW, {
                        M: 62,
                        b: 70,
                        W: -1,
                        r: 3
                    }],
                    [mM, MMV, {
                        M: 85,
                        b: 71,
                        W: 31,
                        r: 0
                    }, {
                        M: 85,
                        b: 142,
                        W: -1,
                        r: 3
                    }, {
                        M: 85,
                        b: 146,
                        W: -1,
                        r: 1
                    }, {
                        M: 85,
                        b: 150,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 5,
                        r: 2
                    }, {
                        M: 62,
                        b: 70,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 0,
                        r: 2
                    }, wN, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 7,
                        r: 0
                    }, {
                        M: 62,
                        b: 70,
                        W: -1,
                        r: 3
                    }],
                    [mM, MMV, MMV, MMV, MMV, MMV, MMV, MMV, MMV, {
                        M: 85,
                        b: 32,
                        W: -1,
                        r: 2
                    }, MMV, MMV, MMV],
                    [mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, MMV, {
                        M: 85,
                        b: 71,
                        W: 28,
                        r: 3
                    }, nVw, nVw, MMV, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }],
                    [mM, mM, mM, mM, mM, mM, MMV, {
                        M: 85,
                        b: 71,
                        W: 21,
                        r: 3
                    }, nVw, {
                        M: 85,
                        b: 71,
                        W: 18,
                        r: 3
                    }, MMV],
                    [mM, mM, mM, mM, mM, mM, MMV, MMV, MMV, MMV, MMV]
                ]
            };
            VwV[nVM.NNVvV] = {
                width: 0,
                height: 0,
                Wwm: NVwNM,
                vN: [
                    [mM],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 111,
                        W: -1,
                        r: 3
                    }, mM, mM, {
                        M: 0,
                        b: 111,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 111,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 111,
                        W: -1,
                        r: 3
                    }, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 26,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 24,
                        r: 0
                    }, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, MMV, MMV, MMV, MMV, MMV, MMV, MMV, MMV, MMV, MMV, MMV, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, WmN, WmN, WmN, WmN, WmN, WmN, WmN, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 0
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, MMV, {
                        M: 85,
                        b: 71,
                        W: 37,
                        r: 1
                    }, {
                        M: 85,
                        b: 71,
                        W: 28,
                        r: 0
                    }, nVw, {
                        M: 85,
                        b: 71,
                        W: 31,
                        r: 1
                    }, {
                        M: 85,
                        b: 71,
                        W: 32,
                        r: 1
                    }, MMV, {
                        M: 85,
                        b: 71,
                        W: 37,
                        r: 1
                    }, nVw, nVw, MMV, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, WmN, mW, {
                        M: 62,
                        b: 70,
                        W: -1,
                        r: 3
                    }, wN, wN, {
                        M: 62,
                        b: 71,
                        W: 13,
                        r: 2
                    }, WmN, Vvv, Vvv, Vvv, Vvv],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, MMV, nVw, nVw, nVw, nVw, nVw, MMV, nVw, nVw, {
                        M: 85,
                        b: 71,
                        W: 36,
                        r: 1
                    }, MMV, mM, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 23,
                        r: 0
                    }, WmN, mW, {
                        M: 62,
                        b: 71,
                        W: 40,
                        r: 2
                    }, wN, wN, {
                        M: 62,
                        b: 71,
                        W: 12,
                        r: 2
                    }, WmN, {
                        M: 84,
                        b: 71,
                        W: 26,
                        r: 3
                    }, {
                        M: 84,
                        b: 71,
                        W: 17,
                        r: 3
                    }, VVw, Vvv],
                    [mM, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 0
                    }, Vvv, Vvv, {
                        M: 84,
                        b: 52,
                        W: -1,
                        r: 0
                    }, Vvv, Vvv, MMV, MMV, Vvv, {
                        M: 85,
                        b: 71,
                        W: 41,
                        r: 0
                    }, Vvv, {
                        M: 85,
                        b: 71,
                        W: 41,
                        r: 0
                    }, MMV, nnV, MMV, MMV, MMV, MMV, MMV, MMV, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 151,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 150,
                        W: -1,
                        r: 1
                    }, wN, wN, wN, wN, mW, WmN, VVw, VVw, {
                        M: 84,
                        b: 71,
                        W: 18,
                        r: 2
                    }, Vvv],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, Vvv, VVw, VVw, VVw, VVw, {
                        M: 84,
                        b: 71,
                        W: 35,
                        r: 2
                    }, {
                        M: 84,
                        b: 71,
                        W: 35,
                        r: 2
                    }, VVw, VVw, VVw, VVw, {
                        M: 84,
                        b: 71,
                        W: 35,
                        r: 2
                    }, {
                        M: 84,
                        b: 71,
                        W: 35,
                        r: 2
                    }, VVw, VVw, VVw, VVw, {
                        M: 84,
                        b: 71,
                        W: 33,
                        r: 2
                    }, MMV, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 151,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 150,
                        W: -1,
                        r: 1
                    }, wN, wN, wN, wN, mW, {
                        M: 67,
                        b: 71,
                        W: 41,
                        r: 1
                    }, VVw, VVw, {
                        M: 84,
                        b: 71,
                        W: 18,
                        r: 2
                    }, Vvv],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, Vvv, {
                        M: 84,
                        b: 71,
                        W: 9,
                        r: 0
                    }, VVw, VVw, VVw, VVw, VVw, {
                        M: 84,
                        b: 151,
                        W: -1,
                        r: 1
                    }, VVw, VVw, {
                        M: 84,
                        b: 151,
                        W: -1,
                        r: 1
                    }, VVw, VVw, VVw, VVw, VVw, VVw, {
                        M: 85,
                        b: 71,
                        W: 33,
                        r: 2
                    }, MMV, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 23,
                        r: 0
                    }, WmN, {
                        M: 62,
                        b: 71,
                        W: 39,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 39,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 3
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 2
                    }, WmN, {
                        M: 84,
                        b: 71,
                        W: 26,
                        r: 2
                    }, VVw, {
                        M: 84,
                        b: 71,
                        W: 16,
                        r: 2
                    }, Vvv, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 1
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, Vvv, {
                        M: 84,
                        b: 71,
                        W: 10,
                        r: 2
                    }, VVw, VVw, VVw, Vvv, Vvv, {
                        M: 84,
                        b: 149,
                        W: -1,
                        r: 2
                    }, {
                        M: 85,
                        b: 150,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 150,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 149,
                        W: -1,
                        r: 2
                    }, Vvv, Vvv, VVw, VVw, MMV, Vvv, MMV, MMV, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, WmN, WmN, WmN, WmN, {
                        M: 0,
                        b: 52,
                        W: -1,
                        r: 0
                    }, WmN, WmN, Vvv, Vvv, Vvv, Vvv],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, Vvv, Vvv, Vvv, {
                        M: 84,
                        b: 71,
                        W: 33,
                        r: 0
                    }, VVw, Vvv, {
                        M: 84,
                        b: 71,
                        W: 32,
                        r: 0
                    }, {
                        M: 84,
                        b: 142,
                        W: -1,
                        r: 3
                    }, {
                        M: 84,
                        b: 140,
                        W: -1,
                        r: 1
                    }, {
                        M: 85,
                        b: 146,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 142,
                        W: -1,
                        r: 2
                    }, {
                        M: 84,
                        b: 151,
                        W: -1,
                        r: 2
                    }, {
                        M: 84,
                        b: 150,
                        W: -1,
                        r: 1
                    }, VVw, {
                        M: 84,
                        b: 71,
                        W: 33,
                        r: 2
                    }, MMV, {
                        M: 0,
                        b: 71,
                        W: 37,
                        r: 1
                    }, {
                        M: 0,
                        b: 71,
                        W: 38,
                        r: 1
                    }, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, VVw, VVw, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 0
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, Vvv, {
                        M: 84,
                        b: 71,
                        W: 22,
                        r: 0
                    }, VVw, Vvv, VVw, {
                        M: 84,
                        b: 71,
                        W: 34,
                        r: 3
                    }, nVw, {
                        M: 85,
                        b: 140,
                        W: -1,
                        r: 2
                    }, {
                        M: 84,
                        b: 71,
                        W: 34,
                        r: 3
                    }, VVw, Vvv, VVw, {
                        M: 84,
                        b: 71,
                        W: 38,
                        r: 0
                    }, MMV, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 32,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 24,
                        r: 0
                    }],
                    [mM, mM, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 26,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 24,
                        r: 0
                    }, mM, Vvv, nnV, {
                        M: 84,
                        b: 32,
                        W: -1,
                        r: 0
                    }, Vvv, {
                        M: 84,
                        b: 142,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 148,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 146,
                        W: -1,
                        r: 1
                    }, {
                        M: 85,
                        b: 146,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 148,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 142,
                        W: -1,
                        r: 1
                    }, Vvv, {
                        M: 84,
                        b: 32,
                        W: -1,
                        r: 0
                    }, nnV, MMV, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 35,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 31,
                        r: 0
                    }],
                    [mM, mM, mM, MMV, MMV, MMV, MMV, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 3
                    }, nVw, nVw, Vvv, {
                        M: 84,
                        b: 140,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 71,
                        W: 34,
                        r: 1
                    }, {
                        M: 85,
                        b: 140,
                        W: -1,
                        r: 2
                    }, nVw, {
                        M: 84,
                        b: 71,
                        W: 34,
                        r: 1
                    }, {
                        M: 84,
                        b: 140,
                        W: -1,
                        r: 2
                    }, Vvv, nVw, nVw, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 1
                    }, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mM, mM, mM, mW],
                    [mM, mM, mM, MMV, {
                        M: 85,
                        b: 71,
                        W: 33,
                        r: 1
                    }, {
                        M: 85,
                        b: 71,
                        W: 33,
                        r: 1
                    }, MMV, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 3
                    }, {
                        M: 85,
                        b: 70,
                        W: -1,
                        r: 2
                    }, VVw, {
                        M: 84,
                        b: 144,
                        W: -1,
                        r: 1
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 1
                    }, {
                        M: 84,
                        b: 145,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 142,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 146,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 147,
                        W: -1,
                        r: 3
                    }, {
                        M: 84,
                        b: 142,
                        W: -1,
                        r: 1
                    }, {
                        M: 84,
                        b: 146,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 3
                    }, {
                        M: 84,
                        b: 144,
                        W: -1,
                        r: 1
                    }, VVw, {
                        M: 85,
                        b: 70,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 1
                    }, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, MmM, MmM, {
                        M: 67,
                        b: 30,
                        W: -1,
                        r: 2
                    }, MmM, MmM, mW, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }],
                    [mM, mM, mM, Vvv, VVw, VVw, Vvv, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 32,
                        W: -1,
                        r: 3
                    }, nVw, nVw, nVw, Vvv, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 85,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, Vvv, nVw, nVw, nVw, {
                        M: 0,
                        b: 32,
                        W: -1,
                        r: 1
                    }, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 0
                    }, MmM, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 6,
                        r: 1
                    }, MmM, mW, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }, wN, wN, mM, mM, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }],
                    [mM, mM, mM, {
                        M: 84,
                        b: 71,
                        W: 41,
                        r: 1
                    }, VVw, VVw, {
                        M: 84,
                        b: 71,
                        W: 41,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 3
                    }, {
                        M: 85,
                        b: 70,
                        W: -1,
                        r: 0
                    }, VVw, VVw, VVw, {
                        M: 84,
                        b: 144,
                        W: -1,
                        r: 1
                    }, {
                        M: 84,
                        b: 144,
                        W: -1,
                        r: 1
                    }, VVw, VVw, {
                        M: 84,
                        b: 144,
                        W: -1,
                        r: 1
                    }, {
                        M: 84,
                        b: 144,
                        W: -1,
                        r: 1
                    }, VVw, VVw, VVw, {
                        M: 85,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 1
                    }, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, {
                        M: 67,
                        b: 30,
                        W: -1,
                        r: 1
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 19,
                        r: 2
                    }, wNn, mW, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }, wN, wN, mM, mM, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }],
                    [mM, mM, mM, MMV, {
                        M: 85,
                        b: 71,
                        W: 36,
                        r: 2
                    }, {
                        M: 85,
                        b: 71,
                        W: 37,
                        r: 3
                    }, MMV, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 3
                    }, {
                        M: 85,
                        b: 71,
                        W: 39,
                        r: 0
                    }, nVw, nVw, nVw, nVw, nVw, nVw, nVw, nVw, nVw, nVw, {
                        M: 85,
                        b: 71,
                        W: 35,
                        r: 1
                    }, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 1
                    }, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, MmM, {
                        M: 67,
                        b: 71,
                        W: 8,
                        r: 3
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 0,
                        r: 1
                    }, MmM, mW, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 1
                    }, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 1
                    }, mM, mM, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }],
                    [mM, mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 1
                    }, MMV, MMV, MMV, MMV, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 3
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 32,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 32,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 70,
                        W: -1,
                        r: 1
                    }, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 23,
                        r: 0
                    }, MmM, MmM, MmM, MmM, MmM, mW, mWv, mWv, mWv, mWv, mM, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mW, mW, mW, mW, mW, mW, mW, mWv, mW, {
                        M: 62,
                        b: 71,
                        W: 21,
                        r: 1
                    }, vV, wN, wN, wN, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 3
                    }],
                    [{
                        M: 0,
                        b: 86,
                        W: 26,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 33,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 32,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 33,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 32,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 24,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 2
                    }, mWv, mWv, mWv, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 0
                    }, vV, vV, {
                        M: 67,
                        b: 51,
                        W: -1,
                        r: 2
                    }, mWv, mWv, mWv, mWv],
                    [{
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 28,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mWv, {
                        M: 67,
                        b: 71,
                        W: 13,
                        r: 1
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 27,
                        r: 1
                    }, wN, wN, mWv, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 3
                    }, wN, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 3
                    }],
                    [{
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 27,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, mW, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 1
                    }, wN, wN, wN, wN, wN, wN, mWv, wN, wN, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 3
                    }],
                    [{
                        M: 0,
                        b: 86,
                        W: 30,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 42,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 43,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 34,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mWv, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 0
                    }, wN, wN, mWv, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 0
                    }, mWv, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 1
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 7,
                        r: 0
                    }, mM, mM, mM, mM, mM, mM, {
                        M: 84,
                        b: 71,
                        W: 23,
                        r: 0
                    }, {
                        M: 84,
                        b: 151,
                        W: -1,
                        r: 0
                    }, {
                        M: 84,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 0
                    }, mWv, {
                        M: 67,
                        b: 71,
                        W: 15,
                        r: 0
                    }, {
                        M: 67,
                        b: 71,
                        W: 4,
                        r: 0
                    }, {
                        M: 67,
                        b: 71,
                        W: 3,
                        r: 0
                    }, {
                        M: 67,
                        b: 71,
                        W: 14,
                        r: 0
                    }, wN, wN, wN, wN, wN, mWv, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 1
                    }],
                    [mM, mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 26,
                        r: 1
                    }, mW, mW, wNn, {
                        M: 62,
                        b: 71,
                        W: 16,
                        r: 2
                    }, mW, mW, wNn, {
                        M: 0,
                        b: 31,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 31,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 15,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, mM, mM, mM, VnW, VnW, VnW, {
                        M: 62,
                        b: 150,
                        W: -1,
                        r: 3
                    }, VnW, VnW, VnW, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mWv, {
                        M: 67,
                        b: 71,
                        W: 4,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 7,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 7,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 3,
                        r: 1
                    }, wN, mW, mW, mW, wN, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 3
                    }],
                    [mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, wNn, {
                        M: 62,
                        b: 71,
                        W: 17,
                        r: 1
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 22,
                        r: 1
                    }, wNn, {
                        M: 62,
                        b: 71,
                        W: 17,
                        r: 2
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 15,
                        r: 1
                    }, wNn, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, VnW, {
                        M: 62,
                        b: 71,
                        W: 16,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 39,
                        r: 1
                    }, mW, mW, mW, VnW, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 148,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, wN, wN, wN, wN, wN, mW, mW, mW, wN, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 3
                    }],
                    [mM, mM, wNn, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 0,
                        r: 1
                    }, wNn, {
                        M: 62,
                        b: 71,
                        W: 1,
                        r: 3
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 8,
                        r: 1
                    }, wNn, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, nnV, Vvv, Vvv, VnW, mW, mW, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 27,
                        r: 2
                    }, VnW, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 0
                    }, {
                        M: 67,
                        b: 71,
                        W: 27,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 8,
                        r: 2
                    }, {
                        M: 67,
                        b: 71,
                        W: 27,
                        r: 3
                    }, wN, wN, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 2
                    }, mWv],
                    [mM, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 0
                    }, wNn, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 2
                    }, mW, mW, wNn, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 12,
                        r: 2
                    }, Vmmnn, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 2
                    }, Vvv, {
                        M: 84,
                        b: 71,
                        W: 16,
                        r: 1
                    }, {
                        M: 84,
                        b: 71,
                        W: 19,
                        r: 1
                    }, Vvv, {
                        M: 62,
                        b: 32,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 70,
                        W: -1,
                        r: 0
                    }, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 39,
                        r: 2
                    }, VnW, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 148,
                        W: -1,
                        r: 0
                    }, mWv, mWv, mWv, mWv, mWv, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 0
                    }, mWv, mWv, mWv, mWv, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 1
                    }],
                    [mM, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 0
                    }, Vmmnn, wNn, wNn, wNn, wNn, wNn, wNn, Vmmnn, Vmmnn, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 0
                    }, Vvv, VVw, VVw, Vvv, wN, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 3
                    }, mW, mW, mW, VnW, {
                        M: 84,
                        b: 71,
                        W: 23,
                        r: 0
                    }, VVw, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 0
                    }, mWv, {
                        M: 62,
                        b: 71,
                        W: 20,
                        r: 1
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 28,
                        r: 0
                    }, vV, mW, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 20,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 13,
                        r: 1
                    }, vV],
                    [mM, mM, mM, vV, vV, vV, vV, vV, vV, mW, mW, mW, mW, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, Vvv, VVw, VVw, WmN, wN, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 3
                    }, mW, mW, mW, {
                        M: 62,
                        b: 150,
                        W: -1,
                        r: 3
                    }, {
                        M: 84,
                        b: 151,
                        W: -1,
                        r: 0
                    }, VVw, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 1
                    }, mW, mW, mW, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 3
                    }, mW, mW, mW, mW, mW, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, vV, {
                        M: 62,
                        b: 71,
                        W: 6,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 14,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 15,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 5,
                        r: 0
                    }, vV, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 2
                    }, mW, mW, mW, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 16,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, Vvv, {
                        M: 84,
                        b: 71,
                        W: 18,
                        r: 3
                    }, VVw, {
                        M: 67,
                        b: 150,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 71,
                        W: 40,
                        r: 2
                    }, mW, mW, mW, {
                        M: 62,
                        b: 150,
                        W: -1,
                        r: 3
                    }, {
                        M: 84,
                        b: 151,
                        W: -1,
                        r: 3
                    }, VVw, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 143,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 144,
                        W: -1,
                        r: 3
                    }, mW, mW, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 3
                    }, mW, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 12,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 12,
                        r: 3
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, mM, mM, vV, mW, mW, mW, mW, vV, mWv, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 2
                    }, mWv, mWv, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 13,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, Vvv, Vvv, Vvv, WmN, {
                        M: 67,
                        b: 144,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 3
                    }, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 39,
                        r: 2
                    }, VnW, {
                        M: 84,
                        b: 71,
                        W: 23,
                        r: 0
                    }, VVw, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 0
                    }, vV, vV, vV, vV, vV, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 2
                    }, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 2
                    }, mWv, mWv, mWv, mWv, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 1
                    }],
                    [mM, mM, mM, vV, {
                        M: 62,
                        b: 71,
                        W: 0,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 2,
                        r: 0
                    }, mW, mW, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 1
                    }, wN, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mWv, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, WmN, {
                        M: 67,
                        b: 148,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 151,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 151,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 27,
                        r: 2
                    }, VnW, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 142,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 148,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 140,
                        W: -1,
                        r: 1
                    }, {
                        M: 0,
                        b: 148,
                        W: -1,
                        r: 0
                    }, mWv, {
                        M: 67,
                        b: 71,
                        W: 16,
                        r: 1
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 26,
                        r: 1
                    }, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 2
                    }, {
                        M: 67,
                        b: 71,
                        W: 17,
                        r: 1
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 3
                    }],
                    [mM, mM, mM, vV, mW, mW, mW, mW, vV, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 0
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 2
                    }, mWv, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, mM, mM, mM, WmN, WmN, WmN, {
                        M: 62,
                        b: 150,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 150,
                        W: -1,
                        r: 3
                    }, VnW, VnW, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, mM, mM, mW, mW, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 1
                    }, wN, wN, wN, wN, wN, wN, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 3
                    }],
                    [mM, mM, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, vV, {
                        M: 62,
                        b: 71,
                        W: 1,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 8,
                        r: 2
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 2
                    }, vV, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 2
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 20,
                        r: 2
                    }, mWv, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, mM, mM, mM, mM, mM, {
                        M: 84,
                        b: 71,
                        W: 23,
                        r: 0
                    }, VVw, VVw, {
                        M: 84,
                        b: 71,
                        W: 23,
                        r: 0
                    }, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, mM, mM, mW, mW, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 1
                    }, wN, wN, wN, wN, wN, wN, {
                        M: 67,
                        b: 31,
                        W: -1,
                        r: 3
                    }],
                    [mM, mM, mM, vV, vV, vV, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 0
                    }, vV, vV, mWv, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 0
                    }, mWv, mWv, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, mM, mM, mM, mM, mM, VVw, VVw, VVw, VVw, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 21,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 20,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 15,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 36,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 4,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 45,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 32,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 25,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 24,
                        r: 0
                    }],
                    [{
                        M: 0,
                        b: 86,
                        W: 17,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 4,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 5,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 3,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 37,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 35,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 29,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 31,
                        r: 0
                    }],
                    [{
                        M: 0,
                        b: 86,
                        W: 16,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 11,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 10,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 9,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 38,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 1,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 34,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, wN, wN, wN, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 1
                    }, wN, wN, wN],
                    [{
                        M: 0,
                        b: 86,
                        W: 40,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 0,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 39,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, mM, mM, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, vV, vV, WMM, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, vV, vV, vV, {
                        M: 0,
                        b: 71,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 1
                    }, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 1
                    }, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }, wN, wN, wN, vV, {
                        M: 62,
                        b: 71,
                        W: 27,
                        r: 1
                    }, {
                        M: 62,
                        b: 71,
                        W: 27,
                        r: 1
                    }, mW, mW, mW, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 111,
                        W: -1,
                        r: 1
                    }, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 111,
                        W: -1,
                        r: 1
                    }, mM, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, WmN, WmN, WmN, WmN, WmN, WmN, WmN, WmN, VnW, VnW, VnW, VnW, VnW, VnW, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }, wN, wN, wN, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 1
                    }, mW, mW, mW, mW, mW, {
                        M: 62,
                        b: 69,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 1
                    }, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 148,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 1
                    }],
                    [mM, WmN, {
                        M: 67,
                        b: 71,
                        W: 35,
                        r: 2
                    }, wN, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 146,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 146,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 140,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 140,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 150,
                        W: -1,
                        r: 1
                    }, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 17,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 16,
                        r: 1
                    }, VnW, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 3,
                        r: 1
                    }, vV, {
                        M: 62,
                        b: 71,
                        W: 22,
                        r: 2
                    }, {
                        M: 62,
                        b: 71,
                        W: 20,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 11,
                        r: 2
                    }, mW, vV, vV, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 111,
                        W: -1,
                        r: 1
                    }, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 111,
                        W: -1,
                        r: 1
                    }, mM, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [mM, WmN, wN, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 149,
                        W: -1,
                        r: 2
                    }, nnV, nnV, VnW, mW, mW, mW, mW, VnW, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 3
                    }, mWv, mWv, vV, vV, vV, vV, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 2
                    }, vV, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 3
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 140,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 69,
                        W: -1,
                        r: 1
                    }],
                    [{
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 1
                    }, WmN, wN, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 146,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 150,
                        W: -1,
                        r: 1
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 7,
                        r: 3
                    }, mW, {
                        M: 62,
                        b: 32,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, {
                        M: 0,
                        b: 69,
                        W: -1,
                        r: 2
                    }, WMM, {
                        M: 62,
                        b: 71,
                        W: 14,
                        r: 0
                    }, {
                        M: 62,
                        b: 71,
                        W: 5,
                        r: 0
                    }, mW, mW, mW, mW, vV, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }, mM, wN, {
                        M: 67,
                        b: 71,
                        W: 45,
                        r: 0
                    }, {
                        M: 67,
                        b: 71,
                        W: 45,
                        r: 0
                    }, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 1
                    }, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 24,
                        r: 1
                    }],
                    [mM, WmN, wN, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 70,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 140,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 149,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 144,
                        W: -1,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 71,
                        W: 7,
                        r: 3
                    }, mW, {
                        M: 62,
                        b: 32,
                        W: -1,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 0
                    }, vV, mW, mW, mW, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 13,
                        r: 2
                    }, vV, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }],
                    [{
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 1
                    }, WmN, wN, wN, {
                        M: 67,
                        b: 71,
                        W: 3,
                        r: 0
                    }, {
                        M: 67,
                        b: 148,
                        W: -1,
                        r: 3
                    }, WmN, {
                        M: 67,
                        b: 146,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 147,
                        W: -1,
                        r: 3
                    }, {
                        M: 62,
                        b: 149,
                        W: -1,
                        r: 1
                    }, {
                        M: 62,
                        b: 144,
                        W: -1,
                        r: 0
                    }, mW, mW, mW, VnW, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 0
                    }, vV, {
                        M: 62,
                        b: 71,
                        W: 12,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 23,
                        r: 3
                    }, mW, mW, {
                        M: 62,
                        b: 71,
                        W: 10,
                        r: 3
                    }, {
                        M: 62,
                        b: 71,
                        W: 9,
                        r: 1
                    }, vV, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 3
                    }, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }],
                    [{
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 1
                    }, WmN, wN, mW, mW, {
                        M: 67,
                        b: 146,
                        W: -1,
                        r: 0
                    }, WmN, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 1
                    }, nnV, {
                        M: 62,
                        b: 144,
                        W: -1,
                        r: 0
                    }, mW, {
                        M: 62,
                        b: 144,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 144,
                        W: -1,
                        r: 0
                    }, VnW, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, mM, vV, vV, vV, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 31,
                        W: -1,
                        r: 0
                    }, vV, vV, vV, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 23,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 22,
                        r: 0
                    }],
                    [mM, WmN, wN, mW, mW, {
                        M: 67,
                        b: 71,
                        W: 10,
                        r: 0
                    }, WmN, {
                        M: 67,
                        b: 71,
                        W: 14,
                        r: 3
                    }, {
                        M: 67,
                        b: 140,
                        W: -1,
                        r: 0
                    }, VnW, {
                        M: 62,
                        b: 149,
                        W: -1,
                        r: 0
                    }, VnW, {
                        M: 62,
                        b: 149,
                        W: -1,
                        r: 0
                    }, {
                        M: 62,
                        b: 149,
                        W: -1,
                        r: 0
                    }, VnW, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 1
                    }, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }, mM, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 1
                    }, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 30,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 31,
                        r: 0
                    }],
                    [mM, WmN, {
                        M: 67,
                        b: 71,
                        W: 36,
                        r: 2
                    }, {
                        M: 67,
                        b: 151,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 71,
                        W: 12,
                        r: 3
                    }, {
                        M: 67,
                        b: 71,
                        W: 9,
                        r: 2
                    }, WmN, {
                        M: 67,
                        b: 71,
                        W: 16,
                        r: 2
                    }, {
                        M: 67,
                        b: 140,
                        W: -1,
                        r: 2
                    }, {
                        M: 67,
                        b: 71,
                        W: 17,
                        r: 3
                    }, {
                        M: 67,
                        b: 147,
                        W: -1,
                        r: 2
                    }, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 0
                    }, {
                        M: 67,
                        b: 146,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 2
                    }, nnV, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }],
                    [mM, WmN, WmN, {
                        M: 67,
                        b: 150,
                        W: -1,
                        r: 2
                    }, WmN, WmN, WmN, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 2
                    }, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 140,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 146,
                        W: -1,
                        r: 3
                    }, {
                        M: 67,
                        b: 142,
                        W: -1,
                        r: 2
                    }, wN, {
                        M: 67,
                        b: 71,
                        W: 23,
                        r: 2
                    }, nnV, {
                        M: 0,
                        b: 71,
                        W: 24,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }],
                    [mM, mM, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 2
                    }, {
                        M: 0,
                        b: 71,
                        W: 16,
                        r: 1
                    }, {
                        M: 0,
                        b: 71,
                        W: 17,
                        r: 1
                    }, {
                        M: 0,
                        b: 71,
                        W: 26,
                        r: 1
                    }, nnV, nnV, nnV, nnV, nnV, nnV, nnV, nnV, nnV, mM, {
                        M: 0,
                        b: 86,
                        W: 14,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 12,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 6,
                        r: 0
                    }],
                    [mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, mM, {
                        M: 0,
                        b: 86,
                        W: 40,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 1,
                        r: 0
                    }, {
                        M: 0,
                        b: 86,
                        W: 41,
                        r: 0
                    }]
                ]
            };
            VwV[nVM.WwVVn] = {
                width: 0,
                height: 0,
                Wwm: 0,
                vN: [
                    [mM],
                    [mM, mM, mM, mM, mM, mM, Wm, Wm, Wm, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, Wm, Wm, mM, mM, mM, mM, mM, mM, mM, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, mM, mM, mM, mM, Wm, MMM, MMM, {
                        M: 85,
                        b: 52,
                        W: -1,
                        r: 2
                    }, MMM, MMM, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, mM, mM, mM, Wm, Wm, Wm, Wm, MMM, nVw, nVw, nVw, MMM, Wm, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, Wm, Wm, Wm, Wm, MMM, MMM, MMM, MMM, nVw, nVw, nVw, MMM, Wm, Wm, mM, Wm, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, Wm, MMM, {
                        M: 85,
                        b: 71,
                        W: 9,
                        r: 0
                    }, {
                        M: 85,
                        b: 71,
                        W: 58,
                        r: 0
                    }, MMM, {
                        M: 85,
                        b: 71,
                        W: 33,
                        r: 3
                    }, nVw, {
                        M: 85,
                        b: 71,
                        W: 33,
                        r: 3
                    }, MMM, Wm, Wm, mM, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, Wm, MMM, {
                        M: 85,
                        b: 71,
                        W: 10,
                        r: 2
                    }, nVw, MMM, MMM, VVw, MwnVw, MwnVw, WvMnw, Wm, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, Wm, MMM, nVw, nVw, VVw, VVw, VVw, VVw, {
                        M: 84,
                        b: 71,
                        W: 51,
                        r: 1
                    }, MwnVw, Wm, Wm, mM, mM, Wm, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, MMM, MMM, MMM, MMM, MMM, VVw, VVw, VVw, VVw, MwnVw, WvMnw, Wm, Wm, mM, Wm, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, MMM, VVw, VVw, VVw, MMM, MMM, VVw, VVw, VVw, MwnVw, MMM, MMM, Wm, mM, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, MMM, VVw, MMM, VVw, VVw, VVw, VVw, MMM, nVw, nVw, {
                        M: 85,
                        b: 71,
                        W: 55,
                        r: 2
                    }, MMM, Wm, mM, Wm, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, MMM, VVw, MMM, MMM, MMM, MMM, VVw, MMM, {
                        M: 85,
                        b: 71,
                        W: 28,
                        r: 3
                    }, nVw, {
                        M: 85,
                        b: 71,
                        W: 21,
                        r: 1
                    }, MMM, Wm, mM, mM, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, MMM, nVw, {
                        M: 85,
                        b: 71,
                        W: 23,
                        r: 1
                    }, {
                        M: 85,
                        b: 71,
                        W: 53,
                        r: 3
                    }, {
                        M: 85,
                        b: 71,
                        W: 56,
                        r: 2
                    }, MMM, VVw, MMM, MMM, MMM, MMM, MMM, Wm, mM, mM, Wm, Wm, Wm],
                    [mM, mM, mM, Wm, Wm, MMM, nVw, nVw, nVw, {
                        M: 85,
                        b: 71,
                        W: 53,
                        r: 2
                    }, MMM, VVw, VVw, nVw, {
                        M: 85,
                        b: 71,
                        W: 51,
                        r: 0
                    }, {
                        M: 85,
                        b: 71,
                        W: 48,
                        r: 0
                    }, MMM, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, MMM, nVw, nVw, nVw, nVw, MMM, MMM, MMM, nVw, nVw, nVw, MMM, Wm, Wm, Wm],
                    [mM, Wm, Wm, Wm, Wm, MMM, {
                        M: 85,
                        b: 71,
                        W: 20,
                        r: 3
                    }, {
                        M: 85,
                        b: 71,
                        W: 11,
                        r: 2
                    }, {
                        M: 85,
                        b: 71,
                        W: 49,
                        r: 3
                    }, nVw, {
                        M: 85,
                        b: 71,
                        W: 54,
                        r: 2
                    }, MMM, MMM, {
                        M: 85,
                        b: 71,
                        W: 48,
                        r: 2
                    }, {
                        M: 85,
                        b: 71,
                        W: 50,
                        r: 2
                    }, {
                        M: 85,
                        b: 71,
                        W: 49,
                        r: 3
                    }, MMM, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, Wm, Wm, Wm, MMM, MMM, MMM, MMM, MMM, MMM, MMM, MMM, MMM, MMM, MMM, MMM, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, mM, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm, Wm],
                    [mM, mM, mM, mM, Wm, Wm, Wm, mM, mM, mM, mM, Wm, Wm, Wm, Wm, Wm]
                ]
            };
        }
    } catch (NNV) {};
    for (var vM = 0; vM < VwV[networkMappings[231]]; vM++) {
        var VwMMm = VwV[vM];
        var NMMnw = VwV[vM].vN;
        VwMMm[networkMappings[12]] = NMMnw[networkMappings[231]];
        for (var wm = 0; wm < NMMnw[networkMappings[231]]; wm++) VwMMm[networkMappings[65]] = Math[networkMappings[4]](NMMnw[wm][networkMappings[231]], VwMMm[networkMappings[65]]);
    }
    var MvwvN = [];
    MvwvN[mw.VmM] = Mv.NmvMv;
    MvwvN[mw.mnM] = Mv.nwN;
    MvwvN[mw.wVv] = Mv.wVv;
    MvwvN[mw.wmW] = Mv.wmW;
    MvwvN[mw.nvw] = Mv.nvw;
    MvwvN[mw.mnm] = Mv.mnm;
    MvwvN[mw.VWN] = Mv.VWN;
    MvwvN[mw.MWV] = Mv.MWV;
    MvwvN[mw.MWw] = Mv.MWw;
    MvwvN[mw.nVm] = Mv.nVm;
    MvwvN[mw.nwW] = Mv.nwW;
    var WVMwv = null;
    var VMNvn = null;
    var nmnnn = null;
    var mNvWW = null;
    var MnMnw = null;
    var wnVmV = null;
    var VNnwN = null;
    var vVwmN = "#93a5a9";
    var MNvvM = "#405e5e";
    var VwMnV = [{
        id: Mv.NmV,
        nW: 50,
        life: 255
    }, {
        id: Mv.mvm,
        nW: 100,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 1,
        life: 255
    }];
    var Mnv = [];
    vm = 0;
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.NmV,
        nW: 20,
        life: 255
    }, {
        id: Mv.mvm,
        nW: 40,
        life: 255
    }, {
        id: Mv.vNV,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.NmV,
        nW: 20,
        life: 255
    }, {
        id: Mv.mvm,
        nW: 40,
        life: 255
    }, {
        id: Mv.vNV,
        nW: 3,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.NmV,
        nW: 30,
        life: 255
    }, {
        id: Mv.mvm,
        nW: 50,
        life: 255
    }, {
        id: Mv.NmvMv,
        nW: 1,
        life: 255
    }, {
        id: Mv.vNV,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.NmV,
        nW: 30,
        life: 255
    }, {
        id: Mv.mvm,
        nW: 60,
        life: 255
    }, {
        id: Mv.NmvMv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.vNV,
        nW: 5,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.NmV,
        nW: 40,
        life: 255
    }, {
        id: Mv.mvm,
        nW: 90,
        life: 255
    }, {
        id: Mv.NmvMv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.NmV,
        nW: 40,
        life: 255
    }, {
        id: Mv.mvm,
        nW: 150,
        life: 255
    }, {
        id: Mv.NmvMv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NmvMv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 2,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NmvMv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nvM,
        nW: 6,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 2,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.nVmmn,
        nW: 1,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 3,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.nWWVW,
        nW: 1,
        life: 255
    }, {
        id: Mv.nMMWV,
        nW: 20,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.VNn,
        nW: 10,
        life: 255
    }, {
        id: Mv.vmwww,
        nW: 2,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.VNn,
        nW: 16,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 2,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 2,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 14,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 2,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 2,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.NMWww,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 14,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 2,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 2,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.VwmmV,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 14,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 2,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 2,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.WVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 16,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 2,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 1,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 2,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.MVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 16,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 2,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 1,
        life: 255
    }, {
        id: Mv.wVv,
        nW: 2,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.wMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.MVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 16,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 2,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 1,
        life: 255
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.MVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 16,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 2,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 1,
        life: 255
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.MVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 2,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 20,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 4,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 2,
        life: 255
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }, {
        id: Mv.Wmm,
        nW: 4,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.MVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.nwN,
        nW: 2,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 26,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 6,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 3,
        life: 255
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }, {
        id: Mv.WwwWW,
        nW: 8,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.MVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 26,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 6,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 3,
        life: 255
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }, {
        id: Mv.WwwWW,
        nW: 8,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.MVv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 26,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 6,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 3,
        life: 255
    }, {
        id: Mv.www,
        nW: 1,
        life: 20
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.vwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.NMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 26,
        life: 255
    }, {
        id: Mv.nVV,
        nW: 6,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 3,
        life: 255
    }, {
        id: Mv.www,
        nW: 1,
        life: 20
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.vwN,
        nW: 1,
        life: 255
    }, {
        id: Mv.NMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 26,
        life: 255
    }, {
        id: Mv.mnm,
        nW: 1,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 3,
        life: 255
    }, {
        id: Mv.www,
        nW: 1,
        life: 20
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NMV,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 26,
        life: 255
    }, {
        id: Mv.mnm,
        nW: 1,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 3,
        life: 255
    }, {
        id: Mv.www,
        nW: 1,
        life: 20
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NwW,
        nW: 1,
        life: 255
    }, {
        id: Mv.Vww,
        nW: 26,
        life: 255
    }, {
        id: Mv.mnm,
        nW: 1,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 3,
        life: 255
    }, {
        id: Mv.www,
        nW: 1,
        life: 20
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NwW,
        nW: 1,
        life: 255
    }, {
        id: Mv.wvM,
        nW: 14,
        life: 255
    }, {
        id: Mv.mnm,
        nW: 1,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 3,
        life: 255
    }, {
        id: Mv.www,
        nW: 1,
        life: 20
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NwW,
        nW: 1,
        life: 255
    }, {
        id: Mv.wvM,
        nW: 14,
        life: 255
    }, {
        id: Mv.mnm,
        nW: 1,
        life: 255
    }, {
        id: Mv.WWW,
        nW: 3,
        life: 255
    }, {
        id: Mv.NmVWW,
        nW: 1,
        life: 7
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NwW,
        nW: 1,
        life: 255
    }, {
        id: Mv.wvM,
        nW: 14,
        life: 255
    }, {
        id: Mv.mnm,
        nW: 1,
        life: 255
    }, {
        id: Mv.mVmVm,
        nW: 6,
        life: 255
    }, {
        id: Mv.NmVWW,
        nW: 1,
        life: 7
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }];
    Mnv[vm++] = [{
        id: Mv.vNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.wNv,
        nW: 1,
        life: 255
    }, {
        id: Mv.NwW,
        nW: 1,
        life: 255
    }, {
        id: Mv.wvM,
        nW: 20,
        life: 255
    }, {
        id: Mv.mnm,
        nW: 1,
        life: 255
    }, {
        id: Mv.NMWww,
        nW: 6,
        life: 255
    }, {
        id: Mv.NmVWW,
        nW: 1,
        life: 7
    }, {
        id: Mv.wmW,
        nW: 1,
        life: 255
    }];
    vm = 0;
    var WNNvV = {
        MnmVv: vm++,
        vWvVn: vm++
    };
    var wwW = [];
    wwW[NWM.wnNmV] = {
        vMVWN: 700,
        nWNvN: 550,
        WmvMM: 0.5,
        MmWwm: 1,
        mode: WNNvV.MnmVv,
        wNwNN: ((2 * 8) * 60) * 1000,
        MW: VN.health,
        wM: 0.05,
        VwVwW: 6,
        nVW: {
            angle: 0,
            x: 28,
            y: -50,
            src: "img/day-ghoul-left-arm.png",
            n: {
                v: 0
            }
        },
        vvw: {
            angle: 0,
            x: 28,
            y: 50,
            src: "img/day-ghoul-right-arm.png",
            n: {
                v: 0
            }
        },
        head: {
            src: "img/day-ghoul.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/ghoul-hurt.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-ghoul-death.png",
            n: {
                v: 0
            }
        },
        VNV: 0,
        vMm: 30,
        wnW: 0,
        Vwn: 38,
        life: 160,
        VMN: [0.12, 0.22],
        vnwVW: [0.14, 0.25],
        Nw: [
            [Mv.Mnn, 4, Nm.Mnn]
        ],
        wnm: 1,
        wnW: 0,
        identifier: 0,
        vVwNv: 0,
        maxDamage: 0,
        NVMVv: 40,
        NvvMV: 50,
        currentDamage: [8, 20],
        WMN: 20,
        vmN: ((2 * 8) * 60) * 1000,
        playerState: 1200
    };
    wwW[NWM.vMWWN] = {
        vMVWN: 300,
        nWNvN: 150,
        WmvMM: 0.5,
        MmWwm: 2,
        mode: WNNvV.MnmVv,
        wNwNN: (((2 * 2) * 8) * 60) * 1000,
        MW: VN.health,
        wM: 0.05,
        VwVwW: 6,
        nVW: {
            angle: 0,
            x: 28,
            y: -40,
            src: "img/day-ghoul3-left-arm.png",
            n: {
                v: 0
            }
        },
        vvw: {
            angle: 0,
            x: 28,
            y: 40,
            src: "img/day-ghoul3-right-arm.png",
            n: {
                v: 0
            }
        },
        head: {
            src: "img/day-ghoul3.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/ghoul3-hurt.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-ghoul3-death.png",
            n: {
                v: 0
            }
        },
        VNV: 0,
        vMm: 18,
        wnW: 0,
        Vwn: 38,
        life: 100,
        VMN: [0.18, 0.28],
        vnwVW: [0.22, 0.38],
        Nw: [
            [Mv.NwNVV, 4, Nm.NwNVV]
        ],
        wnm: 1,
        wnW: 0,
        identifier: 0,
        vVwNv: 0,
        maxDamage: 0,
        NVMVv: 40,
        NvvMV: 50,
        currentDamage: [7, 14],
        WMN: 20,
        vmN: ((2 * 8) * 60) * 1000,
        playerState: 1000
    };
    wwW[NWM.WVmvV] = {
        vMVWN: 500,
        nWNvN: 350,
        WmvMM: 0.5,
        MmWwm: 4,
        mode: WNNvV.MnmVv,
        wNwNN: (((3 * 2) * 8) * 60) * 1000,
        MW: VN.health,
        wM: 0.05,
        VwVwW: 6,
        nVW: {
            angle: 0,
            x: 28,
            y: -48,
            src: "img/day-ghoul4-left-arm.png",
            n: {
                v: 0
            }
        },
        vvw: {
            angle: 0,
            x: 28,
            y: 48,
            src: "img/day-ghoul4-right-arm.png",
            n: {
                v: 0
            }
        },
        head: {
            src: "img/day-ghoul4.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/ghoul4-hurt.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-ghoul4-death.png",
            n: {
                v: 0
            }
        },
        VNV: 0,
        vMm: 14,
        wnW: 0,
        Vwn: 38,
        life: 100,
        VMN: [0.12, 0.23],
        vnwVW: [0.14, 0.26],
        Nw: [
            [Mv.MWW, 4, Nm.MWW],
            [Mv.Mnn, 4, Nm.Mnn],
            [Mv.VWv, 4, Nm.VWv]
        ],
        wnm: 1,
        wnW: 0,
        identifier: 1,
        vVwNv: 120,
        maxDamage: 500,
        NVMVv: 40,
        NvvMV: 50,
        currentDamage: [6, 20],
        WMN: 20,
        vmN: ((2 * 8) * 60) * 1000,
        playerState: 500
    };
    wwW[NWM.NMmnw] = {
        vMVWN: 500,
        nWNvN: 350,
        WmvMM: 0.5,
        MmWwm: 8,
        mode: WNNvV.MnmVv,
        wNwNN: (((4 * 2) * 8) * 60) * 1000,
        MW: VN.health,
        wM: 0.05,
        VwVwW: 6,
        nVW: {
            angle: 0,
            x: 28,
            y: -40,
            src: "img/day-ghoul2-left-arm.png",
            n: {
                v: 0
            }
        },
        vvw: {
            angle: 0,
            x: 28,
            y: 40,
            src: "img/day-ghoul2-right-arm.png",
            n: {
                v: 0
            }
        },
        head: {
            src: "img/day-ghoul2.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/ghoul2-hurt.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-ghoul2-death.png",
            n: {
                v: 0
            }
        },
        VNV: 0,
        vMm: 10,
        wnW: 0,
        Vwn: 38,
        life: 160,
        VMN: [0.12, 0.23],
        vnwVW: [0.14, 0.26],
        Nw: [
            [Mv.NMm, 4, Nm.NMm]
        ],
        wnm: 1,
        wnW: NVwNM,
        identifier: 0,
        vVwNv: 0,
        maxDamage: 0,
        NVMVv: 40,
        NvvMV: 50,
        currentDamage: [5, 15],
        WMN: 20,
        vmN: ((2 * 8) * 60) * 1000,
        playerState: 1500
    };
    wwW[NWM.WWwwV] = {
        vMVWN: 700,
        nWNvN: 550,
        WmvMM: 0.5,
        MmWwm: 16,
        mode: WNNvV.MnmVv,
        wNwNN: (((5 * 2) * 8) * 60) * 1000,
        MW: VN.health,
        wM: 0.05,
        VwVwW: 6,
        nVW: {
            angle: 0,
            x: 28,
            y: -50,
            src: "img/day-ghoul1-left-arm.png",
            n: {
                v: 0
            }
        },
        vvw: {
            angle: 0,
            x: 28,
            y: 50,
            src: "img/day-ghoul1-right-arm.png",
            n: {
                v: 0
            }
        },
        head: {
            src: "img/day-ghoul1.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/ghoul1-hurt.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-ghoul1-death.png",
            n: {
                v: 0
            }
        },
        VNV: 0,
        vMm: 14,
        wnW: 0,
        Vwn: 38,
        life: 800,
        VMN: [0.11, 0.21],
        vnwVW: [0.14, 0.24],
        Nw: [
            [Mv.VWM, 4, Nm.VWM],
            [Mv.mWm, 12, Nm.mWm]
        ],
        wnm: 1,
        wnW: 0,
        identifier: 0,
        vVwNv: 0,
        maxDamage: 0,
        NVMVv: 40,
        NvvMV: 50,
        currentDamage: [20, 50],
        WMN: 20,
        vmN: ((4 * 8) * 60) * 1000,
        playerState: 5000
    };
    wwW[NWM.wMvvM] = {
        vMVWN: 700,
        nWNvN: 550,
        WmvMM: 0.5,
        MmWwm: 32,
        mode: WNNvV.MnmVv,
        wNwNN: ((2 * 8) * 60) * 1000,
        MW: VN.health,
        wM: 0.05,
        VwVwW: 6,
        nVW: {
            angle: 0,
            x: 28,
            y: -50,
            src: "img/day-ghoul5-left-arm.png",
            n: {
                v: 0
            }
        },
        vvw: {
            angle: 0,
            x: 28,
            y: 50,
            src: "img/day-ghoul5-right-arm.png",
            n: {
                v: 0
            }
        },
        head: {
            src: "img/day-ghoul5.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/ghoul5-hurt.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-ghoul5-death.png",
            n: {
                v: 0
            }
        },
        VNV: 0,
        vMm: 0,
        wnW: 0,
        Vwn: 38,
        life: 160,
        VMN: [0.04, 0.04],
        Nw: [
            [Mv.wWnNV, 4, Nm.wWnNV]
        ],
        wnm: 0,
        wnW: 0,
        identifier: 0,
        vVwNv: 0,
        maxDamage: 0,
        NVMVv: 40,
        NvvMV: 50,
        currentDamage: [20, 30],
        WMN: 20,
        vmN: ((2 * 8) * 60) * 1000,
        playerState: 100
    };
    wwW[NWM.vwWmW] = {
        vMVWN: 700,
        nWNvN: 550,
        WmvMM: 0.5,
        MmWwm: 0,
        mode: WNNvV.vWvVn,
        wNwNN: 0,
        MW: VN.health,
        wM: 0.05,
        VwVwW: 6,
        nVW: {
            angle: 0,
            x: 28,
            y: -50,
            src: "img/day-lapabot-left-arm.png",
            n: {
                v: 0
            }
        },
        vvw: {
            angle: 0,
            x: 28,
            y: 50,
            src: "img/day-lapabot-right-arm.png",
            n: {
                v: 0
            }
        },
        head: {
            src: "img/day-lapabot.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/lapabot-hurt.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-lapabot-death.png",
            n: {
                v: 0
            }
        },
        VNV: 0,
        vMm: 0,
        wnW: 0,
        Vwn: 38,
        life: 600,
        VMN: [0.08, 0.08],
        Nw: [
            [Mv.mWm, 4, Nm.mWm]
        ],
        wnm: 0,
        wnW: 0,
        identifier: 0,
        vVwNv: 0,
        maxDamage: 0,
        NVMVv: 40,
        NvvMV: 50,
        currentDamage: [30, 30],
        WMN: 20,
        vmN: ((2 * 8) * 60) * 1000,
        playerState: 100
    };
    wwW[NWM.VnMnW] = {
        vMVWN: 550,
        nWNvN: 400,
        WmvMM: 0.5,
        MmWwm: 0,
        mode: WNNvV.MnmVv,
        wNwNN: 0,
        MW: VN.health,
        wM: 0.05,
        VwVwW: 6,
        nVW: {
            angle: 0,
            x: 8,
            y: -45,
            src: "img/day-hal-bot-left-arm.png",
            n: {
                v: 0
            }
        },
        vvw: {
            angle: 0,
            x: 8,
            y: 45,
            src: "img/day-hal-bot-right-arm.png",
            n: {
                v: 0
            }
        },
        head: {
            src: "img/day-hal-bot.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/hal-bot-hurt.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-hal-bot-death.png",
            n: {
                v: 0
            }
        },
        VNV: 0,
        vMm: 0,
        wnW: 0,
        Vwn: 38,
        life: 800,
        VMN: [0.12, 0.12],
        Nw: [
            [Mv.mWm, 4, Nm.mWm]
        ],
        wnm: 0,
        wnW: 0,
        identifier: 0,
        vVwNv: 0,
        maxDamage: 0,
        NVMVv: 40,
        NvvMV: 50,
        currentDamage: [30, 30],
        WMN: 20,
        vmN: ((2 * 8) * 60) * 1000,
        playerState: 500
    };
    wwW[NWM.wvMvm] = {
        vMVWN: 700,
        nWNvN: 550,
        WmvMM: 0.5,
        MmWwm: 0,
        mode: WNNvV.MnmVv,
        wNwNN: 0,
        MW: VN.health,
        wM: 0.05,
        VwVwW: 6,
        nVW: {
            angle: 0,
            x: 18,
            y: -60,
            src: "img/day-tesla-bot-left-arm.png",
            n: {
                v: 0
            }
        },
        vvw: {
            angle: 0,
            x: 18,
            y: 60,
            src: "img/day-tesla-bot-right-arm.png",
            n: {
                v: 0
            }
        },
        head: {
            src: "img/day-tesla-bot.png",
            n: {
                v: 0
            }
        },
        Mvw: {
            src: "img/tesla-bot-hurt.png",
            n: {
                v: 0
            }
        },
        vNn: {
            src: "img/day-tesla-bot-death.png",
            n: {
                v: 0
            }
        },
        VNV: 0,
        vMm: 0,
        wnW: 0,
        Vwn: 38,
        life: 3000,
        VMN: [0.1, 0.1],
        Nw: [
            [Mv.mMN, 4, Nm.mMN],
            [Mv.VWM, 4, Nm.VWM]
        ],
        wnm: 0,
        wnW: 0,
        identifier: 1,
        vVwNv: 100,
        maxDamage: 100,
        NVMVv: 40,
        NvvMV: 50,
        currentDamage: [80, 80],
        WMN: 40,
        vmN: ((2 * 8) * 60) * 1000,
        playerState: 3000
    };
    try {
        if (WnM !== undefined) {
            WnM.Mv = Mv;
            WnM.VV = VV;
            WnM.VwV = VwV;
            WnM.nVM = nVM;
            WnM.Mww = Mww;
            WnM.wNN = wNN;
            WnM.Nm = Nm;
            WnM.vMv = vMv;
            WnM.nwv = nwv;
            WnM.mw = mw;
            WnM.wn = wn;
            WnM.Mnv = Mnv;
            WnM.VwMnV = VwMnV;
            WnM.wwW = wwW;
            WnM.NWM = NWM;
            WnM.Nwv = Nwv;
            for (var MNN = 0; MNN < 3; MNN++) {
                for (var vM = 1; vM < Mww[networkMappings[231]]; vM++) {
                    var mN = Mww[vM];
                    var NMW = mN[networkMappings[79]].NMW;
                    if (NMW === undefined) continue;
                    for (var wm = 0; wm < NMW[networkMappings[231]]; wm++) {
                        var mMw = Mww[NMW[wm][0]];
                        if (wm === 0) mN.playerState = 0;
                        mN.playerState += mMw.playerState * NMW[wm][1];
                        NMW[wm][2] = mMw.Nw;
                    }
                    mN.playerState = Math[networkMappings[68]](mN.playerState / 4);
                }
            }
            for (var vM = 0; vM < wV[networkMappings[231]]; vM++) {
                var mN = wV[vM];
                var NMW = mN[networkMappings[79]].NMW;
                if (NMW === undefined) continue;
                for (var wm = 0; wm < NMW[networkMappings[231]]; wm++) {
                    var mMw = Mww[NMW[wm][0]];
                    if (wm === 0) mN.playerState = 0;
                    mN.playerState += mMw.playerState * NMW[wm][1];
                    NMW[wm][2] = mMw.Nw;
                }
                mN.playerState = Math[networkMappings[68]](mN.playerState / 4);
            }
        }
    } catch (NNV) {
        for (var vM = 0; vM < nmVVN[networkMappings[231]]; vM++) nmVVN[vM].n = Wn.Nvw(nmVVN[vM][networkMappings[10]], nmVVN[vM].n);
        WVMwv = JSON[networkMappings[20]](JSON[networkMappings[185]](Mww));
        nmnnn = JSON[networkMappings[20]](JSON[networkMappings[185]](NWw));
        mNvWW = JSON[networkMappings[20]](JSON[networkMappings[185]](wNN));
        VMNvn = JSON[networkMappings[20]](JSON[networkMappings[185]](mnW));
        MnMnw = JSON[networkMappings[20]](JSON[networkMappings[185]](nwv));
        wnVmV = JSON[networkMappings[20]](JSON[networkMappings[185]](vNmWV));
        VNnwN = JSON[networkMappings[20]](JSON[networkMappings[185]](wwW));

        function mMMnw(VVmWN, VvVWW, status, nNwnN) {
            for (var Wvmnm in VvVWW) {
                var VnvmW = VvVWW[Wvmnm];
                var MNW = VVmWN[Wvmnm];
                if (MNW === undefined) {
                    VVmWN[Wvmnm] = VnvmW;
                    continue;
                }
                if (typeof MNW === "object") mMMnw(MNW, VnvmW, status, nNwnN);
                else if (typeof MNW === "string") VVmWN[Wvmnm] = MNW[networkMappings[221]](status, nNwnN);
            }
        };;
        mMMnw(MnMnw, nwv, "day", "night");
        mMMnw(WVMwv, Mww, "day", "night");
        mMMnw(nmnnn, NWw, "day", "night");
        mMMnw(mNvWW, wNN, "day", "night");
        mMMnw(VMNvn, mnW, "day", "night");
        mMMnw(wnVmV, vNmWV, "day", "night");
        mMMnw(VNnwN, wwW, "day", "night");

        function nmMMw(VVmWN) {
            for (var Wvmnm in VVmWN) {
                var MNW = VVmWN[Wvmnm];
                if ((typeof MNW === "object") && (MNW !== null)) {
                    if (MNW.WwV !== undefined) {
                        var WvM = mnW[vMM].nwwWM[MNW.attributes];
                        WvM.WwV = MNW.WwV;
                        WvM.WwM = MNW.WwM;
                        WvM.Nwm = MNW.Nwm;
                        WvM = VMNvn[vMM].nwwWM[MNW.attributes];
                        WvM.WwV = MNW.WwV;
                        WvM.WwM = MNW.WwM;
                        WvM.Nwm = MNW.Nwm;
                    } else nmMMw(MNW);
                }
            }
        };;
        nmMMw(Mww);
    }
    var wvW = (function() {
        var mWwmm = [237225, 303931, 166687, 229213, 217292, 205860, 182041, 273065];
        var WMV = [];
        var MNMnm = Math[networkMappings[68]](Math[networkMappings[211]]() * mWwmm[networkMappings[231]]);
        var nVvVV = 0;
        var nnvVw = 0;
        var mNVNW = 0;
        var MWWmN = 0.45;
        var vwnWV = 0;
        var VNNNw = 0;
        //MM.NVw[networkMappings[152]] = new MM.NmW("audio/end.mp3", 0, true);
        MM.NVw[networkMappings[152]] = new MM.NmW("https://raw.githubusercontent.com/ultrasmesharik/sound/main/menu.mp3", 0, true);
        //MM.NVw[networkMappings[43]] = new MM.NmW("audio/title.mp3", 0, true);
        MM.NVw[networkMappings[43]] = new MM.NmW("https://raw.githubusercontent.com/ultrasmesharik/sound/main/menu.mp3", 0, true);
        MM.NVw.wnVwv = new MM.NmW("audio/geiger.mp3", 0, true);
        MM.NVw.vVnmm = new MM.NmW("audio/ambient1.mp3", 0, true);
        MM.NVw.mWWWM = new MM.NmW("audio/ambient2.mp3", 0, true);
        MM.NVw.nvvvn = new MM.NmW("audio/ambient3.mp3", 0, true);
        MM.NVw.nmVNw = new MM.NmW("audio/ambient4.mp3", 0, true);
        MM.NVw.NwVmw = new MM.NmW("audio/ambient5.mp3", 0, true);
        MM.NVw.NVVWM = new MM.NmW("audio/ambient6.mp3", 0, true);
        MM.NVw.WVnnW = new MM.NmW("audio/ambient7.mp3", 0, true);
        MM.NVw.MwVVm = new MM.NmW("audio/ambient8.mp3", 0, true);
        WMV[networkMappings[140]](MM.NVw.vVnmm);
        WMV[networkMappings[140]](MM.NVw.mWWWM);
        WMV[networkMappings[140]](MM.NVw.nvvvn);
        WMV[networkMappings[140]](MM.NVw.nmVNw);
        WMV[networkMappings[140]](MM.NVw.NwVmw);
        WMV[networkMappings[140]](MM.NVw.NVVWM);
        WMV[networkMappings[140]](MM.NVw.WVnnW);
        WMV[networkMappings[140]](MM.NVw.MwVVm);
        MM.Mn[networkMappings[103]] = new MM.NmW("audio/open.mp3", 1, false, 1);
        MM.Mn.vWW = new MM.NmW("audio/drag.mp3", 1, false, 1);
        MM.Mn[networkMappings[83]] = new MM.NmW("audio/play.mp3", 1, false, 1);
        MM.Mn.mvNnn = new MM.NmW("audio/skill.mp3", 1, false, 1);
        MM.Mn.WnV = new MM.NmW("audio/craft.mp3", 1, false, 1);
        MM.Mn[networkMappings[33]] = new MM.NmW("audio/button.mp3", 1, false, 1);
        MM.Mn.nnvnw = new MM.NmW("audio/throwLoot.mp3", 1, false, 1);
        MM.Mn.nVNvn = new MM.NmW("audio/levelup.mp3", 1, false, 1);
        MM.Mn.identifier = new MM.NmW("audio/explosion.mp3", 1, false, 1);
        MM.Mn.MwWwM = new MM.NmW("audio/zipper-on.mp3", 0.7, false, 1);
        MM.Mn.nnWww = new MM.NmW("audio/zipper-off.mp3", 0.7, false, 1);
        MM.Mn.wNnMV = [new MM.NmW("audio/eat-1s-0.mp3", 1, false, 1), new MM.NmW("audio/eat-1s-1.mp3", 1, false, 1), new MM.NmW("audio/eat-1s-2.mp3", 1, false, 1)];
        MM.Mn.currentDamage = [];
        for (var vM = 1; vM < MWVvN[networkMappings[231]]; vM++) MM.Mn.currentDamage[vM] = new MM.NmW(MWVvN[vM], 1, false, 1);
        MM.Mn.vnV = [];
        var Mmwnn = mnW[vMM].Mmwnn;
        for (var vM = 0; vM < Mmwnn[networkMappings[231]]; vM++) {
            var statusEffect = Mmwnn[vM];
            if (statusEffect.nWw === undefined) MM.Mn.vnV[vM] = 0;
            else if (typeof statusEffect.nWw === "number") MM.Mn.vnV[vM] = statusEffect.nWw;
            else {
                MM.Mn.vnV[vM] = [];
                for (var wm = 0; wm < statusEffect.nWw[networkMappings[231]]; wm++) MM.Mn.vnV[vM][wm] = new MM.NmW(statusEffect.nWw[wm], 1, false, 1);
            }
        }
        if (MM[networkMappings[139]].nvVNM === 1) {
            MM.NwN(WMV[MNMnm]);
            MM.NwN(MM.NVw[networkMappings[43]]);
        }
        for (var vM = 0; vM < MM.Mn.vnV[networkMappings[231]]; vM++) {
            var nWw = MM.Mn.vnV[vM];
            if (nWw === 1) MM.Mn.vnV[vM] = MM.Mn.wNnMV;
        }
        if (MM[networkMappings[139]].nvWnM === 1) {
            MM.NwN(MM.Mn[networkMappings[103]]);
            MM.NwN(MM.Mn[networkMappings[83]]);
            MM.NwN(MM.Mn.vWW);
            MM.NwN(MM.Mn.mvNnn);
            MM.NwN(MM.Mn.WnV);
            MM.NwN(MM.Mn[networkMappings[33]]);
            MM.NwN(MM.Mn.nVNvn);
            MM.NwN(MM.Mn.identifier);
            for (var vM = 0; vM < MM.Mn.wNnMV[networkMappings[231]]; vM++) MM.NwN(MM.Mn.wNnMV[vM]);
            for (var vM = 1; vM < MM.Mn.currentDamage[networkMappings[231]]; vM++) MM.NwN(MM.Mn.currentDamage[vM]);
            for (var vM = 0; vM < MM.Mn.vnV[networkMappings[231]]; vM++) {
                var nWw = MM.Mn.vnV[vM];
                if (nWw !== 0) {
                    for (var wm = 0; wm < nWw[networkMappings[231]]; wm++) MM.NwN(nWw[wm]);
                }
            }
        }

        function WNmWW() {
            MM.WwwMm(MM.NVw[networkMappings[43]]);
            MM.WwwMm(MM.NVw[networkMappings[152]]);
            for (var vM = 0; vM < WMV[networkMappings[231]]; vM++) MM.WwwMm(WMV[vM]);
            if (MM[networkMappings[139]].nvWnM === 1) {
                var MmmMM = MM[networkMappings[139]].nvVNM;
                MM[networkMappings[139]].nvVNM = 1;
                MM.WwwMm(MM.NVw.wnVwv);
                MM[networkMappings[139]].nvVNM = MmmMM;
            }
            if ((VNNNw !== wvW.wnVwv) && (nnvVw === 1)) {
                if (vwnWV === 0) {
                    vwnWV = 1000;
                    var VNv = wvW.wnVwv - VNNNw;
                    MM.mWNvw(MM.NVw.wnVwv, 250, VNv);
                    VNNNw = wvW.wnVwv;
                }
                vwnWV = Math[networkMappings[4]](0, vwnWV - WW);
            }
            if ((nVvVV === 0) && (nnvVw === 1)) {
                MM.mWNvw(WMV[MNMnm], 5000, -MWWmN);
                MNMnm = (MNMnm + 1) % WMV[networkMappings[231]];
                nVvVV = mWwmm[MNMnm] - 5000;
                MM.mWNvw(WMV[MNMnm], 5000, MWWmN);
            }
            nVvVV = Math[networkMappings[4]](0, nVvVV - WW);
        };;

        function vwWmV() {
            nnvVw = 0;
            mNVNW = 1;
            MM.mWNvw(MM.NVw.wnVwv, 250, -VNNNw);
            VNNNw = 0;
            wvW.wnVwv = 0;
            MM.mWNvw(WMV[MNMnm], 500, -MWWmN);
            MM.mWNvw(MM.NVw[networkMappings[152]], 1000, wvW.MWWmN);
        };;

        function WVMwN() {
            if (mNVNW === 0) MM.mWNvw(MM.NVw[networkMappings[43]], 500, -MWWmN);
            else MM.mWNvw(MM.NVw[networkMappings[152]], 500, -MWWmN);
        };;

        function NnnwW() {
            nnvVw = 1;
            WVMwN();
            if (nVvVV === 0) MNMnm = (MNMnm + 1) % WMV[networkMappings[231]];
            nVvVV = mWwmm[MNMnm] - 5000;
            MM.mWNvw(WMV[MNMnm], 5000, MWWmN);
        };;
        return {
            NnnwW: NnnwW,
            vwWmV: vwWmV,
            WNmWW: WNmWW,
            WVMwN: WVMwN,
            MWWmN: MWWmN,
            wnVwv: 0
        };
    })();
    try {
        VNNMW;
    } catch (NNV) {
        VNNMW = undefined;
    }
    if (VNNMW === undefined) {
        NV.aiptag = NV.aiptag || ({});
        NV.aiptag["consented"] = true;
        NV.aiptag["cmd"] = NV.aiptag["cmd"] || ([]);
        NV.aiptag["cmd"]["display"] = NV.aiptag["cmd"]["display"] || ([]);
        NV.aiptag["cmd"]["player"] = NV.aiptag["cmd"]["player"] || ([]);
        var MmMmV = function() {
            adplayer = new aipPlayer({
                AD_WIDTH: 960,
                AD_HEIGHT: 540,
                AD_FULLSCREEN: true,
                AD_CENTERPLAYER: true,
                LOADING_TEXT: 'loading advertisement',
                PREROLL_ELEM: function() {
                    return document[networkMappings[61]]('preroll');
                },
                AIP_COMPLETE: function(VWVmnvV) {
                    adminSettings.nVN = 0;
                    adminSettings.mmMNn = -1;
                    adminSettings.mNVvw();
                },
                AIP_REMOVE: function() {}
            });
        };
        NV.aiptag["cmd"]["player"][networkMappings[140]](MmMmV);
    }

    function WnWMw() {
        try {
            if (NV[networkMappings[17]] !== NV[networkMappings[178]]) {
                mnwwV = localStorage[networkMappings[88]]("inIframe");
                if (mnwwV === "1") localStorage[networkMappings[76]]("inIframe", "0");
                else {
                    localStorage[networkMappings[76]]("inIframe", "1");
                    location[networkMappings[72]] = location[networkMappings[72]] + "";
                }
            }
        } catch (NNV) {}
    };
    WnWMw();
    var mNWWw = [30, 2104];
    try {
        VNNMW;
    } catch (NNV) {
        VNNMW = undefined;
    }
    mNv.nnM(600, 30000, 5000);
    network.nnM(30, 15000, 2000, 3, 60000, 10000, handleError, handleMessage, generateTokenData);

    function WvwMW() {
        WWWWw = (((((((((true && (document[networkMappings[61]]("nickname") !== null)) && (document[networkMappings[61]]("terms") !== null)) && (document[networkMappings[61]]("serverList") !== null)) && (document[networkMappings[61]]("changelog") !== null)) && (document[networkMappings[61]]("howtoplay") !== null)) && (document[networkMappings[61]]("featuredVideo") !== null)) && (document[networkMappings[61]]("trevda") !== null)) && (document[networkMappings[61]]("preroll") !== null)) && (document[networkMappings[61]]("footer") !== null)) && (document[networkMappings[61]]("chat") !== null);
        if (WWWWw === true) {
            nMv.nnM();
            adminSettings.nnM();
            gameManager.nnM();
            nNVVV.nnM();
            WWWnm.nnM();
            Mwmnn.nnM();
            Wn.NvWnN(nMv, wWnWn, "can", "bod", 1280, undefined, true);
            nMv.Wwv();
        } else setTimeout(WvwMW, 100);
    };;
    NV[networkMappings[44]] = function() {
        if (network[networkMappings[155]] & network.connectionStates.nnMvm) return "Are you sure you want quit?";
    };
    WvwMW();
})();